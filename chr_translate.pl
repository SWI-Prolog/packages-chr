/*  Generated by CHR bootstrap compiler
    From: chr_translate.chr
    Date: Fri Feb 18 13:54:47 2005

    DO NOT EDIT.  EDIT THE CHR FILE INSTEAD
*/

:-module(chr_translate, [chr_translate/2]).
:-use_module(chr_runtime).
:-style_check((-singleton)).
:-style_check((- (discontiguous))).
:-use_module(chr_runtime).
:-use_module(chr_hashtable_store).
:-style_check((-singleton)).
:-style_check((- (discontiguous))).
:-use_module(library(lists)).
:-use_module(hprolog).
:-use_module(library(assoc)).
:-use_module(pairlist).
:-use_module(library(ordsets)).
:-use_module(a_star).
:-use_module(listmap).
:-use_module(clean_code).
:-use_module(builtins).
:-use_module(find).
:-use_module(guard_entailment).
:-include(chr_op).
:-op(1150, fx, (chr_type)).
:-op(1130, xfx, (--->)).
:-op(1150, fx, (+)).
:-op(1150, fx, (-)).
:-op(1150, fx, (?)).
set_constraint_indices(A) :-
	set_constraint_indices(A, 1).
set_constraint_indices([], A) :-
	B is A-1,
	max_constraint_index(B).
set_constraint_indices([A|B], C) :-
	(   (   may_trigger(A)
	    ;   is_stored(A),
		get_store_type(A, default)
	    )
	->  constraint_index(A, C),
	    D is C+1,
	    set_constraint_indices(B, D)
	;   set_constraint_indices(B, C)
	).
chr_translate(A, B) :-
	init_chr_pp_flags,
	partition_clauses(A, C, D, E),
	(   C==[]
	->  insert_declarations(E, B)
	;   generate_show_constraint(F, C, G, D),
	    add_constraints(C),
	    add_rules(D),
	    check_rules(D, C),
	    add_occurrences(D),
	    functional_dependency_analysis(D),
	    set_semantics_rules(D),
	    symmetry_analysis(D),
	    guard_simplification,
	    storage_analysis(C),
	    observation_analysis(C),
	    ai_observation_analysis(C),
	    late_allocation(C),
	    assume_constraint_stores(C),
	    set_constraint_indices(C),
	    constraints_code(C, H),
	    validate_store_type_assumptions(C),
	    store_management_preds(C, I),
	    insert_declarations(E, J),
	    chr_module_declaration(K),
	    append_lists([J, I, H, K], B)
	).
store_management_preds(A, B) :-
	generate_attach_detach_a_constraint_all(A, C),
	generate_indexed_variables_clauses(A, D),
	generate_attach_increment(E),
	generate_attr_unify_hook(F),
	generate_extra_clauses(A, G),
	generate_insert_delete_constraints(A, H),
	generate_attach_code(A, I),
	generate_counter_code(J),
	append_lists([C, D, E, F, G, H, I, J], B).
insert_declarations(A, B) :-
	append(A, [ (:-use_module(chr(chr_runtime))), (:-use_module(chr(chr_hashtable_store)))], B).
generate_counter_code(A) :-
	(   chr_pp_flag(store_counter, on)
	->  A=[ ('$counter_init'(B):-nb_setval(B, 0)), ('$counter'(C, D):-nb_getval(C, D)), ('$counter_inc'(E):-nb_getval(E, F), G is F+1, nb_setval(E, G)), (:-'$counter_init'('$insert_counter')), (:-'$counter_init'('$delete_counter')), ('$insert_counter_inc':-'$counter_inc'('$insert_counter')), ('$delete_counter_inc':-'$counter_inc'('$delete_counter')), (counter_stats(H, I):-'$counter'('$insert_counter', H), '$counter'('$delete_counter', I))]
	;   A=[]
	).
chr_module_declaration(A) :-
	get_target_module(B),
	(   B\==chr_translate
	->  A=[ (:-multifile chr:'$chr_module'/1), chr:'$chr_module'(B)]
	;   A=[]
	).
partition_clauses([], [], [], []).
partition_clauses([A|B], C, D, E) :-
	(   parse_rule(A, F)
	->  C=G,
	    D=[F|H],
	    E=I
	;   is_declaration(A, J)
	->  append(J, G, C),
	    D=H,
	    E=I
	;   is_module_declaration(A, K)
	->  target_module(K),
	    C=G,
	    D=H,
	    E=[A|I]
	;   is_type_definition(A)
	->  C=G,
	    D=H,
	    E=I
	;   A=handler(L)
	->  format('CHR compiler WARNING: ~w.\n', [A]),
	    format('    `-->  SICStus compatibility: ignoring handler/1 declaration.\n', []),
	    C=G,
	    D=H,
	    E=I
	;   A=rules(M)
	->  format('CHR compiler WARNING: ~w.\n', [A]),
	    format('    `-->  SICStus compatibility: ignoring rules/1 declaration.\n', []),
	    C=G,
	    D=H,
	    E=I
	;   A=option(N, O)
	->  handle_option(N, O),
	    C=G,
	    D=H,
	    E=I
	;   C=G,
	    D=H,
	    E=[A|I]
	),
	partition_clauses(B, G, H, I).
is_declaration(A, B) :-
	(   A= (:-C)
	->  true
	;   A=C
	),
	C=..[constraints, D],
	conj2list(D, E),
	extract_type_mode(E, B).
extract_type_mode([], []).
extract_type_mode([A/B|C], [A/B|D]) :- !,
	extract_type_mode(C, D).
extract_type_mode([A|B], [C|D]) :-
	functor(A, E, F),
	C=E/F,
	A=..[G|H],
	extract_types_and_modes(H, I, J),
	constraint_type(E/F, I),
	constraint_mode(E/F, J),
	extract_type_mode(B, D).
extract_types_and_modes([], [], []).
extract_types_and_modes([ (+A)|B], [A|C], [ (+)|D]) :- !,
	extract_types_and_modes(B, C, D).
extract_types_and_modes([ (?A)|B], [A|C], [ (?)|D]) :- !,
	extract_types_and_modes(B, C, D).
extract_types_and_modes([ (-A)|B], [A|C], [ (?)|D]) :- !,
	extract_types_and_modes(B, C, D).
extract_types_and_modes([A|B], C, D) :-
	format('CHR compiler ERROR: Illegal mode/type declaration "~w".\n', [A]),
	format('    `--> correct syntax is +type, -type or ?type.\n', []),
	fail.
is_type_definition(A) :-
	(   A= (:-B)
	->  true
	;   A=B
	),
	B=..[ (chr_type), C],
	(   C= (D--->E)
	->  tdisj2list(E, F),
	    type_definition(D, F)
	;   format('CHR compiler WARNING: Illegal type definition "~w".\n', [C]),
	    format('    `--> Ignoring this malformed type definition.\n', [])
	).
tdisj2list(A, B) :-
	tdisj2list(A, B, []).
tdisj2list(A, B, C) :-
	A= (D;E), !,
	tdisj2list(D, B, F),
	tdisj2list(E, F, C).
tdisj2list(A, [A|B], B).
parse_rule(A, B) :-
	A= @(C, D), !,
	rule(D, yes(C), B).
parse_rule(A, B) :-
	rule(A, no, B).
rule(A, B, C) :-
	A=pragma(D, E), !,
	is_rule(D, F, G),
	conj2list(E, H),
	inc_rule_count(I),
	C=pragma(F, G, H, B, I).
rule(A, B, C) :-
	is_rule(A, D, E),
	inc_rule_count(F),
	C=pragma(D, E, [], B, F).
is_rule(A, B, C) :-
	A= ==>(D, E), !,
	conj2list(D, F),
	get_ids(F, G, H),
	C=ids([], G),
	(   E= (I|J)
	->  B=rule([], H, I, J)
	;   B=rule([], H, true, E)
	).
is_rule(A, B, C) :-
	A= <=>(D, E), !,
	(   E= (F|G)
	->  H=F,
	    I=G
	;   H=true,
	    I=E
	),
	(   D= \(J, K)
	->  conj2list(J, L),
	    conj2list(K, M),
	    get_ids(L, N, O, 0, P),
	    get_ids(M, Q, R, P, S),
	    C=ids(Q, N)
	;   conj2list(D, M),
	    O=[],
	    get_ids(M, Q, R),
	    C=ids(Q, [])
	),
	B=rule(R, O, H, I).
get_ids(A, B, C) :-
	get_ids(A, B, C, 0, D).
get_ids([], [], [], A, A).
get_ids([A|B], [C|D], [E|F], C, G) :-
	(   A= #(E, C)
	->  true
	;   E=A
	),
	H is C+1,
	get_ids(B, D, F, H, G).
is_module_declaration((:-module(A)), A).
is_module_declaration((:-module(A, B)), A).
add_constraints([]).
add_constraints([A|B]) :-
	max_occurrence(A, 0),
	A=C/D,
	length(E, D),
	set_elems(E, (?)),
	constraint_mode(A, E),
	add_constraints(B).
add_rules([]).
add_rules([A|B]) :-
	A=pragma(C, D, E, F, G),
	rule(G, A),
	add_rules(B).
check_rules([], A).
check_rules([A|B], C) :-
	check_rule(A, C),
	check_rules(B, C).
check_rule(A, B) :-
	check_rule_indexing(A),
	A=pragma(C, D, E, F, G),
	C=rule(H, I, J, K),
	append(H, I, L),
	check_head_constraints(L, B, A),
	check_pragmas(E, A).
check_head_constraints([], A, B).
check_head_constraints([A|B], C, D) :-
	functor(A, E, F),
	(   member(E/F, C)
	->  check_head_constraints(B, C, D)
	;   format('CHR compiler ERROR: Undeclared constraint ~w in head of ~@.\n', [E/F, format_rule(D)]),
	    format('    `--> Constraint should be one of ~w.\n', [C]),
	    fail
	).
check_pragmas([], A).
check_pragmas([A|B], C) :-
	check_pragma(A, C),
	check_pragmas(B, C).
check_pragma(A, B) :-
	var(A), !,
	format('CHR compiler ERROR: invalid pragma ~w in ~@.\n', [A, format_rule(B)]),
	format('    `--> Pragma should not be a variable!\n', []),
	fail.
check_pragma(passive(A), B) :- !,
	B=pragma(C, ids(D, E), F, G, H),
	(   memberchk_eq(A, D)
	->  true
	;   memberchk_eq(A, E)
	->  true
	;   format('CHR compiler ERROR: invalid identifier ~w in pragma passive in ~@.\n', [A, format_rule(B)]),
	    fail
	),
	passive(H, A).
check_pragma(A, B) :-
	A=already_in_heads, !,
	format('CHR compiler WARNING: currently unsupported pragma ~w in ~@.\n', [A, format_rule(B)]),
	format('    `--> Pragma is ignored. Termination and correctness may be affected \n', []).
check_pragma(A, B) :-
	A=already_in_head(C), !,
	format('CHR compiler WARNING: currently unsupported pragma ~w in ~@.\n', [A, format_rule(B)]),
	format('    `--> Pragma is ignored. Termination and correctness may be affected \n', []).
check_pragma(A, B) :-
	format('CHR compiler ERROR: invalid pragma ~w in ~@.\n', [A, format_rule(B)]),
	format('    `--> Pragma should be one of passive/1!\n', []),
	fail.
format_rule(A) :-
	A=pragma(B, C, D, E, F),
	(   E=yes(G)
	->  write('rule '),
	    write(G)
	;   write('rule number '),
	    write(F)
	).
check_rule_indexing(A) :-
	A=pragma(B, C, D, E, F),
	B=rule(G, H, I, J),
	term_variables(G-H, K),
	remove_anti_monotonic_guards(I, K, L),
	check_indexing(G, L-H),
	check_indexing(H, L-G).
remove_anti_monotonic_guards(A, B, C) :-
	conj2list(A, D),
	remove_anti_monotonic_guard_list(D, B, E),
	list2conj(E, C).
remove_anti_monotonic_guard_list([], A, []).
remove_anti_monotonic_guard_list([A|B], C, D) :-
	(   A=var(E),
	    memberchk_eq(E, C)
	->  D=F
	;   D=[A|F]
	),
	remove_anti_monotonic_guard_list(B, C, F).
check_indexing([], A).
check_indexing([A|B], C) :-
	functor(A, D, E),
	A=..[F|G],
	term_variables(B-C, H),
	check_indexing(G, 1, D/E, H),
	check_indexing(B, [A|C]).
check_indexing([], A, B, C).
check_indexing([A|B], C, D, E) :-
	(   is_indexed_argument(D, C)
	->  true
	;   nonvar(A)
	->  indexed_argument(D, C)
	;   term_variables(B, F),
	    append(F, E, G),
	    (   memberchk_eq(A, G)
	    ->  indexed_argument(D, C)
	    ;   true
	    )
	),
	H is C+1,
	term_variables(A, I),
	append(I, E, J),
	check_indexing(B, H, D, J).
add_occurrences([]).
add_occurrences([A|B]) :-
	A=pragma(rule(C, D, E, F), ids(G, H), I, J, K),
	add_occurrences(C, G, K),
	add_occurrences(D, H, K),
	add_occurrences(B).
add_occurrences([], [], A).
add_occurrences([A|B], [C|D], E) :-
	functor(A, F, G),
	H=F/G,
	new_occurrence(H, E, C),
	add_occurrences(B, D, E).
observation_analysis(A) :-
	(   chr_pp_flag(observation, on)
	->  observation_analysis(A, A)
	;   true
	).
observation_analysis([], A).
observation_analysis([A|B], C) :-
	get_max_occurrence(A, D),
	observation_analysis_occurrences(A, 1, D, C),
	observation_analysis(B, C).
observation_analysis_occurrences(A, B, C, D) :-
	(   B>C
	->  true
	;   observation_analysis_occurrence(A, B, D),
	    E is B+1,
	    observation_analysis_occurrences(A, E, C, D)
	).
observation_analysis_occurrence(A, B, C) :-
	get_occurrence(A, B, D, E),
	(   is_passive(D, E)
	->  true
	;   get_rule(D, F),
	    F=pragma(rule(G, H, I, J), ids(K, L), M, N, O),
	    (   select2(E, P, K, G, Q, R)
	    ->  append(R, H, S)
	    ;   select2(E, P, L, H, T, U)
	    ->  append(U, G, S)
	    ),
	    observe_heads(A, S),
	    observe_body(A, J, C)
	).
observe_heads(A, B) :-
	findall(C/D, (member(E, B), functor(E, C, D)), F),
	observe_all(A, F).
observe_all(A, B) :-
	(   B=[C|D]
	->  observes(A, C),
	    observe_all(A, D)
	;   true
	).
spawn_all(A, B) :-
	(   B=[C|D]
	->  spawns_observer(A, C),
	    spawn_all(A, D)
	;   true
	).
spawn_all_triggers(A, B) :-
	(   B=[C|D]
	->  (   may_trigger(C)
	    ->  spawns_observer(A, C)
	    ;   true
	    ),
	    spawn_all_triggers(A, D)
	;   true
	).
observe_body(A, B, C) :-
	(   var(B)
	->  spawn_all(A, C)
	;   B=true
	->  true
	;   B=fail
	->  true
	;   B= (D, E)
	->  observe_body(A, D, C),
	    observe_body(A, E, C)
	;   B= (D;E)
	->  observe_body(A, D, C),
	    observe_body(A, E, C)
	;   B= (D->E)
	->  observe_body(A, D, C),
	    observe_body(A, E, C)
	;   functor(B, F, G),
	    member(F/G, C)
	->  spawns_observer(A, F/G)
	;   B= (H=I)
	->  spawn_all_triggers(A, C)
	;   B= (J is K)
	->  spawn_all_triggers(A, C)
	;   binds_b(B, L)
	->  (   L==[]
	    ->  true
	    ;   spawn_all_triggers(A, C)
	    )
	;   spawn_all(A, C)
	).
late_allocation_analysis(A) :-
	(   chr_pp_flag(late_allocation, on)
	->  late_allocation(A)
	;   true
	).
late_allocation([]).
late_allocation([A|B]) :-
	allocation_occurrence(A, 1),
	late_allocation(B).
handle_option(A, B) :-
	var(A), !,
	format('CHR compiler ERROR: ~w.\n', [option(A, B)]),
	format('    `--> First argument should be an atom, not a variable.\n', []),
	fail.
handle_option(A, B) :-
	var(B), !,
	format('CHR compiler ERROR: ~w.\n', [option(A, B)]),
	format('    `--> Second argument should be a nonvariable.\n', []),
	fail.
handle_option(A, B) :-
	option_definition(A, B, C), !,
	set_chr_pp_flags(C).
handle_option(A, B) :-
	\+option_definition(A, C, D), !,
	setof(E, F^G^option_definition(E, F, G), H),
	format('CHR compiler WARNING: ~w.\n', [option(A, B)]),
	format('    `--> Invalid option name ~w: should be one of ~w.\n', [A, H]).
handle_option(A, B) :-
	findall(C, option_definition(A, C, D), E),
	format('CHR compiler ERROR: ~w.\n', [option(A, B)]),
	format('    `--> Invalid value ~w: should be one of ~w.\n', [B, E]),
	fail.
option_definition(optimize, experimental, A) :-
	A=[functional_dependency_analysis-on, check_unnecessary_active-off, reorder_heads-on, set_semantics_rule-off, storage_analysis-on, guard_via_reschedule-on, guard_simplification-on, check_impossible_rules-on, occurrence_subsumption-on, observation-on, ai_observation_analysis-on, late_allocation-on, reduced_indexing-on].
option_definition(optimize, full, A) :-
	A=[functional_dependency_analysis-on, check_unnecessary_active-full, reorder_heads-on, set_semantics_rule-on, storage_analysis-on, guard_via_reschedule-on, guard_simplification-on, check_impossible_rules-on, occurrence_subsumption-on, observation-on, ai_observation_analysis-on, late_allocation-on, reduced_indexing-on].
option_definition(optimize, sicstus, A) :-
	A=[functional_dependency_analysis-off, check_unnecessary_active-simplification, reorder_heads-off, set_semantics_rule-off, storage_analysis-off, guard_via_reschedule-off, guard_simplification-off, check_impossible_rules-off, occurrence_subsumption-off, observation-off, ai_observation_analysis-off, late_allocation-off, reduced_indexing-off].
option_definition(optimize, off, A) :-
	A=[functional_dependency_analysis-off, check_unnecessary_active-off, reorder_heads-off, set_semantics_rule-off, storage_analysis-off, guard_via_reschedule-off, guard_simplification-off, check_impossible_rules-off, occurrence_subsumption-off, observation-off, ai_observation_analysis-off, late_allocation-off, reduced_indexing-off].
option_definition(functional_dependency_analysis, on, A) :-
	A=[functional_dependency_analysis-on].
option_definition(functional_dependency_analysis, off, A) :-
	A=[functional_dependency_analysis-off].
option_definition(set_semantics_rule, on, A) :-
	A=[set_semantics_rule-on].
option_definition(set_semantics_rule, off, A) :-
	A=[set_semantics_rule-off].
option_definition(check_unnecessary_active, full, A) :-
	A=[check_unnecessary_active-full].
option_definition(check_unnecessary_active, simplification, A) :-
	A=[check_unnecessary_active-simplification].
option_definition(check_unnecessary_active, off, A) :-
	A=[check_unnecessary_active-off].
option_definition(check_guard_bindings, on, A) :-
	A=[guard_locks-on].
option_definition(check_guard_bindings, off, A) :-
	A=[guard_locks-off].
option_definition(reduced_indexing, on, A) :-
	A=[reduced_indexing-on].
option_definition(reduced_indexing, off, A) :-
	A=[reduced_indexing-off].
option_definition(storage_analysis, on, A) :-
	A=[storage_analysis-on].
option_definition(storage_analysis, off, A) :-
	A=[storage_analysis-off].
option_definition(guard_simplification, on, A) :-
	A=[guard_simplification-on].
option_definition(guard_simplification, off, A) :-
	A=[guard_simplification-off].
option_definition(check_impossible_rules, on, A) :-
	A=[check_impossible_rules-on].
option_definition(check_impossible_rules, off, A) :-
	A=[check_impossible_rules-off].
option_definition(occurrence_subsumption, on, A) :-
	A=[occurrence_subsumption-on].
option_definition(occurrence_subsumption, off, A) :-
	A=[occurrence_subsumption-off].
option_definition(late_allocation, on, A) :-
	A=[late_allocation-on].
option_definition(late_allocation, off, A) :-
	A=[late_allocation-off].
option_definition(type_definition, A, []) :-
	(   nonvar(A)
	->  A=type(B, C),
	    type_definition(B, C)
	;   true
	).
option_definition(type_declaration, A, []) :-
	(   nonvar(A)
	->  functor(A, B, C),
	    A=..[D|E],
	    constraint_type(B/C, E)
	;   true
	).
option_definition(mode, A, []) :-
	(   nonvar(A)
	->  functor(A, B, C),
	    A=..[D|E],
	    constraint_mode(B/C, E)
	;   true
	).
option_definition(store, A-B, []) :-
	store_type(A, B).
option_definition(debug, off, A) :-
	A=[debugable-off].
option_definition(debug, on, A) :-
	A=[debugable-on].
option_definition(store_counter, off, []).
option_definition(store_counter, on, [store_counter-on]).
option_definition(observation, off, A) :-
	A=[observation_analysis-off, ai_observation_analysis-off, late_allocation-off, storage_analysis-off].
option_definition(observation, on, A) :-
	A=[observation_analysis-on, ai_observation_analysis-on].
option_definition(observation, regular, A) :-
	A=[observation_analysis-on, ai_observation_analysis-off].
option_definition(observation, ai, A) :-
	A=[observation_analysis-off, ai_observation_analysis-on].
init_chr_pp_flags :-
	chr_pp_flag_definition(A, [B|C]),
	set_chr_pp_flag(A, B),
	fail.
init_chr_pp_flags.
set_chr_pp_flags([]).
set_chr_pp_flags([A-B|C]) :-
	set_chr_pp_flag(A, B),
	set_chr_pp_flags(C).
set_chr_pp_flag(A, B) :-
	atom_concat('$chr_pp_', A, C),
	nb_setval(C, B).
chr_pp_flag_definition(functional_dependency_analysis, [off, on]).
chr_pp_flag_definition(check_unnecessary_active, [off, full, simplification]).
chr_pp_flag_definition(reorder_heads, [off, on]).
chr_pp_flag_definition(set_semantics_rule, [off, on]).
chr_pp_flag_definition(guard_via_reschedule, [off, on]).
chr_pp_flag_definition(guard_locks, [on, off]).
chr_pp_flag_definition(storage_analysis, [off, on]).
chr_pp_flag_definition(debugable, [on, off]).
chr_pp_flag_definition(reduced_indexing, [off, on]).
chr_pp_flag_definition(observation_analysis, [off, on]).
chr_pp_flag_definition(ai_observation_analysis, [off, on]).
chr_pp_flag_definition(late_allocation, [off, on]).
chr_pp_flag_definition(store_counter, [off, on]).
chr_pp_flag_definition(guard_simplification, [off, on]).
chr_pp_flag_definition(check_impossible_rules, [off, on]).
chr_pp_flag_definition(occurrence_subsumption, [off, on]).
chr_pp_flag_definition(observation, [off, on]).
chr_pp_flag_definition(show, [off, on]).
chr_pp_flag(A, B) :-
	atom_concat('$chr_pp_', A, C),
	nb_getval(C, D),
	(   D==[]
	->  chr_pp_flag_definition(A, [B|E])
	;   D=B
	).
generate_attach_detach_a_constraint_all([], []).
generate_attach_detach_a_constraint_all([A|B], C) :-
	(   (   chr_pp_flag(debugable, on)
	    ;   may_trigger(A)
	    )
	->  generate_attach_a_constraint(A, D),
	    generate_detach_a_constraint(A, E)
	;   D=[],
	    E=[]
	),
	generate_attach_detach_a_constraint_all(B, F),
	append_lists([D, E, F], C).
generate_attach_a_constraint(A, [B, C]) :-
	generate_attach_a_constraint_empty_list(A, B),
	get_max_constraint_index(D),
	(   D==1
	->  generate_attach_a_constraint_1_1(A, C)
	;   generate_attach_a_constraint_t_p(A, C)
	).
generate_attach_a_constraint_skeleton(A, B, C, D) :-
	make_name(attach_, A, E),
	F=..[E|B],
	D= (F:-C).
generate_attach_a_constraint_empty_list(A, B) :-
	generate_attach_a_constraint_skeleton(A, [[], C], true, B).
generate_attach_a_constraint_1_1(A, B) :-
	C=[[D|E], F],
	generate_attach_a_constraint_skeleton(A, C, G, B),
	generate_attach_body_1(A, D, F, H),
	make_name(attach_, A, I),
	J=..[I, E, F],
	G= (H, J).
generate_attach_body_1(A, B, C, D) :-
	get_target_module(E),
	D= (get_attr(B, E, F)->G=[C|F], put_attr(B, E, G);put_attr(B, E, [C])).
generate_attach_a_constraint_t_p(A, B) :-
	C=[[D|E], F],
	generate_attach_a_constraint_skeleton(A, C, G, B),
	make_name(attach_, A, H),
	I=..[H, E, F],
	generate_attach_body_n(A, D, F, J),
	G= (J, I).
generate_attach_body_n(A/B, C, D, E) :-
	get_constraint_index(A/B, F),
	or_pattern(F, G),
	get_max_constraint_index(H),
	make_attr(H, I, J, K),
	nth(F, J, L),
	substitute(L, J, [D|L], M),
	make_attr(H, I, M, N),
	substitute(L, J, [D], O),
	make_attr(H, P, O, Q),
	copy_term(J, R),
	nth(F, R, [D]),
	delete(R, [D], S),
	set_elems(S, []),
	make_attr(H, G, R, T),
	get_target_module(U),
	E= (get_attr(C, U, V)->V=K, (I/\G=:=G->put_attr(C, U, N);P is I\/G, put_attr(C, U, Q));put_attr(C, U, T)).
generate_detach_a_constraint(A, [B, C]) :-
	generate_detach_a_constraint_empty_list(A, B),
	get_max_constraint_index(D),
	(   D==1
	->  generate_detach_a_constraint_1_1(A, C)
	;   generate_detach_a_constraint_t_p(A, C)
	).
generate_detach_a_constraint_empty_list(A, B) :-
	make_name(detach_, A, C),
	D=[[], E],
	F=..[C|D],
	B= (F:-true).
generate_detach_a_constraint_1_1(A, B) :-
	make_name(detach_, A, C),
	D=[[E|F], G],
	H=..[C|D],
	I=..[C, F, G],
	generate_detach_body_1(A, E, G, J),
	K= (J, I),
	B= (H:-K).
generate_detach_body_1(A, B, C, D) :-
	get_target_module(E),
	D= (get_attr(B, E, F)->'chr sbag_del_element'(F, C, G), (G==[]->del_attr(B, E);put_attr(B, E, G));true).
generate_detach_a_constraint_t_p(A, B) :-
	make_name(detach_, A, C),
	D=[[E|F], G],
	H=..[C|D],
	I=..[C, F, G],
	generate_detach_body_n(A, E, G, J),
	K= (J, I),
	B= (H:-K).
generate_detach_body_n(A/B, C, D, E) :-
	get_constraint_index(A/B, F),
	or_pattern(F, G),
	and_pattern(F, H),
	get_max_constraint_index(I),
	make_attr(I, J, K, L),
	nth(F, K, M),
	substitute(M, K, [], N),
	make_attr(I, O, N, P),
	substitute(M, K, Q, R),
	make_attr(I, J, R, S),
	get_target_module(T),
	E= (get_attr(C, T, U)->U=L, (J/\G=:=G->'chr sbag_del_element'(M, D, Q), (Q==[]->O is J/\H, (O==0->del_attr(C, T);put_attr(C, T, P));put_attr(C, T, S));true);true).
generate_indexed_variables_clauses(A, B) :-
	(   forsome(C, A, chr_translate:may_trigger(C))
	->  generate_indexed_variables_clauses_(A, B)
	;   B=[]
	).
generate_indexed_variables_clauses_([], []).
generate_indexed_variables_clauses_([A|B], C) :-
	(   is_stored(A)
	->  C=[D|E],
	    generate_indexed_variables_clause(A, D)
	;   C=E
	),
	generate_indexed_variables_clauses_(B, E).
create_indexed_variables_body([], [], A, B, C, empty, 0).
create_indexed_variables_body([A|B], [C|D], E, F, G, H, I) :-
	J is F+1,
	create_indexed_variables_body(B, D, K, J, G, L, M),
	(   C\== (+),
	    is_indexed_argument(G, F)
	->  (   L==empty
	    ->  H=term_variables(A, E)
	    ;   H= (term_variables(A, E, K), L)
	    ),
	    I=M
	;   E=K,
	    H=L,
	    I is M+1
	).
generate_extra_clauses(A, B) :-
	generate_activate_clause(B, C),
	generate_remove_clause(C, D),
	generate_allocate_clause(D, E),
	generate_insert_constraint_internal(E, F),
	global_indexed_variables_clause(A, F, []).
generate_remove_clause(A, B) :-
	(   is_used_auxiliary_predicate(remove_constraint_internal)
	->  A=[C|B],
	    use_auxiliary_predicate(chr_indexed_variables),
	    C= (remove_constraint_internal(D, E, F):-arg(2, D, G), G=mutable(H), 'chr update_mutable'(removed, G), (compound(H)->E=[], F=no;H==removed->E=[], F=no;F=yes, chr_indexed_variables(D, E)))
	;   A=B
	).
generate_activate_clause(A, B) :-
	(   is_used_auxiliary_predicate(activate_constraint)
	->  A=[C|B],
	    use_auxiliary_predicate(chr_indexed_variables),
	    C= (activate_constraint(D, E, F, G):-arg(2, F, H), H=mutable(I), 'chr update_mutable'(active, H), (nonvar(G)->true;arg(4, F, J), J=mutable(K), G is K+1, 'chr update_mutable'(G, J)), (compound(I)->term_variables(I, E), 'chr none_locked'(E), D=yes;I==removed->chr_indexed_variables(F, E), D=yes;E=[], D=no))
	;   A=B
	).
generate_allocate_clause(A, B) :-
	(   is_used_auxiliary_predicate(allocate_constraint)
	->  A=[C|B],
	    use_auxiliary_predicate(chr_indexed_variables),
	    C= (allocate_constraint(D, E, F, G):-E=..[suspension, H, I, D, J, K, F|G], J=mutable(0), 'chr empty_history'(L), K=mutable(L), chr_indexed_variables(E, M), I=mutable(passive(M)), 'chr gen_id'(H))
	;   A=B
	).
generate_insert_constraint_internal(A, B) :-
	(   is_used_auxiliary_predicate(insert_constraint_internal)
	->  A=[C|B],
	    use_auxiliary_predicate(chr_indexed_variables),
	    C= (insert_constraint_internal(yes, D, E, F, G, H):-E=..[suspension, I, J, F, K, L, G|H], chr_indexed_variables(E, D), 'chr none_locked'(D), J=mutable(active), K=mutable(0), L=mutable(M), 'chr empty_history'(M), 'chr gen_id'(I))
	;   A=B
	).
global_indexed_variables_clause(A, B, C) :-
	(   is_used_auxiliary_predicate(chr_indexed_variables)
	->  B=[D|C],
	    (   chr_pp_flag(reduced_indexing, on)
	    ->  (   forsome(E, A, chr_translate:may_trigger(E))
		->  F= (G=..[H, I, J, K, L, M, N|O], '$indexed_variables'(N, P))
		;   F=true,
		    P=[]
		),
		D= (chr_indexed_variables(G, P):-F)
	    ;   D= (chr_indexed_variables(G, P):-'chr chr_indexed_variables'(G, P))
	    )
	;   B=C
	).
generate_attach_increment(A) :-
	get_max_constraint_index(B),
	(   B>0
	->  A=[C, D],
	    generate_attach_increment_empty(C),
	    (   B==1
	    ->  generate_attach_increment_one(D)
	    ;   generate_attach_increment_many(B, D)
	    )
	;   A=[]
	).
generate_attach_increment_empty((attach_increment([], A):-true)).
generate_attach_increment_one(A) :-
	B=attach_increment([C|D], E),
	get_target_module(F),
	G= ('chr not_locked'(C), (get_attr(C, F, H)->sort(H, I), merge(E, I, J), put_attr(C, F, J);put_attr(C, F, E)), attach_increment(D, E)),
	A= (B:-G).
generate_attach_increment_many(A, B) :-
	make_attr(A, C, D, E),
	make_attr(A, F, G, H),
	I=attach_increment([J|K], E),
	bagof(L, M^N^O^P^ (member2(D, G, M-N), L= (sort(N, O), 'chr merge_attributes'(M, O, P))), Q),
	list2conj(Q, R),
	bagof(S, T^U^V^member((T, 'chr merge_attributes'(U, V, S)), Q), W),
	make_attr(A, X, W, Y),
	get_target_module(Z),
	A1= ('chr not_locked'(J), (get_attr(J, Z, B1)->B1=H, R, X is C\/F, put_attr(J, Z, Y);put_attr(J, Z, E)), attach_increment(K, E)),
	B= (I:-A1).
generate_attr_unify_hook(A) :-
	get_max_constraint_index(B),
	(   B==0
	->  A=[]
	;   A=[C],
	    (   B==1
	    ->  generate_attr_unify_hook_one(C)
	    ;   generate_attr_unify_hook_many(B, C)
	    )
	).
generate_attr_unify_hook_one(A) :-
	B=attr_unify_hook(C, D),
	get_target_module(E),
	make_run_suspensions(F, G),
	make_run_suspensions(C, H),
	I= (sort(C, J), (var(D)-> (get_attr(D, E, K)->true;K=[]), sort(K, L), 'chr merge_attributes'(J, L, F), put_attr(D, E, F), G; (compound(D)->term_variables(D, M), attach_increment(M, J);true), H)),
	A= (B:-I).
generate_attr_unify_hook_many(A, B) :-
	make_attr(A, C, D, E),
	make_attr(A, F, G, H),
	bagof(I, J^K^ (member(J, D), I=sort(J, K)), L),
	list2conj(L, M),
	bagof(K, J^member(sort(J, K), L), N),
	bagof(O, P^Q^R^S^ (member2(N, G, P-Q), O= (sort(Q, R), 'chr merge_attributes'(P, R, S))), T),
	bagof(S, P^R^U^member((U, 'chr merge_attributes'(P, R, S)), T), V),
	list2conj(T, W),
	make_attr(A, X, V, Y),
	make_attr(A, C, N, Z),
	A1=attr_unify_hook(E, B1),
	get_target_module(C1),
	make_run_suspensions_loop(V, D1),
	make_run_suspensions_loop(N, E1),
	F1= (M, (var(B1)-> (get_attr(B1, C1, G1)->G1=H, W, X is C\/F, put_attr(B1, C1, Y), D1;put_attr(B1, C1, Z), E1); (compound(B1)->term_variables(B1, H1), attach_increment(H1, Z);true), E1)),
	B= (A1:-F1).
make_run_suspensions(A, B) :-
	(   chr_pp_flag(debugable, on)
	->  B='chr run_suspensions_d'(A)
	;   B='chr run_suspensions'(A)
	).
make_run_suspensions_loop(A, B) :-
	(   chr_pp_flag(debugable, on)
	->  B='chr run_suspensions_loop_d'(A)
	;   B='chr run_suspensions_loop'(A)
	).
generate_insert_delete_constraints([], []).
generate_insert_delete_constraints([A|B], C) :-
	(   is_stored(A)
	->  C=[D, E|F],
	    generate_insert_delete_constraint(A, D, E)
	;   C=F
	),
	generate_insert_delete_constraints(B, F).
generate_insert_delete_constraint(A, B, C) :-
	get_store_type(A, D),
	generate_insert_constraint(D, A, B),
	generate_delete_constraint(D, A, C).
generate_insert_constraint(A, B, C) :-
	make_name('$insert_in_store_', B, D),
	E=..[D, F],
	generate_insert_constraint_body(A, B, F, G),
	(   chr_pp_flag(store_counter, on)
	->  H='$insert_counter_inc'
	;   H=true
	),
	C= (E:-H, G).
generate_insert_constraint_body(default, A, B, C) :-
	get_target_module(D),
	get_max_constraint_index(E),
	(   E==1
	->  generate_attach_body_1(A, F, B, G)
	;   generate_attach_body_n(A, F, B, G)
	),
	C= ('chr global_term_ref_1'(F), G).
generate_insert_constraint_body(multi_hash(A), B, C, D) :-
	generate_multi_hash_insert_constraint_bodies(A, B, C, D).
generate_insert_constraint_body(global_ground, A, B, C) :-
	global_ground_store_name(A, D),
	C= (nb_getval(D, E), b_setval(D, [B|E])).
generate_insert_constraint_body(global_singleton, A, B, C) :-
	global_singleton_store_name(A, D),
	C=b_setval(D, B).
generate_insert_constraint_body(multi_store(A), B, C, D) :-
	find_with_var_identity(E, [C], (member(F, A), chr_translate:generate_insert_constraint_body(F, B, C, E)), G),
	list2conj(G, D).
generate_multi_hash_insert_constraint_bodies([], A, B, true).
generate_multi_hash_insert_constraint_bodies([A|B], C, D, (E, F)) :-
	multi_hash_store_name(C, A, G),
	multi_hash_key(C, A, D, H, I),
	E= (H, nb_getval(G, J), insert_ht(J, I, D)),
	generate_multi_hash_insert_constraint_bodies(B, C, D, F).
generate_delete_constraint(A, B, C) :-
	make_name('$delete_from_store_', B, D),
	E=..[D, F],
	generate_delete_constraint_body(A, B, F, G),
	(   chr_pp_flag(store_counter, on)
	->  H='$delete_counter_inc'
	;   H=true
	),
	C= (E:-H, G).
generate_delete_constraint_body(default, A, B, C) :-
	get_target_module(D),
	get_max_constraint_index(E),
	(   E==1
	->  generate_detach_body_1(A, F, B, G),
	    C= ('chr global_term_ref_1'(F), G)
	;   generate_detach_body_n(A, F, B, G),
	    C= ('chr global_term_ref_1'(F), G)
	).
generate_delete_constraint_body(multi_hash(A), B, C, D) :-
	generate_multi_hash_delete_constraint_bodies(A, B, C, D).
generate_delete_constraint_body(global_ground, A, B, C) :-
	global_ground_store_name(A, D),
	C= (nb_getval(D, E), 'chr sbag_del_element'(E, B, F), b_setval(D, F)).
generate_delete_constraint_body(global_singleton, A, B, C) :-
	global_singleton_store_name(A, D),
	C=b_setval(D, []).
generate_delete_constraint_body(multi_store(A), B, C, D) :-
	find_with_var_identity(E, [C], (member(F, A), chr_translate:generate_delete_constraint_body(F, B, C, E)), G),
	list2conj(G, D).
generate_multi_hash_delete_constraint_bodies([], A, B, true).
generate_multi_hash_delete_constraint_bodies([A|B], C, D, (E, F)) :-
	multi_hash_store_name(C, A, G),
	multi_hash_key(C, A, D, H, I),
	E= (H, nb_getval(G, J), delete_ht(J, I, D)),
	generate_multi_hash_delete_constraint_bodies(B, C, D, F).
generate_delete_constraint_call(A, B, C) :-
	make_name('$delete_from_store_', A, D),
	C=..[D, B].
generate_insert_constraint_call(A, B, C) :-
	make_name('$insert_in_store_', A, D),
	C=..[D, B].
generate_attach_code(A, [B|C]) :-
	enumerate_stores_code(A, B),
	generate_attach_code(A, C, []).
generate_attach_code([], A, A).
generate_attach_code([A|B], C, D) :-
	get_store_type(A, E),
	generate_attach_code(E, A, C, F),
	generate_attach_code(B, F, D).
generate_attach_code(default, A, B, B).
generate_attach_code(multi_hash(A), B, C, D) :-
	multi_hash_store_initialisations(A, B, C, E),
	multi_hash_via_lookups(A, B, E, D).
generate_attach_code(global_ground, A, B, C) :-
	global_ground_store_initialisation(A, B, C).
generate_attach_code(global_singleton, A, B, C) :-
	global_singleton_store_initialisation(A, B, C).
generate_attach_code(multi_store(A), B, C, D) :-
	multi_store_generate_attach_code(A, B, C, D).
multi_store_generate_attach_code([], A, B, B).
multi_store_generate_attach_code([A|B], C, D, E) :-
	generate_attach_code(A, C, D, F),
	multi_store_generate_attach_code(B, C, F, E).
multi_hash_store_initialisations([], A, B, B).
multi_hash_store_initialisations([A|B], C, D, E) :-
	multi_hash_store_name(C, A, F),
	D=[ (:-new_ht(G), nb_setval(F, G))|H],
	multi_hash_store_initialisations(B, C, H, E).
global_ground_store_initialisation(A, B, C) :-
	global_ground_store_name(A, D),
	B=[ (:-nb_setval(D, []))|C].
global_singleton_store_initialisation(A, B, C) :-
	global_singleton_store_name(A, D),
	B=[ (:-nb_setval(D, []))|C].
multi_hash_via_lookups([], A, B, B).
multi_hash_via_lookups([A|B], C, D, E) :-
	multi_hash_via_lookup_name(C, A, F),
	G=..[F, H, I],
	multi_hash_store_name(C, A, J),
	K= (nb_getval(J, L), lookup_ht(L, H, I)),
	D=[ (G:-K)|M],
	multi_hash_via_lookups(B, C, M, E).
multi_hash_via_lookup_name(A/B, C, D) :-
	(   integer(C)
	->  E=C
	;   is_list(C)
	->  atom_concat_list(C, E)
	),
	atom_concat_list(['$via1_multi_hash_', A, /, B, (-), E], D).
multi_hash_store_name(A/B, C, D) :-
	get_target_module(E),
	(   integer(C)
	->  F=C
	;   is_list(C)
	->  atom_concat_list(C, F)
	),
	atom_concat_list(['$chr_store_multi_hash_', E, :, A, /, B, (-), F], D).
multi_hash_key(A/B, C, D, E, F) :-
	(   (   integer(C)
	    ->  G=C
	    ;   C=[G]
	    )
	->  H is G+6,
	    E=arg(H, D, F)
	;   is_list(C)
	->  sort(C, I),
	    find_with_var_identity(arg(J, D, K)-K, [D], (member(G, I), J is G+6), L),
	    pairup(M, N, L),
	    F=..[k|N],
	    list2conj(M, E)
	).
multi_hash_key_args(A, B, C) :-
	(   integer(A)
	->  arg(A, B, D),
	    C=[D]
	;   is_list(A)
	->  sort(A, E),
	    term_variables(B, F),
	    find_with_var_identity(D, F, (member(G, E), arg(G, B, D)), C)
	).
global_ground_store_name(A/B, C) :-
	get_target_module(D),
	atom_concat_list(['$chr_store_global_ground_', D, :, A, /, B], C).
global_singleton_store_name(A/B, C) :-
	get_target_module(D),
	atom_concat_list(['$chr_store_global_singleton_', D, :, A, /, B], C).
enumerate_stores_code(A, B) :-
	C='$enumerate_suspensions'(D),
	enumerate_store_bodies(A, D, E),
	list2disj(E, F),
	B= (C:-F).
enumerate_store_bodies([], A, []).
enumerate_store_bodies([A|B], C, D) :-
	(   is_stored(A)
	->  get_store_type(A, E),
	    enumerate_store_body(E, A, C, F),
	    D=[F|G]
	;   D=G
	),
	enumerate_store_bodies(B, C, G).
enumerate_store_body(default, A, B, C) :-
	get_constraint_index(A, D),
	get_target_module(E),
	get_max_constraint_index(F),
	G= ('chr global_term_ref_1'(H), get_attr(H, E, I)),
	(   F>1
	->  J is D+1,
	    K= (arg(J, I, L), 'chr sbag_member'(B, L))
	;   K='chr sbag_member'(B, I)
	),
	C= (G, K).
enumerate_store_body(multi_hash([A|B]), C, D, E) :-
	multi_hash_enumerate_store_body(A, C, D, E).
enumerate_store_body(global_ground, A, B, C) :-
	global_ground_store_name(A, D),
	C= (nb_getval(D, E), 'chr sbag_member'(B, E)).
enumerate_store_body(global_singleton, A, B, C) :-
	global_singleton_store_name(A, D),
	C= (nb_getval(D, B), B\==[]).
enumerate_store_body(multi_store(A), B, C, D) :-
	once((
	    member(E, A),
	    enumerate_store_body(E, B, C, D)
	    )).
multi_hash_enumerate_store_body(A, B, C, D) :-
	multi_hash_store_name(B, A, E),
	D= (nb_getval(E, F), value_ht(F, C)).
guard_simplification :-
	(   chr_pp_flag(guard_simplification, on)
	->  multiple_occ_constraints_checked([]),
	    simplify_guards(1)
	;   true
	).
add_type_information_(A, [], true) :- !.
add_type_information_(A, [B|C], D) :- !,
	add_type_information(A, B, E),
	D= (E, F),
	add_type_information_(A, C, F).
compute_derived_info(A, [], B, C, D, E, F, G, [], []) :- !.
compute_derived_info(A, [B|C], D, E, F, G, H, I, J, K) :- !,
	copy_term(A-F, L),
	variable_replacement(A-F, L, M),
	append(B, M, N),
	list2conj(A, O),
	negate_b(O, P),
	make_head_matchings_explicit_not_negated2(E, D, Q),
	list2conj(Q, R),
	term_variables(N, S),
	term_variables(A-F-Q, T),
	new_vars(T, S, U),
	append(N, U, V),
	negate_b(F, W),
	(   F==true
	->  X=P
	;   X= (P;R, W)
	),
	copy_with_variable_replacement(X, Y, V),
	copy_with_variable_replacement(F, Z, V),
	copy_with_variable_replacement(A, A1, V),
	list2conj(A1, B1),
	add_guard_to_head(H, Z, C1),
	add_guard_to_head(C1, B1, D1),
	compute_derived_info(A, C, D, E, F, G, H, I, E1, F1),
	append([Y], E1, J),
	append([D1], F1, K).
simplify_guard(A, B, C, D, E) :-
	conj2list(A, F),
	guard_entailment:simplify_guards(C, B, F, G, E),
	list2conj(G, D).
new_vars([], A, []).
new_vars([A|B], C, D) :-
	(   memberchk_eq(A, C)
	->  new_vars(B, C, D)
	;   D=[A-E, E-A|F],
	    new_vars(B, C, F)
	).
head_subset(A, B, C) :-
	head_subset(A, B, C, [], D).
head_subset([], A, B, C, D) :- !,
	B=C,
	D=A.
head_subset([A|B], C, D, E, F) :- !,
	head_subset(A, C, G, E, H),
	head_subset(B, H, I, G, J),
	D=I,
	F=J.
head_subset(A, [B|C], D, E, F) :- !,
	(   head_subset(A, B, G, E, H),
	    D=G,
	    F=C
	;   head_subset(A, C, I, E, J),
	    D=I,
	    F=[B|J]
	).
head_subset(A, B, C, D, E) :-
	variable_replacement(A, B, D, C),
	E=[].
make_head_matchings_explicit(A, B, C) :-
	extract_variables(A, D),
	make_matchings_explicit(D, E, [], [], F, C),
	insert_variables(E, A, B).
make_head_matchings_explicit_not_negated(A, B, C) :-
	extract_variables(A, D),
	make_matchings_explicit_not_negated(D, E, [], C),
	insert_variables(E, A, B).
make_head_matchings_explicit_not_negated2(A, B, C) :-
	extract_variables(A, D),
	extract_variables(B, E),
	make_matchings_explicit_not_negated(D, E, [], C).
extract_variables([], []).
extract_variables([A|B], C) :-
	A=..[D|E],
	extract_variables(B, F),
	append(E, F, C).
insert_variables([], [], []) :- !.
insert_variables(A, [B|C], [D|E]) :-
	B=..[F|G],
	length(G, H),
	take_first_N(A, H, I, J),
	D=..[F|I],
	insert_variables(J, C, E).
take_first_N(A, 0, [], A) :- !.
take_first_N([A|B], C, [A|D], E) :-
	F is C-1,
	take_first_N(B, F, D, E).
make_matchings_explicit([], [], A, B, B, []).
make_matchings_explicit([A|B], [C|D], E, F, G, H) :-
	(   var(A)
	->  (   memberchk_eq(A, E)
	    ->  list2disj(F, I),
		H=[ (I;C==A)|J],
		K=E
	    ;   H=J,
		C=A,
		K=[A|E]
	    ),
	    L=F
	;   functor(A, M, N),
	    A=..[M|O],
	    make_matchings_explicit(O, P, E, F, Q, R),
	    S=..[M|P],
	    (   R==[]
	    ->  H=[functor(C, M, N)|J]
	    ;   list2conj(R, T),
		list2disj(F, I),
		U= (C\=S;I;T),
		H=[functor(C, M, N), U|J]
	    ),
	    L=[C\=S|Q],
	    term_variables(O, V),
	    append(E, V, K)
	),
	make_matchings_explicit(B, D, K, L, G, J).
make_matchings_explicit_not_negated([], [], A, []).
make_matchings_explicit_not_negated([A|B], [C|D], E, F) :-
	F=[C=A|G],
	H=E,
	make_matchings_explicit_not_negated(B, D, H, G).
add_guard_to_head([], A, []).
add_guard_to_head([A|B], C, [D|E]) :-
	(   var(A)
	->  find_guard_info_for_var(A, C, D)
	;   functor(A, F, G),
	    A=..[F|H],
	    add_guard_to_head(H, C, I),
	    D=..[F|I]
	),
	add_guard_to_head(B, C, E).
find_guard_info_for_var(A, (B, C), D) :- !,
	find_guard_info_for_var(A, B, E),
	find_guard_info_for_var(E, C, D).
find_guard_info_for_var(A, B, C) :-
	(   B= (D=E),
	    A==D
	->  C=E
	;   B=functor(F, G, H),
	    A==F,
	    ground(G),
	    ground(H)
	->  length(I, H),
	    C=..[G|I]
	;   C=A
	).
replace_some_heads(A, B, C, [], A, B, D, E, []) :- !.
replace_some_heads([], [A|B], [C|D], [E|F], [], [G|H], I, J, K) :- !,
	(   C==E
	->  G=E,
	    replace_some_heads([], B, D, F, [], H, I, J, K)
	;   E=functor(L, M, N),
	    C==L
	->  length(O, N),
	    (   var(A)
	    ->  P=[],
		G=..[M|O]
	    ;   A=..[M|Q],
		use_same_args(Q, O, R, I, J, P),
		G=..[M|R]
	    ),
	    replace_some_heads([], B, D, F, [], H, I, J, S),
	    append(P, S, K)
	;   G=A,
	    replace_some_heads([], B, D, [E|F], [], H, I, J, K)
	).
replace_some_heads([A|B], C, [D|E], [F|G], [H|I], J, K, L, M) :- !,
	(   D==F
	->  H=F,
	    replace_some_heads(B, C, E, G, I, J, K, L, M)
	;   F=functor(N, O, P),
	    D==N
	->  length(Q, P),
	    (   var(A)
	    ->  R=[],
		H=..[O|Q]
	    ;   A=..[O|S],
		use_same_args(S, Q, T, K, L, R),
		H=..[O|T]
	    ),
	    replace_some_heads(B, C, E, G, I, J, K, L, U),
	    append(R, U, M)
	;   H=A,
	    replace_some_heads(B, C, E, [F|G], I, J, K, L, M)
	).
use_same_args([], [], [], A, B, []).
use_same_args([A|B], [C|D], [E|F], G, H, I) :-
	var(A), !,
	E=A,
	use_same_args(B, D, F, G, H, I).
use_same_args([A|B], [C|D], [E|F], G, H, I) :-
	nonvar(A), !,
	(   vars_occur_in(A, H)
	->  I=[C=A|J]
	;   I=J
	),
	E=C,
	use_same_args(B, D, F, G, H, J).
simplify_heads([], A, B, C, [], []).
simplify_heads([A|B], C, D, E, F, G) :-
	A= (H=I),
	(   (   nonvar(I)
	    ;   vars_occur_in(I, B-C)
	    ),
	    guard_entailment:entails_guard(C, H=I)
	->  (   vars_occur_in(I, D-B-C)
	    ->  G=J,
		F=K
	    ;   (   vars_occur_in(I, E)
		->  G=[H=I|J]
		;   G=J
		),
		F=[H|K]
	    )
	;   nonvar(I),
	    functor(I, L, M),
	    guard_entailment:entails_guard([functor(H, L, M)|C], H=I)
	->  G=J,
	    (   vars_occur_in(I, D-B-C)
	    ->  F=K
	    ;   F=[functor(H, L, M)|K]
	    )
	;   F=K,
	    G=J
	),
	simplify_heads(B, [A|C], D, E, K, J).
vars_occur_in(A, B) :-
	term_variables(A, C),
	term_variables(B, D),
	intersect_eq(C, D, E),
	E\==[].
flatten_stuff([A|B], C) :- !,
	flatten_stuff(A, D),
	flatten_stuff(B, E),
	append(D, E, C).
flatten_stuff((A;B), C) :- !,
	flatten_stuff(A, D),
	flatten_stuff(B, E),
	append(D, E, C).
flatten_stuff((A, B), C) :- !,
	flatten_stuff(A, D),
	flatten_stuff(B, E),
	append(D, E, C).
flatten_stuff(chr_pp_not_in_store(A), [A]) :- !.
flatten_stuff(A, []).
unify_stuff(A, [], []).
unify_stuff(A, [B|C], [D|E]) :-
	B\==D,
	term_variables(B, F),
	term_variables(D, G),
	intersect_eq(F, G, H),
	check_safe_unif(B, D, H),
	variable_replacement(B, D, I),
	check_replacement(I),
	term_variables(I, J),
	list_difference_eq(J, F, K),
	intersect_eq(A, K, L),
	L==[],
	B=D,
	unify_stuff(A, C, E), !.
unify_stuff(A, B, [C|D]) :-
	unify_stuff(A, B, D).
unify_stuff(A, [B|C], D) :-
	unify_stuff(A, C, D).
check_safe_unif(A, B, C) :-
	var(A), !,
	var(B),
	(   (   memberchk_eq(A, C)
	    ;   memberchk_eq(B, C)
	    )
	->  A==B
	;   true
	).
check_safe_unif([], [], A) :- !.
check_safe_unif([A|B], [C|D], E) :- !,
	check_safe_unif(A, C, E), !,
	check_safe_unif(B, D, E).
check_safe_unif(A, B, C) :-
	nonvar(A), !,
	nonvar(B),
	A=..[D|E],
	B=..[D|F],
	check_safe_unif(E, F, C).
check_safe_unif2(A, B) :-
	var(A), !.
check_safe_unif2([], []) :- !.
check_safe_unif2([A|B], [C|D]) :- !,
	check_safe_unif2(A, C), !,
	check_safe_unif2(B, D).
check_safe_unif2(A, B) :-
	nonvar(A), !,
	nonvar(B),
	A=..[C|D],
	B=..[C|E],
	check_safe_unif2(D, E).
check_replacement(A) :-
	check_replacement(A, B),
	sort(B, C),
	length(C, D), !,
	length(B, D).
check_replacement([], []).
check_replacement([A-B|C], [A|D]) :-
	check_replacement(C, D).
add_failing_occ(A, B, C, D, E, F, G, H, I) :-
	A=pragma(rule(J, K, L, M), ids(N, O), P, Q, R),
	append(O, N, S),
	missing_partner_cond(B, C, S, D, T, U, H),
	copy_term((U, B, C), (V, W, X)),
	variable_replacement((U, B, C), (V, W, X), I),
	copy_with_variable_replacement(L, Y, I),
	extract_explicit_matchings(Y, Z),
	negate_b(Z, A1),
	copy_with_variable_replacement(T, B1, I),
	(   check_safe_unif2(F, V),
	    F=V
	->  E=[ (A1;B1)]
	;   E=[chr_pp_void_info]
	).
missing_partner_cond([], [], [], A, fail, B, C).
missing_partner_cond([A|B], [C|D], [E|F], E, G, A, H) :- !,
	missing_partner_cond(B, D, F, E, G, A, H).
missing_partner_cond([A|B], [C|D], [E|F], G, H, I, J/K) :-
	H= (chr_pp_not_in_store(A);L),
	missing_partner_cond(B, D, F, G, L, I, J/K).
extract_explicit_matchings(A=B) :-
	var(A),
	var(B), !,
	A=B.
extract_explicit_matchings(A==B) :-
	var(A),
	var(B), !,
	A=B.
extract_explicit_matchings((A, B), C) :- !,
	(   extract_explicit_matchings(A)
	->  extract_explicit_matchings(B, C)
	;   C= (A, D),
	    extract_explicit_matchings(B, D)
	).
extract_explicit_matchings(A, B) :- !,
	(   extract_explicit_matchings(A)
	->  B=true
	;   B=A
	).
add_mode_info([], [], true).
add_mode_info([ (+)|A], [B|C], D) :- !,
	D= (ground(B), E),
	add_mode_info(A, C, E).
add_mode_info([A|B], [C|D], E) :-
	add_mode_info(B, D, E).
types2condition([], [], [], [], []).
types2condition([A|B], [C|D], [E|F], [G|H], I) :-
	(   get_type_definition(A, J)
	->  type2condition(J, C, E, K),
	    (   G\== (+)
	    ->  L=[\+ground(C)|K]
	    ;   L=K
	    ),
	    list2disj(L, M),
	    I=[M|N],
	    types2condition(B, D, F, H, N)
	;   builtin_type(A, C, O)
	->  I=[O|N],
	    types2condition(B, D, F, H, N)
	;   format('CHR compiler ERROR: Undefined type ~w.\n', [A]),
	    fail
	).
type2condition([], A, B, []).
type2condition([A|B], C, D, E) :-
	(   builtin_type(A, C, F)
	->  true
	;   real_type(A, C, D, F)
	),
	item2list(F, G),
	type2condition(B, C, D, H),
	append(G, H, E).
item2list([], []) :- !.
item2list([A|B], [A|B]) :- !.
item2list(A, B) :-
	B=[A].
builtin_type(A, B, true) :-
	var(A), !.
builtin_type(any, A, true).
builtin_type(int, A, integer(A)).
builtin_type(number, A, number(A)).
builtin_type(float, A, float(A)).
builtin_type(natural, A, (integer(A), A>=0)).
real_type(A, B, C, D) :-
	(   nonvar(A)
	->  functor(A, E, F),
	    (   F==0
	    ->  D= (B=E)
	    ;   A=..[G|H],
		length(I, F),
		J=..[E|I],
		(   var(C)
		->  D=functor(B, E, F)
		;   functor(C, E, F)
		->  C=..[K|L],
		    nested_types(H, I, L, M),
		    D= (functor(B, E, F), B=J, M)
		;   D=functor(B, E, F)
		)
	    )
	;   format('CHR compiler ERROR: Illegal type definition (must be nonvar).\n', []),
	    fail
	).
nested_types([], [], [], true).
nested_types([A|B], [C|D], [E|F], G) :-
	(   get_type_definition(A, H)
	->  type2condition(H, C, E, I),
	    list2disj(I, J),
	    G= (J, K),
	    nested_types(B, D, F, K)
	;   builtin_type(A, C, L)
	->  G= (L, K),
	    nested_types(B, D, F, K)
	;   format('CHR compiler ERROR: Undefined type ~w inside type definition.\n', [A]),
	    fail
	).
storage_analysis(A) :-
	(   chr_pp_flag(storage_analysis, on)
	->  check_constraint_storages(A)
	;   true
	).
check_constraint_storages([]).
check_constraint_storages([A|B]) :-
	check_constraint_storage(A),
	check_constraint_storages(B).
check_constraint_storage(A) :-
	get_max_occurrence(A, B),
	check_occurrences_storage(A, 1, B).
check_occurrences_storage(A, B, C) :-
	(   B>C
	->  stored_completing(A, 1, 0)
	;   check_occurrence_storage(A, B),
	    D is B+1,
	    check_occurrences_storage(A, D, C)
	).
check_occurrence_storage(A, B) :-
	get_occurrence(A, B, C, D),
	(   is_passive(C, D)
	->  stored(A, B, maybe)
	;   get_rule(C, E),
	    E=pragma(rule(F, G, H, I), ids(J, K), L, M, N),
	    (   select2(D, O, J, F, P, Q)
	    ->  check_storage_head1(O, B, F, G, H)
	    ;   select2(D, R, K, G, S, T)
	    ->  check_storage_head2(R, B, F, I)
	    )
	).
check_storage_head1(A, B, C, D, E) :-
	functor(A, F, G),
	H=F/G,
	(   C==[A],
	    D==[],
	    guard_entailment:entails_guard([chr_pp_headvariables(A)], E),
	    A=..[I|J],
	    no_matching(J, [])
	->  stored(H, B, no)
	;   stored(H, B, maybe)
	).
no_matching([], A).
no_matching([A|B], C) :-
	var(A),
	\+memberchk_eq(A, C),
	no_matching(B, [A|C]).
check_storage_head2(A, B, C, D) :-
	functor(A, E, F),
	G=E/F,
	(   (   C\==[],
		D==true
	    ;   \+is_self_observer(E/F)
	    ;   \+ai_is_observed(E/F, B)
	    )
	->  stored(G, B, maybe)
	;   stored(G, B, yes)
	).
constraints_code(A, B) :-
	constraints_code1(A, C, []),
	clean_clauses(C, B).
constraint_prelude(A/B, C) :-
	vars_susp(B, D, E, F),
	G=..[A|D],
	build_head(A, B, [0], F, H),
	get_target_module(I),
	J=..[A|D],
	(   chr_pp_flag(debugable, on)
	->  use_auxiliary_predicate(insert_constraint_internal),
	    generate_insert_constraint_call(A/B, E, K),
	    make_name(attach_, A/B, L),
	    M=..[L, N, E],
	    O= (arg(2, E, P), 'chr update_mutable'(inactive, P)),
	    C= (G:-insert_constraint_internal(Q, N, E, I:H, J, D), K, M, O, ('chr debug_event'(call(E)), H;'chr debug_event'(fail(E)), !, fail), ('chr debug_event'(exit(E));'chr debug_event'(redo(E)), fail))
	;   get_allocation_occurrence(A/B, 0)
	->  gen_insert_constraint_internal_goal(A/B, R, F, D, E),
	    O= (arg(2, E, P), 'chr update_mutable'(inactive, P)),
	    C= (G:-R, O, H)
	;   C= (G:-H)
	).
gen_cond_attach_clause(A/B, C, D, E) :-
	(   is_finally_stored(A/B)
	->  get_allocation_occurrence(A/B, F),
	    get_max_occurrence(A/B, G),
	    (   G<F
	    ->  (   may_trigger(A/B)
		->  gen_cond_attach_goal(A/B, H, I, J, K)
		;   gen_insert_constraint_internal_goal(A/B, H, I, J, K)
		)
	    ;   vars_susp(B, J, K, I),
		gen_uncond_attach_goal(A/B, K, H, L)
	    ),
	    (   chr_pp_flag(debugable, on)
	    ->  M=..[A|J],
		N='chr debug_event'(insert(#(M, K)))
	    ;   N=true
	    ),
	    build_head(A, B, C, I, O),
	    P= (O:-N, H),
	    D=[P|E]
	;   D=E
	).
gen_cond_attach_goal(A/B, C, D, E, F) :-
	vars_susp(B, E, F, D),
	build_head(A, B, [0], D, G),
	(   may_trigger(A/B)
	->  make_name(attach_, A/B, H),
	    I=..[H, J, F]
	;   I=true
	),
	get_target_module(K),
	L=..[A|E],
	generate_insert_constraint_call(A/B, F, M),
	use_auxiliary_predicate(insert_constraint_internal),
	use_auxiliary_predicate(activate_constraint),
	C= ((var(F)->insert_constraint_internal(N, J, F, K:G, L, E);activate_constraint(N, J, F, O)), (N==yes->M, I;true)).
gen_insert_constraint_internal_goal(A/B, C, D, E, F) :-
	vars_susp(B, E, F, D),
	(   may_trigger(A/B)
	->  make_name(attach_, A/B, G),
	    H=..[G, I, F],
	    build_head(A, B, [0], D, J),
	    get_target_module(K),
	    L=K:J
	;   H=true,
	    L=true
	),
	M=..[A|E],
	generate_insert_constraint_call(A/B, F, N),
	use_auxiliary_predicate(insert_constraint_internal),
	C= (insert_constraint_internal(O, I, F, L, M, E), N, H).
gen_uncond_attach_goal(A, B, C, D) :-
	(   may_trigger(A)
	->  make_name(attach_, A, E),
	    F=..[E, G, B]
	;   F=true
	),
	generate_insert_constraint_call(A, B, H),
	(   chr_pp_flag(late_allocation, on)
	->  use_auxiliary_predicate(activate_constraint),
	    C= (activate_constraint(I, G, B, D), (I==yes->H, F;true))
	;   use_auxiliary_predicate(activate_constraint),
	    C=activate_constraint(I, G, B, D)
	).
head1_code(A, B, C, D, E, F, G, H, I) :-
	D=pragma(J, K, L, M, N),
	J=rule(O, P, Q, R),
	(   P==[]
	->  reorder_heads(N, A, B, C, S, T),
	    simplification_code(A, S, T, D, E, F, G, H, I)
	;   simpagation_head1_code(A, B, C, D, E, G, H, I)
	).
head2_code(A, B, C, D, E, F, G, H, I) :-
	D=pragma(J, K, L, M, N),
	J=rule(O, P, Q, R),
	(   O==[]
	->  reorder_heads(N, A, B, C, S, T),
	    propagation_code(A, S, T, J, N, E, F, G, H, I)
	;   simpagation_head2_code(A, B, C, D, E, F, G, H, I)
	).
gen_alloc_inc_clause(A/B, C, D, E, F) :-
	vars_susp(B, G, H, I),
	build_head(A, B, D, I, J),
	inc_id(D, K),
	build_head(A, B, K, I, L),
	gen_occ_allocation(A/B, C, G, H, I, M),
	N= (J:-M, L),
	E=[N|F].
gen_cond_allocation(A, B, C, D, E) :-
	gen_allocation(A, B, C, D, F),
	E= (var(B)->F;true).
gen_allocation(A, B, C/D, E, F) :-
	(   may_trigger(C/D)
	->  build_head(C, D, [0], E, G),
	    get_target_module(H),
	    I=H:G
	;   I=true
	),
	J=..[C|A],
	use_auxiliary_predicate(allocate_constraint),
	F=allocate_constraint(I, B, J, A).
gen_occ_allocation(A, B, C, D, E, F) :-
	get_allocation_occurrence(A, G),
	(   B==G
	->  (   may_trigger(A)
	    ->  gen_cond_allocation(C, D, A, E, F)
	    ;   gen_allocation(C, D, A, E, F)
	    )
	;   F=true
	).
guard_via_reschedule(A, B, C, D) :-
	(   chr_pp_flag(guard_via_reschedule, on)
	->  guard_via_reschedule_main(A, B, C, D)
	;   append(A, B, E),
	    list2conj(E, D)
	).
guard_via_reschedule_main(A, B, C, D) :-
	initialize_unit_dictionary(C, E),
	build_units(A, B, E, F),
	dependency_reorder(F, G),
	units2goal(G, D).
units2goal([], true).
units2goal([unit(A, B, C, D)|E], (B, F)) :-
	units2goal(E, F).
dependency_reorder(A, B) :-
	dependency_reorder(A, [], B).
dependency_reorder([], A, B) :-
	reverse(A, B).
dependency_reorder([A|B], C, D) :-
	A=unit(E, F, G, H),
	(   G==fixed
	->  I=[A|C]
	;   dependency_insert(C, A, H, I)
	),
	dependency_reorder(B, I, D).
dependency_insert([], A, B, [A]).
dependency_insert([A|B], C, D, E) :-
	A=unit(F, G, H, I),
	(   memberchk(F, D)
	->  E=[C, A|B]
	;   E=[A|J],
	    dependency_insert(B, C, D, J)
	).
build_units(A, B, C, D) :-
	build_retrieval_units(A, 1, E, C, F, D, G),
	build_guard_units(B, E, F, G).
build_retrieval_units([], A, A, B, B, C, C).
build_retrieval_units([A|B], C, D, E, F, G, H) :-
	term_variables(A, I),
	update_unit_dictionary(I, C, E, J, [], K),
	G=[unit(C, A, movable, K)|L],
	M is C+1,
	build_retrieval_units2(B, M, D, J, F, L, H).
build_retrieval_units2([], A, A, B, B, C, C).
build_retrieval_units2([A|B], C, D, E, F, G, H) :-
	term_variables(A, I),
	update_unit_dictionary(I, C, E, J, [], K),
	G=[unit(C, A, fixed, K)|L],
	M is C+1,
	build_retrieval_units(B, M, D, J, F, L, H).
initialize_unit_dictionary(A, B) :-
	term_variables(A, C),
	pair_all_with(C, 0, B).
update_unit_dictionary([], A, B, B, C, C).
update_unit_dictionary([A|B], C, D, E, F, G) :-
	(   lookup_eq(D, A, H)
	->  (   (   H==C
		;   memberchk(H, F)
		)
	    ->  I=F
	    ;   I=[H|F]
	    ),
	    J=D
	;   J=[A-C|D],
	    I=F
	),
	update_unit_dictionary(B, C, J, E, I, G).
build_guard_units(A, B, C, D) :-
	(   A=[E]
	->  D=[unit(B, E, fixed, [])]
	;   A=[E|F]
	->  term_variables(E, G),
	    update_unit_dictionary2(G, B, C, H, [], I),
	    D=[unit(B, E, movable, I)|J],
	    K is B+1,
	    build_guard_units(F, K, H, J)
	).
update_unit_dictionary2([], A, B, B, C, C).
update_unit_dictionary2([A|B], C, D, E, F, G) :-
	(   lookup_eq(D, A, H)
	->  (   (   H==C
		;   memberchk(H, F)
		)
	    ->  I=F
	    ;   I=[H|F]
	    ),
	    J=[A-C|D]
	;   J=[A-C|D],
	    I=F
	),
	update_unit_dictionary2(B, C, J, E, I, G).
functional_dependency_analysis(A) :-
	(   chr_pp_flag(functional_dependency_analysis, on)
	->  functional_dependency_analysis_main(A)
	;   true
	).
functional_dependency_analysis_main([]).
functional_dependency_analysis_main([A|B]) :-
	(   discover_unique_pattern(A, C, D, E, F)
	->  functional_dependency(C, D, E, F)
	;   true
	),
	functional_dependency_analysis_main(B).
discover_unique_pattern(A, B/C, D, E, F) :-
	A=pragma(G, H, I, J, D),
	G=rule(K, L, M, N),
	(   K=[O],
	    L=[P]
	->  true
	;   K=[O, P],
	    L==[]
	->  true
	),
	check_unique_constraints(O, P, M, D, Q),
	term_variables(O, R),
	select_pragma_unique_variables(R, Q, S),
	hprolog:copy_term_nat(O-S, E-F),
	functor(O, B, C).
select_pragma_unique_variables([], A, []).
select_pragma_unique_variables([A|B], C, D) :-
	(   lookup_eq(C, A, E)
	->  D=F
	;   D=[A|F]
	),
	select_pragma_unique_variables(B, C, F).
set_semantics_rules(A) :-
	(   chr_pp_flag(set_semantics_rule, on)
	->  set_semantics_rules_main(A)
	;   true
	).
set_semantics_rules_main([]).
set_semantics_rules_main([A|B]) :-
	set_semantics_rule_main(A),
	set_semantics_rules_main(B).
set_semantics_rule_main(A) :-
	A=pragma(B, C, D, E, F),
	(   B=rule([G], [H], true, I),
	    C=ids([J], [K]),
	    \+is_passive(F, J),
	    functor(G, L, M),
	    get_functional_dependency(L/M, F, N, O),
	    hprolog:copy_term_nat(N-O, G-P),
	    hprolog:copy_term_nat(N-O, H-Q),
	    P==Q
	->  passive(F, K)
	;   true
	).
check_unique_constraints(A, B, C, D, E) :-
	\+any_passive_head(D),
	variable_replacement(A-B, B-A, E),
	copy_with_variable_replacement(C, F, E),
	negate_b(C, G),
	once(entails_b(G, F)).
symmetry_analysis(A) :-
	(   chr_pp_flag(check_unnecessary_active, off)
	->  true
	;   symmetry_analysis_main(A)
	).
symmetry_analysis_main([]).
symmetry_analysis_main([A|B]) :-
	A=pragma(C, ids(D, E), F, G, H),
	C=rule(I, J, K, L),
	(   (   \+chr_pp_flag(check_unnecessary_active, simplification)
	    ;   J==[]
	    ),
	    I\==[]
	->  symmetry_analysis_heads(I, D, [], [], C, H),
	    symmetry_analysis_heads(J, E, [], [], C, H)
	;   true
	),
	symmetry_analysis_main(B).
symmetry_analysis_heads([], [], A, B, C, D).
symmetry_analysis_heads([A|B], [C|D], E, F, G, H) :-
	(   \+is_passive(H, C),
	    member2(E, F, I-J),
	    \+is_passive(H, J),
	    variable_replacement(I, A, K),
	    copy_with_variable_replacement(G, L, K),
	    identical_rules(G, L)
	->  passive(H, C)
	;   true
	),
	symmetry_analysis_heads(B, D, [A|E], [C|F], G, H).
identical_rules(rule(A, B, C, D), rule(E, F, G, H)) :-
	C==G,
	identical_bodies(D, H),
	permutation(A, I),
	I==E,
	permutation(B, J),
	J==F.
identical_bodies(A, B) :-
	(   A= (C=D),
	    B= (E=F)
	->  (   C==E,
		D==F
	    ;   C==F,
		E==D
	    ), !
	;   A==B
	).
copy_with_variable_replacement(A, B, C) :-
	(   var(A)
	->  (   lookup_eq(C, A, B)
	    ->  true
	    ;   A=B
	    )
	;   functor(A, D, E),
	    functor(B, D, E),
	    A=..[F|G],
	    B=..[H|I],
	    copy_with_variable_replacement_l(G, I, C)
	).
copy_with_variable_replacement_l([], [], A).
copy_with_variable_replacement_l([A|B], [C|D], E) :-
	copy_with_variable_replacement(A, C, E),
	copy_with_variable_replacement_l(B, D, E).
variable_replacement(A, B, C) :-
	variable_replacement(A, B, [], C).
variable_replacement(A, B, C, D) :-
	(   var(A)
	->  var(B),
	    (   lookup_eq(C, A, E)
	    ->  E==B,
		D=C
	    ;   A==B
	    ->  D=C
	    ;   D=[A-B, B-A|C]
	    )
	;   A=..[F|G],
	    nonvar(B),
	    B=..[F|H],
	    variable_replacement_l(G, H, C, D)
	).
variable_replacement_l([], [], A, A).
variable_replacement_l([A|B], [C|D], E, F) :-
	variable_replacement(A, C, E, G),
	variable_replacement_l(B, D, G, F).
simplification_code(A, B, C, D, E/F, G, H, I, J) :-
	D=pragma(K, L, M, N, O),
	head_info(A, F, P, Q, R, S),
	build_head(E, F, H, R, T),
	get_constraint_mode(E/F, U),
	head_arg_matches(S, U, [], V, W),
	(   B==[]
	->  X=[],
	    Y=W,
	    Z=[]
	;   rest_heads_retrieval_and_matching(B, C, A, Z, X, W, Y)
	),
	guard_body_copies2(K, Y, A1, B1),
	guard_via_reschedule(Z, A1, T-V, C1),
	gen_uncond_susps_detachments(X, B, D1),
	gen_cond_susp_detachment(H, Q, E/F, E1),
	(   chr_pp_flag(debugable, on)
	->  K=rule(F1, G1, H1, I1),
	    my_term_copy(H1-I1, Y, J1, K1-L1),
	    M1='chr debug_event'(try([Q|N1], [], K1, L1)),
	    O1='chr debug_event'(apply([Q|N1], [], K1, L1))
	;   M1=true,
	    O1=true
	),
	(   unconditional_occurrence(E/F, G),
	    chr_pp_flag(late_allocation, on)
	->  P1=true
	;   P1=!
	),
	Q1= (T:-V, C1, M1, P1, O1, D1, E1, B1),
	I=[Q1|J].
head_arg_matches(A, B, C, D, E) :-
	head_arg_matches_(A, B, C, [], F, E),
	list2conj(F, D).
head_arg_matches_([], [], A, B, [], A).
head_arg_matches_([A-B|C], [D|E], F, G, H, I) :-
	(   var(A)
	->  (   lookup_eq(F, A, J)
	    ->  (   D= (+)
		->  (   memberchk_eq(A, G)
		    ->  H=[B=J|K],
			L=G
		    ;   H=[B==J|K],
			L=[A|G]
		    )
		;   H=[B==J|K],
		    L=G
		),
		M=F
	    ;   M=[A-B|F],
		H=K,
		(   D= (+)
		->  L=[A|G]
		;   L=G
		)
	    ),
	    N=C,
	    O=E
	;   atomic(A)
	->  (   D= (+)
	    ->  H=[B=A|K]
	    ;   H=[B==A|K]
	    ),
	    F=M,
	    L=G,
	    N=C,
	    O=E
	;   A=..[P|Q],
	    functor(A, R, S),
	    functor(T, R, S),
	    T=..[U|V],
	    (   D= (+)
	    ->  H=[B=T|K]
	    ;   H=[nonvar(B), B=T|K]
	    ),
	    pairup(Q, V, W),
	    append(W, C, N),
	    replicate(S, D, X),
	    append(X, E, O),
	    M=F,
	    L=G
	),
	head_arg_matches_(N, O, M, L, K, I).
rest_heads_retrieval_and_matching(A, B, C, D, E, F, G) :-
	rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, [], [], []).
rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, H, I, J) :-
	(   A=[K|L]
	->  rest_heads_retrieval_and_matching_n(A, B, H, I, C, D, E, F, G, J)
	;   D=[],
	    E=[],
	    F=G
	).
rest_heads_retrieval_and_matching_n([], A, B, C, D, [], [], E, E, F) :-
	instantiate_pattern_goals(F).
rest_heads_retrieval_and_matching_n([A|B], [C|D], E, F, G, [H|I], [J|K], L, M, N) :-
	functor(A, O, P),
	head_info(A, P, Q, R, S, T),
	get_store_type(O/P, U),
	(   U==default
	->  passive_head_via(A, [G|E], N, L, V, W, X),
	    get_max_constraint_index(Y),
	    (   Y==1
	    ->  Z=W
	    ;   get_constraint_index(O/P, A1),
		make_attr(Y, B1, C1, W),
		nth(A1, C1, Z)
	    ),
	    create_get_mutable(active, D1, E1),
	    get_constraint_mode(O/P, F1),
	    head_arg_matches(T, F1, L, G1, H1),
	    I1= (V, 'chr sbag_member'(J, Z), J=J1, E1)
	;   existential_lookup(U, A, [G|E], L, J1, D1, I1, J, T, K1),
	    get_constraint_mode(O/P, F1),
	    filter_mode(K1, T, F1, L1),
	    head_arg_matches(K1, L1, L, G1, H1),
	    X=N
	),
	J1=..[suspension, M1, D1, N1, O1, P1, Q1|Q],
	different_from_other_susps(A, J, E, F, R1),
	H= (I1, R1, G1),
	rest_heads_retrieval_and_matching_n(B, D, [A|E], [J|F], G, I, K, H1, M, X).
filter_mode([], A, B, []).
filter_mode([A-B|C], [D-E|F], [G|H], I) :-
	(   B==E
	->  I=[G|J],
	    filter_mode(C, F, H, J)
	;   filter_mode([A-B|C], F, H, I)
	).
instantiate_pattern_goals([]).
instantiate_pattern_goals([A-attr(B, C, D)|E]) :-
	get_max_constraint_index(F),
	(   F==1
	->  D=true
	;   make_attr(F, G, H, B),
	    or_list(C, I), !,
	    D= (G/\I=:=I)
	),
	instantiate_pattern_goals(E).
check_unique_keys([], A).
check_unique_keys([A|B], C) :-
	lookup_eq(C, A, D),
	check_unique_keys(B, C).
different_from_other_susps(A, B, C, D, E) :-
	different_from_other_susps_(C, D, A, B, F),
	list2conj(F, E).
different_from_other_susps_(A, [], B, C, []) :- !.
different_from_other_susps_([A|B], [C|D], E, F, G) :-
	(   functor(E, H, I),
	    functor(A, H, I),
	    hprolog:copy_term_nat(A-E, J-K),
	    \+ \+J=K
	->  G=[F\==C|L]
	;   G=L
	),
	different_from_other_susps_(B, D, E, F, L).
passive_head_via(A, B, C, D, E, F, G) :-
	functor(A, H, I),
	get_constraint_index(H/I, J),
	common_variables(A, B, K),
	translate(K, D, L),
	or_pattern(J, M),
	(   permutation(L, N),
	    lookup_eq(C, N, attr(F, O, P))
	->  member(M, O), !,
	    G=C,
	    E=true
	;   E= (Q, R),
	    gen_get_mod_constraints(L, Q, F),
	    G=[L-attr(F, [M|S], R)|C]
	).
common_variables(A, B, C) :-
	term_variables(A, D),
	term_variables(B, E),
	intersect_eq(D, E, C).
gen_get_mod_constraints(A, B, C) :-
	get_target_module(D),
	(   A==[]
	->  B= ('chr global_term_ref_1'(E), get_attr(E, D, F), F=C)
	;   (   A=[G]
	    ->  H='chr via_1'(G, I)
	    ;   A=[G, J]
	    ->  H='chr via_2'(G, J, I)
	    ;   H='chr via'(A, I)
	    ),
	    B= (H, get_attr(I, D, F), F=C)
	).
guard_body_copies(A, B, C, D) :-
	guard_body_copies2(A, B, E, D),
	list2conj(E, C).
guard_body_copies2(A, B, C, D) :-
	A=rule(E, F, G, H),
	conj2list(G, I),
	split_off_simple_guard(I, B, J, K),
	my_term_copy(J-K, B, L, M-N),
	append(M, [O], C),
	term_variables(K, P),
	term_variables(N, Q),
	(   chr_pp_flag(guard_locks, on),
	    bagof('chr lock'(R)- (chr_runtime:unlock(R)), S^ (lists:member(S, P), pairlist:lookup_eq(B, S, R), hprolog:memberchk_eq(R, Q)), T)
	->  once(pairup(U, V, T))
	;   U=[],
	    V=[]
	),
	list2conj(U, W),
	list2conj(V, X),
	list2conj(N, Y),
	O= (W, Y, X),
	my_term_copy(H, L, D).
split_off_simple_guard([], A, [], []).
split_off_simple_guard([A|B], C, D, E) :-
	(   simple_guard(A, C)
	->  D=[A|F],
	    split_off_simple_guard(B, C, F, E)
	;   D=[],
	    E=[A|B]
	).
simple_guard(A, B) :-
	binds_b(A, C),
	\+((
	    member(D, C),
	    lookup_eq(B, D, E)
	    )).
my_term_copy(A, B, C) :-
	my_term_copy(A, B, D, C).
my_term_copy(A, B, C, D) :-
	(   var(A)
	->  (   lookup_eq(B, A, D)
	    ->  C=B
	    ;   C=[A-D|B]
	    )
	;   functor(A, E, F),
	    functor(D, E, F),
	    A=..[G|H],
	    D=..[I|J],
	    my_term_copy_list(H, B, C, J)
	).
my_term_copy_list([], A, A, []).
my_term_copy_list([A|B], C, D, [E|F]) :-
	my_term_copy(A, C, G, E),
	my_term_copy_list(B, G, D, F).
gen_cond_susp_detachment(A, B, C, D) :-
	(   is_stored(C)
	->  (   (   A==[0]
		;   get_allocation_occurrence(C, E),
		    get_max_occurrence(C, F),
		    F<E
		),
		\+may_trigger(C),
		chr_pp_flag(late_allocation, on)
	    ->  D=true
	    ;   gen_uncond_susp_detachment(B, C, G),
		(   chr_pp_flag(late_allocation, on)
		->  D= (var(B)->true;G)
		;   D=G
		)
	    )
	;   D=true
	).
gen_uncond_susp_detachment(A, B, C) :-
	(   is_stored(B)
	->  (   may_trigger(B)
	    ->  make_name(detach_, B, D),
		E=..[D, F, A]
	    ;   E=true
	    ),
	    (   chr_pp_flag(debugable, on)
	    ->  G='chr debug_event'(remove(A))
	    ;   G=true
	    ),
	    generate_delete_constraint_call(B, A, H),
	    use_auxiliary_predicate(remove_constraint_internal),
	    C= (G, remove_constraint_internal(A, F, I), (I==yes->H, E;true))
	;   C=true
	).
gen_uncond_susps_detachments([], [], true).
gen_uncond_susps_detachments([A|B], [C|D], (E, F)) :-
	functor(C, G, H),
	gen_uncond_susp_detachment(A, G/H, E),
	gen_uncond_susps_detachments(B, D, F).
simpagation_head1_code(A, B, C, D, E/F, G, H, I) :-
	D=pragma(J, ids(K, L), M, N, O),
	J=rule(P, Q, R, S),
	head_info(A, F, T, U, V, W),
	get_constraint_mode(E/F, X),
	head_arg_matches(W, X, [], Y, Z),
	build_head(E, F, G, V, A1),
	append(B, Q, B1),
	append(C, L, C1),
	reorder_heads(D1, A, B1, C1, E1, F1),
	rest_heads_retrieval_and_matching(E1, F1, A, G1, H1, Z, I1),
	split_by_ids(F1, H1, C, J1, K1),
	guard_body_copies2(J, I1, L1, M1),
	guard_via_reschedule(G1, L1, A1-Y, N1),
	gen_uncond_susps_detachments(J1, B, O1),
	gen_cond_susp_detachment(G, U, E/F, P1),
	(   chr_pp_flag(debugable, on)
	->  my_term_copy(R-S, I1, Q1, R1-S1),
	    T1='chr debug_event'(try([U|J1], K1, R1, S1)),
	    U1='chr debug_event'(apply([U|J1], K1, R1, S1))
	;   T1=true,
	    U1=true
	),
	V1= (A1:-Y, N1, T1, !, U1, O1, P1, M1),
	H=[V1|I].
split_by_ids([], [], A, [], []).
split_by_ids([A|B], [C|D], E, F, G) :-
	(   memberchk_eq(A, E)
	->  F=[C|H],
	    G=I
	;   F=H,
	    G=[C|I]
	),
	split_by_ids(B, D, E, H, I).
simpagation_head2_code(A, B, C, D, E, F, G, H, I) :-
	D=pragma(J, ids(K, L), M, N, O),
	J=rule(P, Q, R, S),
	append(P, B, T),
	append(K, C, U),
	reorder_heads(O, A, T, U, [V|W], [X|Y]),
	simpagation_head2_prelude(A, V, [W, R, S], E, F, G, H, Z),
	extend_id(G, A1),
	(   memberchk_eq(X, L)
	->  simpagation_universal_searches(W, Y, L, [V, A], J, E, B1, C1, D1, A1, E1, Z, F1)
	;   Z=F1,
	    A1=E1,
	    B1=W,
	    C1=[V, A],
	    D1=Y
	),
	universal_search_iterator_end(C1, B1, J, E, E1, F1, G1),
	simpagation_head2_new_worker(C1, B1, D1, D, E, F, E1, G1, I).
simpagation_universal_searches([], [], A, B, C, D, [], B, [], E, E, F, F).
simpagation_universal_searches(A, [B|C], D, E, F, G, H, I, J, K, L, M, N) :-
	A=[O|P],
	inc_id(K, Q),
	universal_search_iterator_end(E, A, F, G, K, M, R),
	universal_search_iterator(A, E, F, G, K, R, S),
	(   memberchk_eq(B, D)
	->  simpagation_universal_searches(P, C, D, [O|E], F, G, H, I, J, Q, L, S, N)
	;   L=Q,
	    S=N,
	    H=P,
	    I=[O|E],
	    C=J
	).
simpagation_head2_prelude(A, B, C, D/E, F, G, H, I) :-
	head_info(A, E, J, K, L, M),
	build_head(D, E, G, L, N),
	get_constraint_mode(D/E, O),
	head_arg_matches(M, O, [], P, Q),
	lookup_passive_head(B, [A], Q, R, S),
	gen_occ_allocation(D/E, F, J, K, L, T),
	extend_id(G, U),
	extra_active_delegate_variables(A, [B|C], Q, V),
	append([S|L], V, W),
	build_head(D, E, U, W, X),
	Y= (N:-P, R, !, T, X),
	H=[Y|I].
extra_active_delegate_variables(A, B, C, D) :-
	A=..[E|F],
	delegate_variables(A, B, C, F, D).
passive_delegate_variables(A, B, C, D, E) :-
	term_variables(B, F),
	delegate_variables(A, C, D, F, E).
delegate_variables(A, B, C, D, E) :-
	term_variables(A, F),
	term_variables(B, G),
	intersect_eq(F, G, H),
	list_difference_eq(H, D, I),
	translate(I, C, E).
simpagation_head2_new_worker([A|B], C, D, E, F/G, H, I, J, K) :-
	E=pragma(L, ids(M, N), O, P, Q),
	L=rule(R, S, T, U),
	get_prop_inner_loop_vars(B, [A, C, T, U], V, W, X, Y),
	gen_var(Z),
	gen_var(A1),
	functor(A, B1, C1),
	gen_vars(C1, D1),
	head_info(A, C1, D1, Z, E1, F1),
	get_constraint_mode(B1/C1, G1),
	head_arg_matches(F1, G1, W, H1, I1),
	J1=..[suspension, K1, L1, M1, N1, O1, P1|D1],
	different_from_other_susps(A, Z, B, Y, Q1),
	create_get_mutable(active, L1, R1),
	S1= (Z=J1, R1, Q1, H1),
	T1=[[Z|A1]|V],
	build_head(F, G, I, T1, U1),
	(   C\==[]
	->  rest_heads_retrieval_and_matching(C, D, [A|B], V1, W1, I1, X1, [A|B], [Z|Y], []),
	    split_by_ids(D, W1, M, Y1, Z1),
	    split_by_ids(D, C, M, A2, B2)
	;   V1=[],
	    Y1=[],
	    Z1=[],
	    I1=X1,
	    A2=[]
	),
	gen_uncond_susps_detachments([Z|Y1], [A|A2], C2),
	D2=[A1|V],
	build_head(F, G, I, D2, E2),
	F2=[[]|V],
	build_head(F, G, I, F2, G2),
	guard_body_copies2(L, X1, H2, I2),
	guard_via_reschedule(V1, H2, v(U1, S1), J2),
	(   I2\==true,
	    is_self_observer(F/G),
	    ai_is_observed(F/G, H)
	->  gen_uncond_attach_goal(F/G, X, K2, L2),
	    gen_state_cond_call(X, G, E2, L2, M2),
	    gen_state_cond_call(X, G, G2, L2, N2)
	;   K2=true,
	    M2=E2,
	    N2=G2
	),
	(   chr_pp_flag(debugable, on)
	->  my_term_copy(T-U, W, O2, P2-Q2),
	    R2='chr debug_event'(try([Z|Y1], [X|Z1], P2, Q2)),
	    S2='chr debug_event'(apply([Z|Y1], [X|Z1], P2, Q2))
	;   R2=true,
	    S2=true
	),
	(   member(unique(T2, U2), O),
	    check_unique_keys(U2, W)
	->  V2= (U1:-S1-> (J2, R2->S2, C2, K2, I2, N2;G2);E2)
	;   V2= (U1:-S1, J2, R2->S2, C2, K2, I2, M2;E2)
	),
	J=[V2|K].
gen_state_cond_call(A, B, C, D, E) :-
	length(F, B),
	G=..[suspension, H, I, J, K, L, M|F],
	create_get_mutable(active, I, N),
	create_get_mutable(D, K, O),
	E= (A=G, N, O->'chr update_mutable'(inactive, I), C;true).
propagation_code(A, B, C, D, E, F, G, H, I, J) :-
	(   B==[]
	->  propagation_single_headed(A, D, E, F, G, H, I, J)
	;   propagation_multi_headed(A, B, C, D, E, F, G, H, I, J)
	).
propagation_single_headed(A, B, C, D/E, F, G, H, I) :-
	head_info(A, E, J, K, L, M),
	build_head(D, E, G, L, N),
	inc_id(G, O),
	build_head(D, E, O, L, P),
	Q=P,
	get_constraint_mode(D/E, R),
	head_arg_matches(M, R, [], S, T),
	guard_body_copies(B, T, U, V),
	gen_occ_allocation(D/E, F, J, K, L, W),
	(   V\==true,
	    is_self_observer(D/E),
	    ai_is_observed(D/E, F)
	->  gen_uncond_attach_goal(D/E, K, X, Y),
	    gen_state_cond_call(K, E, Q, Y, Z)
	;   X=true,
	    Z=Q
	),
	(   unconditional_occurrence(D/E, F),
	    chr_pp_flag(late_allocation, on)
	->  A1=true
	;   A1=!
	),
	(   chr_pp_flag(debugable, on)
	->  B=rule(B1, C1, D1, E1),
	    my_term_copy(D1-E1, T, F1, G1-H1),
	    I1='chr debug_event'(try([], [K], G1, H1)),
	    J1='chr debug_event'(apply([], [K], G1, H1))
	;   I1=true,
	    J1=true
	),
	(   may_trigger(D/E)
	->  K1='chr novel_production'(K, C),
	    L1='chr extend_history'(K, C)
	;   K1=true,
	    L1=true
	),
	M1= (N:-S, W, K1, U, I1, A1, J1, L1, X, V, Z),
	H=[M1|I].
propagation_multi_headed(A, B, C, D, E, F, G, H, I, J) :-
	B=[K|L],
	propagation_prelude(A, B, D, F, G, H, I, M),
	extend_id(H, N),
	propagation_nested_code(L, [K, A], C, D, E, F, G, N, M, J).
propagation_prelude(A, [B|C], D, E/F, G, H, I, J) :-
	head_info(A, F, K, L, M, N),
	build_head(E, F, H, M, O),
	get_constraint_mode(E/F, P),
	head_arg_matches(N, P, [], Q, R),
	D=rule(S, T, U, V),
	extra_active_delegate_variables(A, [B, C, U, V], R, W),
	lookup_passive_head(B, [A], R, X, Y),
	gen_occ_allocation(E/F, G, K, L, M, Z),
	extend_id(H, A1),
	append([Y|M], W, B1),
	build_head(E, F, A1, B1, C1),
	D1=C1,
	E1= (O:-Q, X, !, Z, D1),
	I=[E1|J].
propagation_nested_code([], [A|B], C, D, E, F, G, H, I, J) :-
	universal_search_iterator_end([A|B], [], D, F, H, I, K),
	propagation_body(A, B, C, D, E, F, G, H, K, J).
propagation_nested_code([A|B], C, D, E, F, G, H, I, J, K) :-
	universal_search_iterator_end(C, [A|B], E, G, I, J, L),
	universal_search_iterator([A|B], C, E, G, I, L, M),
	inc_id(I, N),
	propagation_nested_code(B, [A|C], D, E, F, G, H, N, M, K).
propagation_body(A, B, C, D, E, F/G, H, I, J, K) :-
	D=rule(L, M, N, O),
	get_prop_inner_loop_vars(B, [A, N, O], P, Q, R, S),
	gen_var(T),
	gen_var(U),
	functor(A, V, W),
	gen_vars(W, X),
	Y=..[suspension, Z, A1, B1, C1, D1, E1|X],
	create_get_mutable(active, A1, F1),
	G1= (T=Y, F1),
	H1=[[T|U]|P],
	build_head(F, G, I, H1, I1),
	J1=[U|P],
	build_head(F, G, I, J1, K1),
	L1=K1,
	A=..[M1|N1],
	pairup(N1, X, O1),
	get_constraint_mode(V/W, P1),
	head_arg_matches(O1, P1, Q, Q1, R1),
	different_from_other_susps(A, T, B, S, S1),
	guard_body_copies(D, R1, T1, U1),
	(   U1\==true,
	    is_self_observer(F/G),
	    ai_is_observed(F/G, H)
	->  gen_uncond_attach_goal(F/G, R, V1, W1),
	    gen_state_cond_call(R, G, L1, W1, X1)
	;   V1=true,
	    X1=L1
	),
	(   is_least_occurrence(E)
	->  Y1=true,
	    Z1=true
	;   get_occurrence(F/G, H, A2, B2),
	    history_susps(C, [T|S], R, B2, C2),
	    D2=..[t, E|C2],
	    bagof('chr novel_production'(E2, F2), (lists:member(E2, C2), F2=G2), H2),
	    list2conj(H2, I2),
	    Y1= (G2=D2, I2),
	    Z1='chr extend_history'(R, G2)
	),
	(   chr_pp_flag(debugable, on)
	->  D=rule(J2, K2, N, O),
	    my_term_copy(N-O, R1, L2, M2-N2),
	    O2='chr debug_event'(try([], [R, T|S], M2, N2)),
	    P2='chr debug_event'(apply([], [R, T|S], M2, N2))
	;   O2=true,
	    P2=true
	),
	Q2= (I1:-G1, S1, Q1, Y1, T1, O2->P2, Z1, V1, U1, X1;L1),
	J=[Q2|K].
history_susps(A, B, C, D, E) :-
	reverse(B, F),
	pairup([D|A], [C|F], G),
	sort(G, H),
	pairup(I, E, H).
get_prop_inner_loop_vars([A], B, C, D, E, []) :- !,
	functor(A, F, G),
	head_info(A, G, H, E, I, J),
	get_constraint_mode(F/G, K),
	head_arg_matches(J, K, [], L, D),
	extra_active_delegate_variables(A, B, D, M),
	append(I, M, C).
get_prop_inner_loop_vars([A|B], C, D, E, F, [G|H]) :-
	get_prop_inner_loop_vars(B, [A|C], I, J, F, H),
	functor(A, K, L),
	gen_var(M),
	head_info(A, L, N, G, O, P),
	get_constraint_mode(K/L, Q),
	head_arg_matches(P, Q, J, R, E),
	passive_delegate_variables(A, B, C, E, S),
	append(S, [G, M|I], D).
gen_var_susp_list_for([A], B, C, D, E, F) :- !,
	functor(A, G, H),
	head_info(A, H, I, F, E, J),
	get_constraint_mode(G/H, K),
	head_arg_matches(J, K, [], L, C),
	extra_active_delegate_variables(A, B, C, M),
	append(E, M, D).
gen_var_susp_list_for([A|B], C, D, E, F, G) :-
	gen_var_susp_list_for(B, [A|C], H, F, I, J),
	functor(A, K, L),
	gen_var(G),
	head_info(A, L, M, N, O, P),
	get_constraint_mode(K/L, Q),
	head_arg_matches(P, Q, H, R, D),
	passive_delegate_variables(A, B, C, D, S),
	append(S, [N, G|F], E).
pre_vars_and_susps([A], B, C, D, []) :- !,
	functor(A, E, F),
	head_info(A, F, G, H, I, J),
	get_constraint_mode(E/F, K),
	head_arg_matches(J, K, [], L, D),
	extra_active_delegate_variables(A, B, D, M),
	append(I, M, C).
pre_vars_and_susps([A|B], C, D, E, [F|G]) :-
	pre_vars_and_susps(B, [A|C], H, I, G),
	functor(A, J, K),
	gen_var(L),
	head_info(A, K, M, F, N, O),
	get_constraint_mode(J/K, P),
	head_arg_matches(O, P, I, Q, E),
	passive_delegate_variables(A, B, C, E, R),
	append(R, [F, L|H], D).
reorder_heads(A, B, C, D, E, F) :-
	(   chr_pp_flag(reorder_heads, on)
	->  reorder_heads_main(A, B, C, D, E, F)
	;   E=C,
	    F=D
	).
reorder_heads_main(A, B, C, D, E, F) :-
	term_variables(B, G),
	H=entry([], [], G, C, D, A),
	hprolog:copy_term_nat(H, I),
	a_star(I, J^ (chr_translate:final_data(J)), K^L^M^ (chr_translate:expand_data(K, L, M)), N),
	I=H,
	N=entry(O, P, Q, R, S, T),
	reverse(O, E),
	reverse(P, F).
final_data(A) :-
	A=entry(B, C, D, E, [], F).
expand_data(A, B, C) :-
	A=entry(D, E, F, G, H, I),
	term_variables(A, J),
	B=entry([K|D], [L|E], M, N, O, I),
	select2(K, L, G, H, N, O),
	order_score(K, L, F, N, I, C),
	term_variables([K|F], M).
order_score(A, B, C, D, E, F) :-
	functor(A, G, H),
	get_store_type(G/H, I),
	order_score(I, A, B, C, D, E, F).
order_score(default, A, B, C, D, E, F) :-
	term_variables(A, G),
	term_variables(D, H),
	order_score_vars(G, C, D, 0, F).
order_score(multi_hash(A), B, C, D, E, F, G) :-
	order_score_indexes(A, B, D, 0, G).
order_score(global_ground, A, B, C, D, E, F) :-
	functor(A, G, H),
	(   I==[]
	->  F=10
	;   H==0
	->  F=1000
	;   H>0
	->  F=10000
	).
order_score(global_singleton, A, B, C, D, E, F) :-
	F=1.
order_score(multi_store(A), B, C, D, E, F, G) :-
	find_with_var_identity(H, t(B, D, E), (lists:member(I, A), chr_translate:order_score(I, B, C, D, E, F, H)), J),
	min_list(J, G).
order_score_indexes([], A, B, C, C) :-
	C>0.
order_score_indexes([A|B], C, D, E, F) :-
	multi_hash_key_args(A, C, G),
	(   forall(H, G, hprolog:memberchk_eq(H, D))
	->  I is E+10
	;   I=E
	),
	order_score_indexes(B, C, D, I, F).
order_score_vars([], A, B, C, D) :-
	(   C==0
	->  D=0
	;   D=C
	).
order_score_vars([A|B], C, D, E, F) :-
	(   memberchk_eq(A, C)
	->  G is E+10
	;   memberchk_eq(A, D)
	->  G is E+100
	;   G=E
	),
	order_score_vars(B, C, D, G, F).
create_get_mutable(A, B, C) :-
	C= (B=mutable(A)).
gen_var(A).
gen_vars(A, B) :-
	length(B, A).
head_info(A, B, C, D, E, F) :-
	vars_susp(B, C, D, E),
	A=..[G|H],
	pairup(H, C, F).
inc_id([A|B], [C|B]) :-
	C is A+1.
dec_id([A|B], [C|B]) :-
	C is A-1.
extend_id(A, [0|A]).
next_id([A, B|C], [D|C]) :-
	D is B+1.
build_head(A, B, C, D, E) :-
	buildName(A, B, C, F),
	(   (   chr_pp_flag(debugable, on)
	    ;   is_stored(A/B),
		has_active_occurrence(A/B),
		(   may_trigger(A/B)
		;   get_allocation_occurrence(A/B, G),
		    get_max_occurrence(A/B, H),
		    H>=G
		)
	    )
	->  E=..[F|D]
	;   init(D, I),
	    E=..[F|I]
	).
init([], []).
init([A], []) :- !.
init([A|B], [A|C]) :-
	init(B, C).
buildName(A, B, C, D) :-
	(   (   chr_pp_flag(debugable, on)
	    ;   once((
		    (   is_stored(A/B),
			(   has_active_occurrence(A/B)
			;   chr_pp_flag(late_allocation, off)
			),
			(   may_trigger(A/B)
			;   get_allocation_occurrence(A/B, E),
			    get_max_occurrence(A/B, F),
			    F>=E
			)
		    ;   C\=[0]
		    )
		    ))
	    )
	->  atom_concat(A, /, G),
	    atom_concat(G, B, H),
	    buildName_(C, H, D)
	;   D=A
	).
buildName_([], A, A).
buildName_([A|B], C, D) :-
	buildName_(B, C, E),
	atom_concat(E, '__', F),
	atom_concat(F, A, D).
vars_susp(A, B, C, D) :-
	length(B, A),
	append(B, [C], D).
make_attr(A, B, C, D) :-
	length(C, A),
	D=..[v, B|C].
or_pattern(A, B) :-
	C is A-1,
	B is 1<<C.
and_pattern(A, B) :-
	C is A-1,
	D is 1<<C,
	B is-1* (D+1).
conj2list(A, B) :-
	conj2list(A, B, []).
conj2list(A, B, C) :-
	A= (true, D), !,
	conj2list(D, B, C).
conj2list(A, B, C) :-
	A= (D, E), !,
	conj2list(D, B, F),
	conj2list(E, F, C).
conj2list(A, [A|B], B).
disj2list(A, B) :-
	disj2list(A, B, []).
disj2list(A, B, C) :-
	A= (fail;D), !,
	disj2list(D, B, C).
disj2list(A, B, C) :-
	A= (D;E), !,
	disj2list(D, B, F),
	disj2list(E, F, C).
disj2list(A, [A|B], B).
list2conj([], true).
list2conj([A], B) :- !,
	B=A.
list2conj([A|B], C) :-
	(   A==true
	->  list2conj(B, C)
	;   C= (A, D),
	    list2conj(B, D)
	).
list2disj([], fail).
list2disj([A], B) :- !,
	B=A.
list2disj([A|B], C) :-
	(   A==fail
	->  list2disj(B, C)
	;   C= (A;D),
	    list2disj(B, D)
	).
atom_concat_list([A], A) :- !.
atom_concat_list([A|B], C) :-
	atom_concat_list(B, D),
	atom_concat(A, D, C).
make_name(A, B/C, D) :-
	atom_concat_list([A, B, /, C], D).
set_elems([], A).
set_elems([A|B], A) :-
	set_elems(B, A).
member2([A|B], [C|D], A-C).
member2([A|B], [C|D], E) :-
	member2(B, D, E).
select2(A, B, [A|C], [B|D], C, D).
select2(A, B, [C|D], [E|F], [C|G], [E|H]) :-
	select2(A, B, D, F, G, H).
pair_all_with([], A, []).
pair_all_with([A|B], C, [A-C|D]) :-
	pair_all_with(B, C, D).
replicate(A, B, C) :-
	(   A=<0
	->  C=[]
	;   C=[B|D],
	    E is A-1,
	    replicate(E, B, D)
	).
lookup_passive_head(A, B, C, D, E) :-
	functor(A, F, G),
	get_store_type(F/G, H),
	lookup_passive_head(H, A, B, C, D, E).
lookup_passive_head(default, A, B, C, D, E) :-
	passive_head_via(A, B, [], C, D, F, G),
	instantiate_pattern_goals(G),
	get_max_constraint_index(H),
	(   H==1
	->  E=F
	;   functor(A, I, J),
	    get_constraint_index(I/J, K),
	    make_attr(H, L, M, F),
	    nth(K, M, E)
	).
lookup_passive_head(multi_hash(A), B, C, D, E, F) :-
	once((
	    member(G, A),
	    multi_hash_key_args(G, B, H),
	    translate(H, D, I)
	    )),
	(   I=[J]
	->  true
	;   J=..[k|I]
	),
	functor(B, K, L),
	multi_hash_via_lookup_name(K/L, G, M),
	E=..[M, J, F],
	update_store_type(K/L, multi_hash([G])).
lookup_passive_head(global_ground, A, B, C, D, E) :-
	functor(A, F, G),
	global_ground_store_name(F/G, H),
	D=nb_getval(H, E),
	update_store_type(F/G, global_ground).
lookup_passive_head(global_singleton, A, B, C, D, E) :-
	functor(A, F, G),
	global_singleton_store_name(F/G, H),
	D= (nb_getval(H, I), I\==[], E=[I]),
	update_store_type(F/G, global_singleton).
lookup_passive_head(multi_store(A), B, C, D, E, F) :-
	once((
	    member(G, A),
	    lookup_passive_head(G, B, C, D, E, F)
	    )).
existential_lookup(global_singleton, A, B, C, D, E, F, G, H, H) :- !,
	functor(A, I, J),
	global_singleton_store_name(I/J, K),
	F= (nb_getval(K, G), G\==[], G=D),
	update_store_type(I/J, global_singleton).
existential_lookup(multi_store(A), B, C, D, E, F, G, H, I, J) :- !,
	once((
	    member(K, A),
	    existential_lookup(K, B, C, D, E, F, G, H, I, J)
	    )).
existential_lookup(multi_hash(A), B, C, D, E, F, G, H, I, J) :- !,
	once((
	    member(K, A),
	    multi_hash_key_args(K, B, L),
	    translate(L, D, M)
	    )),
	(   M=[N]
	->  true
	;   N=..[k|M]
	),
	functor(B, O, P),
	multi_hash_via_lookup_name(O/P, K, Q),
	R=..[Q, N, S],
	create_get_mutable(active, F, T),
	G= (R, 'chr sbag_member'(H, S), H=E, T),
	hash_index_filter(I, K, J),
	update_store_type(O/P, multi_hash([K])).
existential_lookup(A, B, C, D, E, F, G, H, I, I) :-
	lookup_passive_head(A, B, C, D, J, K),
	create_get_mutable(active, F, L),
	G= (J, 'chr sbag_member'(H, K), H=E, L).
hash_index_filter(A, B, C) :-
	(   integer(B)
	->  D=[B]
	;   D=B
	),
	hash_index_filter(A, D, 1, C).
hash_index_filter([], A, B, []).
hash_index_filter([A|B], C, D, E) :-
	(   C=[F|G]
	->  H is D+1,
	    (   F>D
	    ->  E=[A|I],
		hash_index_filter(B, [F|G], H, I)
	    ;   F==D
	    ->  E=I,
		hash_index_filter(B, G, H, I)
	    )
	;   E=[A|B]
	).
assume_constraint_stores([]).
assume_constraint_stores([A|B]) :-
	(   \+may_trigger(A),
	    is_stored(A),
	    get_store_type(A, default)
	->  get_indexed_arguments(A, C),
	    findall(D, (sublist(D, C), D\==[]), E),
	    (   get_functional_dependency(A, 1, F, G),
		all_distinct_var_args(F),
		G==[]
	    ->  assumed_store_type(A, global_singleton)
	    ;   assumed_store_type(A, multi_store([multi_hash(E), global_ground]))
	    )
	;   true
	),
	assume_constraint_stores(B).
all_distinct_var_args(A) :-
	A=..[B|C],
	hprolog:copy_term_nat(C, D),
	all_distinct_var_args_(D).
all_distinct_var_args_([]).
all_distinct_var_args_([A|B]) :-
	var(A),
	A=t,
	all_distinct_var_args_(B).
get_indexed_arguments(A, B) :-
	A=C/D,
	get_indexed_arguments(1, D, A, B).
get_indexed_arguments(A, B, C, D) :-
	(   A>B
	->  D=[]
	;   (   is_indexed_argument(C, A)
	    ->  D=[A|E]
	    ;   D=E
	    ),
	    F is A+1,
	    get_indexed_arguments(F, B, C, E)
	).
validate_store_type_assumptions([]).
validate_store_type_assumptions([A|B]) :-
	validate_store_type_assumption(A),
	validate_store_type_assumptions(B).
universal_search_iterator_end([A|B], C, D, E/F, G, H, I) :-
	D=rule(J, K, L, M),
	gen_var_susp_list_for(B, [A, C, L, M], N, O, P, Q),
	R=[[]|O],
	build_head(E, F, G, R, S),
	(   G=[0|T]
	->  next_id(G, U),
	    V=P
	;   dec_id(G, U),
	    V=[Q|P]
	),
	build_head(E, F, U, V, W),
	X= (S:-W),
	H=[X|I].
universal_search_iterator([A|B], [C|D], E, F/G, H, I, J) :-
	E=rule(K, L, M, N),
	pre_vars_and_susps(D, [C, A, B, M, N], O, P, Q),
	gen_var(R),
	functor(C, S, T),
	gen_vars(T, U),
	head_info(C, T, U, V, W, X),
	get_constraint_mode(S/T, Y),
	head_arg_matches(X, Y, P, Z, A1),
	B1=..[suspension, C1, D1, E1, F1, G1, H1|U],
	different_from_other_susps(C, V, D, Q, I1),
	create_get_mutable(active, D1, J1),
	K1= (V=B1, J1, I1, Z),
	lookup_passive_head(A, [C|D], A1, L1, M1),
	inc_id(H, N1),
	O1=[[V|R]|O],
	build_head(F, G, H, O1, P1),
	passive_delegate_variables(C, D, [A, B, M, N], A1, Q1),
	append([M1|Q1], [V, R|O], R1),
	build_head(F, G, N1, R1, S1),
	T1=[R|O],
	build_head(F, G, H, T1, U1),
	V1= (P1:-K1, L1->S1;U1),
	I=[V1|J].
ai_observation_analysis(A) :-
	(   chr_pp_flag(ai_observation_analysis, on)
	->  list_to_ord_set(A, B),
	    abstract_constraints(A),
	    ai_observation_schedule_initial_calls(A)
	;   true
	).
ai_observation_schedule_initial_calls([]).
ai_observation_schedule_initial_calls([A|B]) :-
	ai_observation_schedule_initial_call(A),
	ai_observation_schedule_initial_calls(B).
ai_observation_schedule_initial_call(A) :-
	ai_observation_top(A, B),
	initial_call_pattern(B).
ai_observation_schedule_new_calls([], A).
ai_observation_schedule_new_calls([A|B], C) :-
	C=odom(D, E),
	initial_call_pattern(odom(A, E)),
	ai_observation_schedule_new_calls(B, C).
ai_observation_lub(odom(A, B), odom(A, C), odom(A, D)) :-
	ord_intersect(B, C, D).
ai_observation_top(A, odom(A, B)) :-
	ord_empty(B).
ai_observation_leq(odom(A, B), odom(A, C)) :-
	ord_subset(C, B).
ai_observation_observe(odom(A, B), C, odom(A, D)) :-
	ord_delete(B, C, D).
ai_observation_observe_list(odom(A, B), C, odom(A, D)) :-
	list_to_ord_set(C, E),
	ord_difference(B, E, D).
ai_observation_abstract_constraint(A, B, C) :-
	functor(A, D, E),
	C=D/E,
	member(C, B).
ai_observation_abstract_constraints(A, B, C) :-
	findall(D, (member(E, A), ai_observation_abstract_constraint(E, B, D)), C).
ai_observation_abstract_goal(A, B, C) :-
	ai_observation_abstract_goal(A, B, C, []).
ai_observation_abstract_goal((A, B), C, D, E) :- !,
	ai_observation_abstract_goal(A, C, D, F),
	ai_observation_abstract_goal(B, C, F, E).
ai_observation_abstract_goal((A;B), C, D, E) :- !,
	ai_observation_abstract_goal(A, C, D, F),
	ai_observation_abstract_goal(B, C, F, E).
ai_observation_abstract_goal((A->B), C, D, E) :- !,
	ai_observation_abstract_goal(A, C, D, F),
	ai_observation_abstract_goal(B, C, F, E).
ai_observation_abstract_goal(A, B, [C|D], D) :-
	ai_observation_abstract_constraint(A, B, C), !.
ai_observation_abstract_goal(true, A, B, B) :- !.
ai_observation_abstract_goal(writeln(A), B, C, C) :- !.
ai_observation_abstract_goal(A, B, [C|D], D) :-
	C=builtin.
ai_observation_is_observed(odom(A, B), C) :-
	\+ord_memberchk(C, B).
unconditional_occurrence(A, B) :-
	get_occurrence(A, B, C, D),
	get_rule(C, E),
	E=pragma(F, G, H, I, J),
	hprolog:copy_term_nat(F, K),
	K=rule(L, M, N, O),
	guard_entailment:entails_guard([chr_pp_headvariables(L, M)], N),
	once((
	    (   L=[P],
		M==[]
	    ;   M=[P],
		L==[],
		\+may_trigger(A)
	    )
	    )),
	functor(P, Q, R),
	P=..[S|T],
	unconditional_occurrence_args(T).
unconditional_occurrence_args([]).
unconditional_occurrence_args([A|B]) :-
	var(A),
	A=x,
	unconditional_occurrence_args(B).
is_variant(A, B) :-
	hprolog:copy_term_nat(A, C),
	hprolog:copy_term_nat(B, D),
	term_variables(C, E),
	term_variables(D, F),
	C=D,
	is_variant1(E),
	is_variant2(F).
is_variant1([]).
is_variant1([A|B]) :-
	var(A),
	A='$test',
	is_variant1(B).
is_variant2([]).
is_variant2([A|B]) :-
	A=='$test',
	is_variant2(B).
generate_show_constraint(A, B, C, D) :-
	(   chr_pp_flag(show, on)
	->  B=['$show'/0|A],
	    generate_show_rules(A, D, [E|C]),
	    inc_rule_count(F),
	    E=pragma(rule(['$show'], [], true, true), ids([0], []), [], no, F)
	;   B=A,
	    D=C
	).
generate_show_rules([], A, A).
generate_show_rules([A/B|C], [D|E], F) :-
	functor(G, A, B),
	inc_rule_count(H),
	D=pragma(rule([], ['$show', G], true, writeln(G)), ids([], [0, 1]), [passive(1)], no, H),
	generate_show_rules(C, E, F).
time(A, B) :-
	statistics(runtime, [C|D]),
	call(B),
	statistics(runtime, [E|F]),
	G is E-C,
	format('    ~w:\t\t~w ms\n', [A, G]).
'attach_type_definition/2'([], A).
'attach_type_definition/2'([A|B], C) :-
	(   get_attr(A, chr_translate, D)
	->  E=[C|D],
	    put_attr(A, chr_translate, E)
	;   put_attr(A, chr_translate, [C])
	),
	'attach_type_definition/2'(B, C).
'detach_type_definition/2'([], A).
'detach_type_definition/2'([A|B], C) :-
	(   get_attr(A, chr_translate, D)
	->  'chr sbag_del_element'(D, C, E),
	    (   E==[]
	    ->  del_attr(A, chr_translate)
	    ;   put_attr(A, chr_translate, E)
	    )
	;   true
	),
	'detach_type_definition/2'(B, C).
'$indexed_variables'(A, B) :-
	A=target_module(C),
	B=[].
'$indexed_variables'(A, B) :-
	A=indexed_argument(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=constraint_mode(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=store_type(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=actual_store_types(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=assumed_store_type(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=rule_count(C),
	B=[].
'$indexed_variables'(A, B) :-
	A=passive(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=occurrence(C, D, E, F),
	B=[].
'$indexed_variables'(A, B) :-
	A=max_occurrence(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=allocation_occurrence(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=rule(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=least_occurrence(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=constraint_index(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=max_constraint_index(C),
	B=[].
'$indexed_variables'(A, B) :-
	A=observes(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=spawns_observer(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=observes_indirectly(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=prev_guard_list(C, D, E, F, G, H, I),
	B=[].
'$indexed_variables'(A, B) :-
	A=set_all_passive(C),
	B=[].
'$indexed_variables'(A, B) :-
	A=multiple_occ_constraints_checked(C),
	B=[].
'$indexed_variables'(A, B) :-
	A=type_definition(C, D),
	term_variables(C, B).
'$indexed_variables'(A, B) :-
	A=constraint_type(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=add_type_information(C, D, E),
	B=[].
'$indexed_variables'(A, B) :-
	A=stored(C, D, E),
	B=[].
'$indexed_variables'(A, B) :-
	A=stored_complete(C, D, E),
	B=[].
'$indexed_variables'(A, B) :-
	A=check_all_passive(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=constraints_code1(C, D, E),
	B=[].
'$indexed_variables'(A, B) :-
	A=use_auxiliary_predicate(C),
	B=[].
'$indexed_variables'(A, B) :-
	A=functional_dependency(C, D, E, F),
	B=[].
'$indexed_variables'(A, B) :-
	A=initial_call_pattern(C),
	B=[].
'$indexed_variables'(A, B) :-
	A=call_pattern(C),
	B=[].
'$indexed_variables'(A, B) :-
	A=final_answer_pattern(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=abstract_constraints(C),
	B=[].
'$indexed_variables'(A, B) :-
	A=depends_on(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=depends_on_ap(C, D, E, F),
	B=[].
'$indexed_variables'(A, B) :-
	A=depends_on_goal(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=ai_observed(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=ai_not_observed(C, D),
	B=[].
'$indexed_variables'(A, B) :-
	A=depends_on_as(C, D, E),
	B=[].
attach_increment([], A).
attach_increment([A|B], C) :-
	'chr not_locked'(A),
	(   get_attr(A, chr_translate, D)
	->  sort(D, E),
	    merge(C, E, F),
	    put_attr(A, chr_translate, F)
	;   put_attr(A, chr_translate, C)
	),
	attach_increment(B, C).
attr_unify_hook(A, B) :-
	sort(A, C),
	(   var(B)
	->  (   get_attr(B, chr_translate, D)
	    ->  true
	    ;   D=[]
	    ),
	    sort(D, E),
	    'chr merge_attributes'(C, E, F),
	    put_attr(B, chr_translate, F),
	    'chr run_suspensions'(F)
	;   (   compound(B)
	    ->  term_variables(B, G),
		attach_increment(G, C)
	    ;   true
	    ),
	    'chr run_suspensions'(A)
	).
remove_constraint_internal(A, B, C) :-
	arg(2, A, D),
	D=mutable(E),
	'chr update_mutable'(removed, D),
	(   compound(E)
	->  B=[],
	    C=no
	;   E==removed
	->  B=[],
	    C=no
	;   C=yes,
	    chr_indexed_variables(A, B)
	).
activate_constraint(A, B, C, D) :-
	arg(2, C, E),
	E=mutable(F),
	'chr update_mutable'(active, E),
	(   nonvar(D)
	->  true
	;   arg(4, C, G),
	    G=mutable(H),
	    D is H+1,
	    'chr update_mutable'(D, G)
	),
	(   compound(F)
	->  term_variables(F, B),
	    'chr none_locked'(B),
	    A=yes
	;   F==removed
	->  chr_indexed_variables(C, B),
	    A=yes
	;   B=[],
	    A=no
	).
allocate_constraint(A, B, C, D) :-
	B=..[suspension, E, F, A, G, H, C|D],
	G=mutable(0),
	'chr empty_history'(I),
	H=mutable(I),
	chr_indexed_variables(B, J),
	F=mutable(passive(J)),
	'chr gen_id'(E).
chr_indexed_variables(A, B) :-
	A=..[C, D, E, F, G, H, I|J],
	'$indexed_variables'(I, B).
insert_constraint_internal(yes, A, B, C, D, E) :-
	B=..[suspension, F, G, C, H, I, D|E],
	chr_indexed_variables(B, A),
	'chr none_locked'(A),
	G=mutable(active),
	H=mutable(0),
	I=mutable(J),
	'chr empty_history'(J),
	'chr gen_id'(F).
'$insert_in_store_target_module/1'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
	b_setval('$chr_store_global_ground_chr_translate:target_module/1', [A|B]).
'$delete_from_store_target_module/1'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:target_module/1', C).
'$insert_in_store_indexed_argument/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
	insert_ht(C, B, A),
	true,
	arg(7, A, D),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', F),
	insert_ht(F, k(D, E), A),
	true.
'$delete_from_store_indexed_argument/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
	delete_ht(C, B, A),
	true,
	arg(7, A, D),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', F),
	delete_ht(F, k(D, E), A),
	true.
'$insert_in_store_constraint_mode/2'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', B),
	b_setval('$chr_store_global_ground_chr_translate:constraint_mode/2', [A|B]),
	arg(7, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', D),
	insert_ht(D, C, A),
	true.
'$delete_from_store_constraint_mode/2'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:constraint_mode/2', C),
	arg(7, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', E),
	delete_ht(E, D, A),
	true.
'$insert_in_store_store_type/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_store_type/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_actual_store_types/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_actual_store_types/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_assumed_store_type/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_assumed_store_type/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_rule_count/1'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', B),
	b_setval('$chr_store_global_ground_chr_translate:rule_count/1', [A|B]).
'$delete_from_store_rule_count/1'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:rule_count/1', C).
'$insert_in_store_passive/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', C),
	insert_ht(C, B, A),
	true,
	arg(7, A, D),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:passive/2-12', F),
	insert_ht(F, k(D, E), A),
	true.
'$delete_from_store_passive/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', C),
	delete_ht(C, B, A),
	true,
	arg(7, A, D),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:passive/2-12', F),
	delete_ht(F, k(D, E), A),
	true.
'$insert_in_store_occurrence/4'(A) :-
	arg(9, A, B),
	arg(10, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', D),
	insert_ht(D, k(B, C), A),
	true,
	arg(7, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1', F),
	insert_ht(F, E, A),
	true,
	arg(8, A, G),
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-2', H),
	insert_ht(H, G, A),
	true,
	arg(9, A, I),
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-3', J),
	insert_ht(J, I, A),
	true,
	arg(7, A, K),
	arg(8, A, L),
	arg(9, A, M),
	arg(10, A, N),
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1234', O),
	insert_ht(O, k(K, L, M, N), A),
	true.
'$delete_from_store_occurrence/4'(A) :-
	arg(9, A, B),
	arg(10, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', D),
	delete_ht(D, k(B, C), A),
	true,
	arg(7, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1', F),
	delete_ht(F, E, A),
	true,
	arg(8, A, G),
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-2', H),
	delete_ht(H, G, A),
	true,
	arg(9, A, I),
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-3', J),
	delete_ht(J, I, A),
	true,
	arg(7, A, K),
	arg(8, A, L),
	arg(9, A, M),
	arg(10, A, N),
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1234', O),
	delete_ht(O, k(K, L, M, N), A),
	true.
'$insert_in_store_max_occurrence/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_max_occurrence/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_allocation_occurrence/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', C),
	insert_ht(C, B, A),
	true,
	arg(7, A, D),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', F),
	insert_ht(F, k(D, E), A),
	true,
	nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', G),
	b_setval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', [A|G]).
'$delete_from_store_allocation_occurrence/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', C),
	delete_ht(C, B, A),
	true,
	arg(7, A, D),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', F),
	delete_ht(F, k(D, E), A),
	true,
	nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', G),
	'chr sbag_del_element'(G, A, H),
	b_setval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', H).
'$insert_in_store_rule/2'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:rule/2', B),
	b_setval('$chr_store_global_ground_chr_translate:rule/2', [A|B]),
	arg(7, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:rule/2-1', D),
	insert_ht(D, C, A),
	true.
'$delete_from_store_rule/2'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:rule/2', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:rule/2', C),
	arg(7, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:rule/2-1', E),
	delete_ht(E, D, A),
	true.
'$insert_in_store_least_occurrence/2'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', B),
	b_setval('$chr_store_global_ground_chr_translate:least_occurrence/2', [A|B]),
	arg(7, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', D),
	insert_ht(D, C, A),
	true.
'$delete_from_store_least_occurrence/2'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:least_occurrence/2', C),
	arg(7, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', E),
	delete_ht(E, D, A),
	true.
'$insert_in_store_constraint_index/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_constraint_index/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_max_constraint_index/1'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', B),
	b_setval('$chr_store_global_ground_chr_translate:max_constraint_index/1', [A|B]).
'$delete_from_store_max_constraint_index/1'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:max_constraint_index/1', C).
'$insert_in_store_observes/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', C),
	insert_ht(C, B, A),
	true,
	arg(7, A, D),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:observes/2-12', F),
	insert_ht(F, k(D, E), A),
	true.
'$delete_from_store_observes/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', C),
	delete_ht(C, B, A),
	true,
	arg(7, A, D),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:observes/2-12', F),
	delete_ht(F, k(D, E), A),
	true.
'$insert_in_store_spawns_observer/2'(A) :-
	arg(7, A, B),
	arg(8, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', D),
	insert_ht(D, k(B, C), A),
	true,
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', F),
	insert_ht(F, E, A),
	true.
'$delete_from_store_spawns_observer/2'(A) :-
	arg(7, A, B),
	arg(8, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', D),
	delete_ht(D, k(B, C), A),
	true,
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', F),
	delete_ht(F, E, A),
	true.
'$insert_in_store_observes_indirectly/2'(A) :-
	arg(7, A, B),
	arg(8, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', D),
	insert_ht(D, k(B, C), A),
	true,
	arg(7, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', F),
	insert_ht(F, E, A),
	true.
'$delete_from_store_observes_indirectly/2'(A) :-
	arg(7, A, B),
	arg(8, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', D),
	delete_ht(D, k(B, C), A),
	true,
	arg(7, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', F),
	delete_ht(F, E, A),
	true.
'$insert_in_store_prev_guard_list/7'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', B),
	b_setval('$chr_store_global_ground_chr_translate:prev_guard_list/7', [A|B]),
	arg(8, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', D),
	insert_ht(D, C, A),
	true,
	arg(7, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', F),
	insert_ht(F, E, A),
	true.
'$delete_from_store_prev_guard_list/7'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:prev_guard_list/7', C),
	arg(8, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', E),
	delete_ht(E, D, A),
	true,
	arg(7, A, F),
	nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', G),
	delete_ht(G, F, A),
	true.
'$insert_in_store_set_all_passive/1'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_set_all_passive/1'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_multiple_occ_constraints_checked/1'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', B),
	b_setval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', [A|B]).
'$delete_from_store_multiple_occ_constraints_checked/1'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', C).
'$insert_in_store_type_definition/2'(A) :-
	'chr global_term_ref_1'(B),
	(   get_attr(B, chr_translate, C)
	->  D=[A|C],
	    put_attr(B, chr_translate, D)
	;   put_attr(B, chr_translate, [A])
	).
'$delete_from_store_type_definition/2'(A) :-
	'chr global_term_ref_1'(B),
	(   get_attr(B, chr_translate, C)
	->  'chr sbag_del_element'(C, A, D),
	    (   D==[]
	    ->  del_attr(B, chr_translate)
	    ;   put_attr(B, chr_translate, D)
	    )
	;   true
	).
'$insert_in_store_constraint_type/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_constraint_type/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_add_type_information/3'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', B),
	b_setval('$chr_store_global_ground_chr_translate:add_type_information/3', [A|B]).
'$delete_from_store_add_type_information/3'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:add_type_information/3', C).
'$insert_in_store_stored/3'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', C),
	insert_ht(C, B, A),
	true,
	arg(8, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:stored/3-2', E),
	insert_ht(E, D, A),
	true,
	nb_getval('$chr_store_global_ground_chr_translate:stored/3', F),
	b_setval('$chr_store_global_ground_chr_translate:stored/3', [A|F]).
'$delete_from_store_stored/3'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', C),
	delete_ht(C, B, A),
	true,
	arg(8, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:stored/3-2', E),
	delete_ht(E, D, A),
	true,
	nb_getval('$chr_store_global_ground_chr_translate:stored/3', F),
	'chr sbag_del_element'(F, A, G),
	b_setval('$chr_store_global_ground_chr_translate:stored/3', G).
'$insert_in_store_stored_complete/3'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_stored_complete/3'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_check_all_passive/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_check_all_passive/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_constraints_code1/3'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', C),
	insert_ht(C, B, A),
	true,
	nb_getval('$chr_store_global_ground_chr_translate:constraints_code1/3', D),
	b_setval('$chr_store_global_ground_chr_translate:constraints_code1/3', [A|D]).
'$delete_from_store_constraints_code1/3'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', C),
	delete_ht(C, B, A),
	true,
	nb_getval('$chr_store_global_ground_chr_translate:constraints_code1/3', D),
	'chr sbag_del_element'(D, A, E),
	b_setval('$chr_store_global_ground_chr_translate:constraints_code1/3', E).
'$insert_in_store_use_auxiliary_predicate/1'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_use_auxiliary_predicate/1'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_functional_dependency/4'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', C),
	insert_ht(C, B, A),
	true,
	arg(7, A, D),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', F),
	insert_ht(F, k(D, E), A),
	true.
'$delete_from_store_functional_dependency/4'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', C),
	delete_ht(C, B, A),
	true,
	arg(7, A, D),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', F),
	delete_ht(F, k(D, E), A),
	true.
'$insert_in_store_initial_call_pattern/1'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', C),
	insert_ht(C, B, A),
	true.
'$delete_from_store_initial_call_pattern/1'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', C),
	delete_ht(C, B, A),
	true.
'$insert_in_store_call_pattern/1'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', C),
	insert_ht(C, B, A),
	true,
	nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', D),
	b_setval('$chr_store_global_ground_chr_translate:call_pattern/1', [A|D]).
'$delete_from_store_call_pattern/1'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', C),
	delete_ht(C, B, A),
	true,
	nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', D),
	'chr sbag_del_element'(D, A, E),
	b_setval('$chr_store_global_ground_chr_translate:call_pattern/1', E).
'$insert_in_store_final_answer_pattern/2'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', B),
	b_setval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', [A|B]),
	arg(7, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', D),
	insert_ht(D, C, A),
	true.
'$delete_from_store_final_answer_pattern/2'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', C),
	arg(7, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', E),
	delete_ht(E, D, A),
	true.
'$insert_in_store_abstract_constraints/1'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', B),
	b_setval('$chr_store_global_ground_chr_translate:abstract_constraints/1', [A|B]).
'$delete_from_store_abstract_constraints/1'(A) :-
	nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', B),
	'chr sbag_del_element'(B, A, C),
	b_setval('$chr_store_global_ground_chr_translate:abstract_constraints/1', C).
'$insert_in_store_depends_on/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', C),
	insert_ht(C, B, A),
	true,
	nb_getval('$chr_store_global_ground_chr_translate:depends_on/2', D),
	b_setval('$chr_store_global_ground_chr_translate:depends_on/2', [A|D]),
	arg(8, A, E),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-2', F),
	insert_ht(F, E, A),
	true.
'$delete_from_store_depends_on/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', C),
	delete_ht(C, B, A),
	true,
	nb_getval('$chr_store_global_ground_chr_translate:depends_on/2', D),
	'chr sbag_del_element'(D, A, E),
	b_setval('$chr_store_global_ground_chr_translate:depends_on/2', E),
	arg(8, A, F),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-2', G),
	delete_ht(G, F, A),
	true.
'$insert_in_store_depends_on_ap/4'(A) :-
	arg(8, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', C),
	insert_ht(C, B, A),
	true,
	arg(9, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', E),
	insert_ht(E, D, A),
	true.
'$delete_from_store_depends_on_ap/4'(A) :-
	arg(8, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', C),
	delete_ht(C, B, A),
	true,
	arg(9, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', E),
	delete_ht(E, D, A),
	true.
'$insert_in_store_depends_on_goal/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-1', C),
	insert_ht(C, B, A),
	true,
	arg(8, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', E),
	insert_ht(E, D, A),
	true,
	arg(7, A, F),
	arg(8, A, G),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12', H),
	insert_ht(H, k(F, G), A),
	true.
'$delete_from_store_depends_on_goal/2'(A) :-
	arg(7, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-1', C),
	delete_ht(C, B, A),
	true,
	arg(8, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', E),
	delete_ht(E, D, A),
	true,
	arg(7, A, F),
	arg(8, A, G),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12', H),
	delete_ht(H, k(F, G), A),
	true.
'$insert_in_store_ai_observed/2'(A) :-
	arg(7, A, B),
	arg(8, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:ai_observed/2-12', D),
	insert_ht(D, k(B, C), A),
	true.
'$delete_from_store_ai_observed/2'(A) :-
	arg(7, A, B),
	arg(8, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:ai_observed/2-12', D),
	delete_ht(D, k(B, C), A),
	true.
'$insert_in_store_ai_not_observed/2'(A) :-
	arg(7, A, B),
	arg(8, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', D),
	insert_ht(D, k(B, C), A),
	true.
'$delete_from_store_ai_not_observed/2'(A) :-
	arg(7, A, B),
	arg(8, A, C),
	nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', D),
	delete_ht(D, k(B, C), A),
	true.
'$insert_in_store_depends_on_as/3'(A) :-
	arg(9, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', C),
	insert_ht(C, B, A),
	true,
	arg(8, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', E),
	insert_ht(E, D, A),
	true.
'$delete_from_store_depends_on_as/3'(A) :-
	arg(9, A, B),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', C),
	delete_ht(C, B, A),
	true,
	arg(8, A, D),
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', E),
	delete_ht(E, D, A),
	true.
'$enumerate_suspensions'(A) :-
	(   nb_getval('$chr_store_global_ground_chr_translate:target_module/1', B),
	    'chr sbag_member'(A, B)
	;   nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
	    value_ht(C, A)
	;   nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', D),
	    'chr sbag_member'(A, D)
	;   nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', E),
	    value_ht(E, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', F),
	    value_ht(F, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', G),
	    value_ht(G, A)
	;   nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', H),
	    'chr sbag_member'(A, H)
	;   nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', I),
	    value_ht(I, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', J),
	    value_ht(J, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', K),
	    value_ht(K, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', L),
	    value_ht(L, A)
	;   nb_getval('$chr_store_global_ground_chr_translate:rule/2', M),
	    'chr sbag_member'(A, M)
	;   nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', N),
	    'chr sbag_member'(A, N)
	;   nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', O),
	    value_ht(O, A)
	;   nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', P),
	    'chr sbag_member'(A, P)
	;   nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', Q),
	    value_ht(Q, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', R),
	    value_ht(R, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', S),
	    value_ht(S, A)
	;   nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', T),
	    'chr sbag_member'(A, T)
	;   nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', U),
	    value_ht(U, A)
	;   nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', V),
	    'chr sbag_member'(A, V)
	;   'chr global_term_ref_1'(W),
	    get_attr(W, chr_translate, X),
	    'chr sbag_member'(A, X)
	;   nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', Y),
	    value_ht(Y, A)
	;   nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', Z),
	    'chr sbag_member'(A, Z)
	;   nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', A1),
	    value_ht(A1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', B1),
	    value_ht(B1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C1),
	    value_ht(C1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', D1),
	    value_ht(D1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', E1),
	    value_ht(E1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', F1),
	    value_ht(F1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', G1),
	    value_ht(G1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', H1),
	    value_ht(H1, A)
	;   nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', I1),
	    'chr sbag_member'(A, I1)
	;   nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', J1),
	    'chr sbag_member'(A, J1)
	;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', K1),
	    value_ht(K1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', L1),
	    value_ht(L1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-1', M1),
	    value_ht(M1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:ai_observed/2-12', N1),
	    value_ht(N1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', O1),
	    value_ht(O1, A)
	;   nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', P1),
	    value_ht(P1, A)
	).
:-nb_setval('$chr_store_global_ground_chr_translate:target_module/1', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', A).
'$via1_multi_hash_indexed_argument/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', A).
'$via1_multi_hash_indexed_argument/2-12'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:constraint_mode/2', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', A).
'$via1_multi_hash_constraint_mode/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:store_type/2-1', A).
'$via1_multi_hash_store_type/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', A).
'$via1_multi_hash_actual_store_types/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', A).
'$via1_multi_hash_assumed_store_type/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:rule_count/1', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:passive/2-1', A).
'$via1_multi_hash_passive/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:passive/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:passive/2-12', A).
'$via1_multi_hash_passive/2-12'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:passive/2-12', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-34', A).
'$via1_multi_hash_occurrence/4-34'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-34', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-1', A).
'$via1_multi_hash_occurrence/4-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-2', A).
'$via1_multi_hash_occurrence/4-2'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-2', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-3', A).
'$via1_multi_hash_occurrence/4-3'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-3', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:occurrence/4-1234', A).
'$via1_multi_hash_occurrence/4-1234'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:occurrence/4-1234', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', A).
'$via1_multi_hash_max_occurrence/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', A).
'$via1_multi_hash_allocation_occurrence/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', A).
'$via1_multi_hash_allocation_occurrence/2-12'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', []).
:-nb_setval('$chr_store_global_ground_chr_translate:rule/2', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:rule/2-1', A).
'$via1_multi_hash_rule/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:rule/2-1', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:least_occurrence/2', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', A).
'$via1_multi_hash_least_occurrence/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', A).
'$via1_multi_hash_constraint_index/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:constraint_index/2-1', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:max_constraint_index/1', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:observes/2-1', A).
'$via1_multi_hash_observes/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:observes/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:observes/2-12', A).
'$via1_multi_hash_observes/2-12'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:observes/2-12', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', A).
'$via1_multi_hash_spawns_observer/2-12'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', A).
'$via1_multi_hash_spawns_observer/2-2'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', A).
'$via1_multi_hash_observes_indirectly/2-12'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', A).
'$via1_multi_hash_observes_indirectly/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:prev_guard_list/7', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', A).
'$via1_multi_hash_prev_guard_list/7-2'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', A).
'$via1_multi_hash_prev_guard_list/7-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', A).
'$via1_multi_hash_set_all_passive/1-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', A).
'$via1_multi_hash_constraint_type/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:add_type_information/3', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:stored/3-1', A).
'$via1_multi_hash_stored/3-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:stored/3-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:stored/3-2', A).
'$via1_multi_hash_stored/3-2'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:stored/3-2', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:stored/3', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', A).
'$via1_multi_hash_stored_complete/3-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', A).
'$via1_multi_hash_check_all_passive/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', A).
'$via1_multi_hash_constraints_code1/3-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:constraints_code1/3-1', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:constraints_code1/3', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', A).
'$via1_multi_hash_use_auxiliary_predicate/1-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', A).
'$via1_multi_hash_functional_dependency/4-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', A).
'$via1_multi_hash_functional_dependency/4-12'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', A).
'$via1_multi_hash_initial_call_pattern/1-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', A).
'$via1_multi_hash_call_pattern/1-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:call_pattern/1-1', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:call_pattern/1', []).
:-nb_setval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', A).
'$via1_multi_hash_final_answer_pattern/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:abstract_constraints/1', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:depends_on/2-1', A).
'$via1_multi_hash_depends_on/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-1', C),
	lookup_ht(C, A, B).
:-nb_setval('$chr_store_global_ground_chr_translate:depends_on/2', []).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:depends_on/2-2', A).
'$via1_multi_hash_depends_on/2-2'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on/2-2', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', A).
'$via1_multi_hash_depends_on_ap/4-2'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', A).
'$via1_multi_hash_depends_on_ap/4-3'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-1', A).
'$via1_multi_hash_depends_on_goal/2-1'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-1', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', A).
'$via1_multi_hash_depends_on_goal/2-2'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12', A).
'$via1_multi_hash_depends_on_goal/2-12'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_goal/2-12', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:ai_observed/2-12', A).
'$via1_multi_hash_ai_observed/2-12'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:ai_observed/2-12', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', A).
'$via1_multi_hash_ai_not_observed/2-12'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', A).
'$via1_multi_hash_depends_on_as/3-3'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', C),
	lookup_ht(C, A, B).
:-new_ht(A), nb_setval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', A).
'$via1_multi_hash_depends_on_as/3-2'(A, B) :-
	nb_getval('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', C),
	lookup_ht(C, A, B).
target_module(A) :-
	'target_module/1__0'(A, B).
'target_module/1__0'(A, B) :-
	nb_getval('$chr_store_global_ground_chr_translate:target_module/1', C),
	(   'chr sbag_member'(D, C),
	    D=suspension(E, F, G, H, I, J, K),
	    F=mutable(active)
	->  true
	), !.
'target_module/1__0'(A, B) :-
	insert_constraint_internal(C, D, B, chr_translate:'target_module/1__0'(A, B), target_module(A), [A]),
	'$insert_in_store_target_module/1'(B).
get_target_module(A) :-
	'get_target_module/1__0'(A, B).
'get_target_module/1__0'(A, B) :-
	nb_getval('$chr_store_global_ground_chr_translate:target_module/1', C),
	(   'chr sbag_member'(D, C),
	    D=suspension(E, F, G, H, I, J, K),
	    F=mutable(active)
	->  true
	), !,
	A=K.
'get_target_module/1__0'(A, B) :- !,
	A=user.
indexed_argument(A, B) :-
	'indexed_argument/2__0'(A, B, C).
'indexed_argument/2__0'(A, B, C) :-
	'$via1_multi_hash_indexed_argument/2-12'(k(A, B), D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A,
	    M==B
	->  true
	), !.
'indexed_argument/2__0'(A, B, C) :-
	insert_constraint_internal(D, E, C, chr_translate:'indexed_argument/2__0'(A, B, C), indexed_argument(A, B), [A, B]),
	'$insert_in_store_indexed_argument/2'(C).
is_indexed_argument(A, B) :-
	'is_indexed_argument/2__0'(A, B, C).
'is_indexed_argument/2__0'(A, B, C) :-
	'$via1_multi_hash_indexed_argument/2-12'(k(A, B), D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A,
	    M==B
	->  true
	), !.
'is_indexed_argument/2__0'(A, B, C) :- !,
	fail.
constraint_mode(A, B) :-
	'constraint_mode/2__0'(A, B, C).
'constraint_mode/2__0'(A, B, C) :-
	'$via1_multi_hash_constraint_mode/2-1'(A, D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A
	->  true
	), !.
'constraint_mode/2__0'(A, B, C) :-
	nonvar(A),
	A=D/E,
	nb_getval('$chr_store_global_ground_chr_translate:add_type_information/3', F), !,
	allocate_constraint(chr_translate:'constraint_mode/2__0'(A, B, C), C, constraint_mode(A, B), [A, B]),
	'constraint_mode/2__0__0'(F, A, B, C, D, E).
'constraint_mode/2__0__0'([], A, B, C, D, E) :-
	'constraint_mode/2__1'(A, B, C).
'constraint_mode/2__0__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O, P),
	    I=mutable(active),
	    nonvar(N),
	    N=[Q|R],
	    nonvar(O),
	    O=[S|T],
	    'chr lock'(Q),
	    'chr lock'(F),
	    'chr lock'(G),
	    functor(Q, F, G),
	    'chr unlock'(Q),
	    'chr unlock'(F),
	    'chr unlock'(G)
	->  remove_constraint_internal(A, U, V),
	    (   V==yes
	    ->  '$delete_from_store_add_type_information/3'(A)
	    ;   true
	    ),
	    activate_constraint(W, X, E, Y),
	    (   W==yes
	    ->  '$insert_in_store_constraint_mode/2'(E)
	    ;   true
	    ),
	    Q=..[Z|A1],
	    S=..[B1|C1],
	    add_mode_info(D, A1, D1),
	    P= (D1, E1),
	    (   get_constraint_type(F/G, F1)
	    ->  types2condition(F1, A1, C1, D, G1),
		list2conj(G1, H1),
		E1= (H1, I1),
		add_type_information(R, T, I1)
	    ;   add_type_information(R, T, E1)
	    ),
	    (   E=suspension(J1, K1, L1, M1, N1, O1, P1, Q1),
		K1=mutable(active),
		M1=mutable(Y)
	    ->  'chr update_mutable'(inactive, K1),
		'constraint_mode/2__0__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'constraint_mode/2__0__0'(B, C, D, E, F, G)
	).
'constraint_mode/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'constraint_mode/2__0'(A, B, C), C, constraint_mode(A, B), [A, B]),
	'constraint_mode/2__1'(A, B, C).
'constraint_mode/2__1'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_constraint_mode/2'(C)
	;   true
	).
get_constraint_mode(A, B) :-
	'get_constraint_mode/2__0'(A, B, C).
'get_constraint_mode/2__0'(A, B, C) :-
	'$via1_multi_hash_constraint_mode/2-1'(A, D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A
	->  true
	), !,
	B=M.
'get_constraint_mode/2__0'(A, B, C) :- !,
	A=D/E,
	replicate(E, (?), B).
may_trigger(A) :-
	'may_trigger/1__0'(A, B).
'may_trigger/1__0'(A, B) :-
	'$via1_multi_hash_indexed_argument/2-1'(A, C),
	'$via1_multi_hash_constraint_mode/2-1'(A, D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A
	->  true
	),
	'chr sbag_member'(N, C),
	N=suspension(O, P, Q, R, S, T, U, V),
	P=mutable(active),
	U==A, !,
	nth(V, M, W),
	W\== (+),
	is_stored(A).
'may_trigger/1__0'(A, B) :- !,
	chr_pp_flag(debugable, on).
store_type(A, B) :-
	'store_type/2__0'(A, B, C).
'store_type/2__0'(A, B, C) :-
	nonvar(B),
	B=atom_hash(D), !,
	store_type(A, multi_hash([D])).
'store_type/2__0'(A, B, C) :-
	insert_constraint_internal(D, E, C, chr_translate:'store_type/2__0'(A, B, C), store_type(A, B), [A, B]),
	'$insert_in_store_store_type/2'(C).
get_store_type(A, B) :-
	'get_store_type/2__0'(A, B, C).
'get_store_type/2__0'(A, B, C) :-
	'$via1_multi_hash_store_type/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A, !,
	B=M.
'get_store_type/2__0'(A, B, C) :-
	'$via1_multi_hash_assumed_store_type/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A, !,
	B=M.
'get_store_type/2__0'(A, B, C) :- !,
	B=default.
update_store_type(A, B) :-
	'update_store_type/2__0'(A, B, C).
'update_store_type/2__0'(A, B, C) :-
	'$via1_multi_hash_actual_store_types/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A,
	'chr lock'(B),
	'chr lock'(M),
	member(B, M),
	'chr unlock'(B),
	'chr unlock'(M), !.
'update_store_type/2__0'(A, B, C) :-
	'$via1_multi_hash_actual_store_types/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A, !,
	remove_constraint_internal(E, N, O),
	(   O==yes
	->  '$delete_from_store_actual_store_types/2'(E)
	;   true
	),
	actual_store_types(A, [B|M]).
'update_store_type/2__0'(A, B, C) :- !,
	actual_store_types(A, [B]).
actual_store_types(A, B) :-
	'actual_store_types/2__0'(A, B, C).
'actual_store_types/2__0'(A, B, C) :-
	insert_constraint_internal(D, E, C, chr_translate:'actual_store_types/2__0'(A, B, C), actual_store_types(A, B), [A, B]),
	'$insert_in_store_actual_store_types/2'(C).
assumed_store_type(A, B) :-
	'assumed_store_type/2__0'(A, B, C).
'assumed_store_type/2__0'(A, B, C) :-
	insert_constraint_internal(D, E, C, chr_translate:'assumed_store_type/2__0'(A, B, C), assumed_store_type(A, B), [A, B]),
	'$insert_in_store_assumed_store_type/2'(C).
validate_store_type_assumption(A) :-
	'validate_store_type_assumption/1__0'(A, B).
'validate_store_type_assumption/1__0'(A, B) :-
	'$via1_multi_hash_assumed_store_type/2-1'(A, C),
	'$via1_multi_hash_actual_store_types/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A,
	'chr sbag_member'(N, C),
	N=suspension(O, P, Q, R, S, T, U, V),
	P=mutable(active),
	U==A, !,
	remove_constraint_internal(E, W, X),
	(   X==yes
	->  '$delete_from_store_actual_store_types/2'(E)
	;   true
	),
	remove_constraint_internal(N, Y, Z),
	(   Z==yes
	->  '$delete_from_store_assumed_store_type/2'(N)
	;   true
	),
	store_type(A, multi_store(M)).
'validate_store_type_assumption/1__0'(A, B) :-
	'$via1_multi_hash_store_type/2-1'(A, C),
	'$via1_multi_hash_actual_store_types/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A,
	'chr sbag_member'(N, C),
	N=suspension(O, P, Q, R, S, T, U, V),
	P=mutable(active),
	U==A, !,
	remove_constraint_internal(E, W, X),
	(   X==yes
	->  '$delete_from_store_actual_store_types/2'(E)
	;   true
	),
	remove_constraint_internal(N, Y, Z),
	(   Z==yes
	->  '$delete_from_store_store_type/2'(N)
	;   true
	),
	store_type(A, multi_store(M)).
'validate_store_type_assumption/1__0'(A, B) :- !.
rule_count(A) :-
	'rule_count/1__0'(A, B).
'rule_count/1__0'(A, B) :-
	insert_constraint_internal(C, D, B, chr_translate:'rule_count/1__0'(A, B), rule_count(A), [A]),
	'$insert_in_store_rule_count/1'(B).
inc_rule_count(A) :-
	'inc_rule_count/1__0'(A, B).
'inc_rule_count/1__0'(A, B) :-
	nb_getval('$chr_store_global_ground_chr_translate:rule_count/1', C),
	'chr sbag_member'(D, C),
	D=suspension(E, F, G, H, I, J, K),
	F=mutable(active), !,
	remove_constraint_internal(D, L, M),
	(   M==yes
	->  '$delete_from_store_rule_count/1'(D)
	;   true
	),
	A is K+1,
	rule_count(A).
'inc_rule_count/1__0'(A, B) :- !,
	A=1,
	rule_count(A).
passive(A, B) :-
	'passive/2__0'(A, B, C).
'passive/2__0'(A, B, C) :-
	'$via1_multi_hash_passive/2-12'(k(A, B), D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A,
	    M==B
	->  true
	), !.
'passive/2__0'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
	allocate_constraint(chr_translate:'passive/2__0'(A, B, C), C, passive(A, B), [A, B]),
	'passive/2__0__0'(D, A, B, C).
'passive/2__0__0'([], A, B, C) :-
	'passive/2__1'(A, B, C).
'passive/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    '$via1_multi_hash_occurrence/4-1234'(k(L, M, C, D), N),
	    'chr sbag_member'(O, N),
	    O=suspension(P, Q, R, S, T, U, V, W, X, Y),
	    Q=mutable(active),
	    V==L,
	    W==M,
	    X==C,
	    Y==D
	->  remove_constraint_internal(A, Z, A1),
	    (   A1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(B1, C1, E, D1),
	    (   B1==yes
	    ->  '$insert_in_store_passive/2'(E)
	    ;   true
	    ),
	    E1 is M+1,
	    allocation_occurrence(L, E1),
	    (   E=suspension(F1, G1, H1, I1, J1, K1, L1, M1),
		G1=mutable(active),
		I1=mutable(D1)
	    ->  'chr update_mutable'(inactive, G1),
		'passive/2__0__0'(B, C, D, E)
	    ;   true
	    )
	;   'passive/2__0__0'(B, C, D, E)
	).
'passive/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'passive/2__0'(A, B, C), C, passive(A, B), [A, B]),
	'passive/2__1'(A, B, C).
'passive/2__1'(A, B, C) :-
	'$via1_multi_hash_least_occurrence/2-1'(A, D), !,
	'passive/2__1__0'(D, A, B, C).
'passive/2__1__0'([], A, B, C) :-
	'passive/2__2'(A, B, C).
'passive/2__1__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    nonvar(M),
	    M=[N|O],
	    N==D,
	    '$via1_multi_hash_rule/2-1'(C, P),
	    'chr sbag_member'(Q, P),
	    Q=suspension(R, S, T, U, V, W, X, Y),
	    S=mutable(active),
	    X==C
	->  remove_constraint_internal(A, Z, A1),
	    (   A1==yes
	    ->  '$delete_from_store_least_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(B1, C1, E, D1),
	    (   B1==yes
	    ->  '$insert_in_store_passive/2'(E)
	    ;   true
	    ),
	    least_occurrence(C, O),
	    (   E=suspension(E1, F1, G1, H1, I1, J1, K1, L1),
		F1=mutable(active),
		H1=mutable(D1)
	    ->  'chr update_mutable'(inactive, F1),
		'passive/2__1__0'(B, C, D, E)
	    ;   true
	    )
	;   'passive/2__1__0'(B, C, D, E)
	).
'passive/2__1'(A, B, C) :-
	'passive/2__2'(A, B, C).
'passive/2__2'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:stored/3', D), !,
	'passive/2__2__0'(D, A, B, C).
'passive/2__2__0'([], A, B, C) :-
	'passive/2__3'(A, B, C).
'passive/2__2__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N),
	    G=mutable(active),
	    N==yes,
	    '$via1_multi_hash_occurrence/4-1234'(k(L, M, C, D), O),
	    '$via1_multi_hash_stored_complete/3-1'(L, P),
	    'chr sbag_member'(Q, P),
	    Q=suspension(R, S, T, U, V, W, X, Y, Z),
	    S=mutable(active),
	    X==L,
	    M<Y,
	    'chr sbag_member'(A1, O),
	    A1=suspension(B1, C1, D1, E1, F1, G1, H1, I1, J1, K1),
	    C1=mutable(active),
	    H1==L,
	    I1==M,
	    J1==C,
	    K1==D
	->  remove_constraint_internal(A, L1, M1),
	    (   M1==yes
	    ->  '$delete_from_store_stored/3'(A)
	    ;   true
	    ),
	    remove_constraint_internal(Q, N1, O1),
	    (   O1==yes
	    ->  '$delete_from_store_stored_complete/3'(Q)
	    ;   true
	    ),
	    activate_constraint(P1, Q1, E, R1),
	    (   P1==yes
	    ->  '$insert_in_store_passive/2'(E)
	    ;   true
	    ),
	    S1 is Z-1,
	    stored(L, M, maybe),
	    stored_complete(L, Y, S1),
	    (   E=suspension(T1, U1, V1, W1, X1, Y1, Z1, A2),
		U1=mutable(active),
		W1=mutable(R1)
	    ->  'chr update_mutable'(inactive, U1),
		'passive/2__2__0'(B, C, D, E)
	    ;   true
	    )
	;   'passive/2__2__0'(B, C, D, E)
	).
'passive/2__2'(A, B, C) :-
	'passive/2__3'(A, B, C).
'passive/2__3'(A, B, C) :-
	'$via1_multi_hash_rule/2-1'(A, D), !,
	'passive/2__3__0'(D, A, B, C).
'passive/2__3__0'([], A, B, C) :-
	'passive/2__4'(A, B, C).
'passive/2__3__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    N=t(91, A, E),
	    'chr novel_production'(A, N),
	    'chr novel_production'(E, N),
	    'chr lock'(M),
	    'chr lock'(D),
	    'chr lock'(C),
	    M=pragma(rule(O, P, Q, R), ids([D|S], T), U, V, C),
	    'chr unlock'(M),
	    'chr unlock'(D),
	    'chr unlock'(C)
	->  'chr extend_history'(E, N),
	    activate_constraint(W, X, E, Y),
	    (   W==yes
	    ->  '$insert_in_store_passive/2'(E)
	    ;   true
	    ),
	    append(S, T, Z),
	    check_all_passive(C, Z),
	    (   E=suspension(A1, B1, C1, D1, E1, F1, G1, H1),
		B1=mutable(active),
		D1=mutable(Y)
	    ->  'chr update_mutable'(inactive, B1),
		'passive/2__3__0'(B, C, D, E)
	    ;   true
	    )
	;   'passive/2__3__0'(B, C, D, E)
	).
'passive/2__3'(A, B, C) :-
	'passive/2__4'(A, B, C).
'passive/2__4'(A, B, C) :-
	'$via1_multi_hash_rule/2-1'(A, D), !,
	'passive/2__4__0'(D, A, B, C).
'passive/2__4__0'([], A, B, C) :-
	'passive/2__5'(A, B, C).
'passive/2__4__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    N=t(92, A, E),
	    'chr novel_production'(A, N),
	    'chr novel_production'(E, N),
	    'chr lock'(M),
	    'chr lock'(D),
	    'chr lock'(C),
	    M=pragma(rule(O, P, Q, R), ids([], [D|S]), T, U, C),
	    'chr unlock'(M),
	    'chr unlock'(D),
	    'chr unlock'(C)
	->  'chr extend_history'(E, N),
	    activate_constraint(V, W, E, X),
	    (   V==yes
	    ->  '$insert_in_store_passive/2'(E)
	    ;   true
	    ),
	    check_all_passive(C, S),
	    (   E=suspension(Y, Z, A1, B1, C1, D1, E1, F1),
		Z=mutable(active),
		B1=mutable(X)
	    ->  'chr update_mutable'(inactive, Z),
		'passive/2__4__0'(B, C, D, E)
	    ;   true
	    )
	;   'passive/2__4__0'(B, C, D, E)
	).
'passive/2__4'(A, B, C) :-
	'passive/2__5'(A, B, C).
'passive/2__5'(A, B, C) :-
	'$via1_multi_hash_check_all_passive/2-1'(A, D), !,
	'passive/2__5__0'(D, A, B, C).
'passive/2__5__0'([], A, B, C) :-
	'passive/2__6'(A, B, C).
'passive/2__5__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    nonvar(M),
	    M=[N|O],
	    N==D
	->  remove_constraint_internal(A, P, Q),
	    (   Q==yes
	    ->  '$delete_from_store_check_all_passive/2'(A)
	    ;   true
	    ),
	    activate_constraint(R, S, E, T),
	    (   R==yes
	    ->  '$insert_in_store_passive/2'(E)
	    ;   true
	    ),
	    check_all_passive(C, O),
	    (   E=suspension(U, V, W, X, Y, Z, A1, B1),
		V=mutable(active),
		X=mutable(T)
	    ->  'chr update_mutable'(inactive, V),
		'passive/2__5__0'(B, C, D, E)
	    ;   true
	    )
	;   'passive/2__5__0'(B, C, D, E)
	).
'passive/2__5'(A, B, C) :-
	'passive/2__6'(A, B, C).
'passive/2__6'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_passive/2'(C)
	;   true
	).
is_passive(A, B) :-
	'is_passive/2__0'(A, B, C).
'is_passive/2__0'(A, B, C) :-
	'$via1_multi_hash_passive/2-12'(k(A, B), D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A,
	    M==B
	->  true
	), !.
'is_passive/2__0'(A, B, C) :- !,
	fail.
any_passive_head(A) :-
	'any_passive_head/1__0'(A, B).
'any_passive_head/1__0'(A, B) :-
	'$via1_multi_hash_passive/2-1'(A, C),
	'chr sbag_member'(D, C),
	D=suspension(E, F, G, H, I, J, K, L),
	F=mutable(active),
	K==A, !.
'any_passive_head/1__0'(A, B) :- !,
	fail.
new_occurrence(A, B, C) :-
	'new_occurrence/3__0'(A, B, C, D).
'new_occurrence/3__0'(A, B, C, D) :-
	'$via1_multi_hash_max_occurrence/2-1'(A, E),
	(   'chr sbag_member'(F, E),
	    F=suspension(G, H, I, J, K, L, M, N),
	    H=mutable(active),
	    M==A
	->  true
	), !,
	remove_constraint_internal(F, O, P),
	(   P==yes
	->  '$delete_from_store_max_occurrence/2'(F)
	;   true
	),
	Q is N+1,
	occurrence(A, Q, B, C),
	max_occurrence(A, Q).
'new_occurrence/3__0'(A, B, C, D) :- !,
	format('ERROR: new_occurrence: missing max_occurrence for ~w in rule ~w\n', [A, B]),
	fail.
occurrence(A, B, C, D) :-
	'occurrence/4__0'(A, B, C, D, E).
'occurrence/4__0'(A, B, C, D, E) :-
	'$via1_multi_hash_allocation_occurrence/2-12'(k(A, B), F), !,
	allocate_constraint(chr_translate:'occurrence/4__0'(A, B, C, D, E), E, occurrence(A, B, C, D), [A, B, C, D]),
	'occurrence/4__0__0'(F, A, B, C, D, E).
'occurrence/4__0__0'([], A, B, C, D, E) :-
	'occurrence/4__1'(A, B, C, D, E).
'occurrence/4__0__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    N==C,
	    O==D,
	    '$via1_multi_hash_passive/2-12'(k(E, F), P),
	    (   'chr sbag_member'(Q, P),
		Q=suspension(R, S, T, U, V, W, X, Y),
		S=mutable(active),
		X==E,
		Y==F
	    ->  true
	    )
	->  remove_constraint_internal(A, Z, A1),
	    (   A1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(B1, C1, G, D1),
	    (   B1==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    E1 is D+1,
	    allocation_occurrence(C, E1),
	    (   G=suspension(F1, G1, H1, I1, J1, K1, L1, M1, N1, O1),
		G1=mutable(active),
		I1=mutable(D1)
	    ->  'chr update_mutable'(inactive, G1),
		'occurrence/4__0__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__0__0'(B, C, D, E, F, G)
	).
'occurrence/4__0'(A, B, C, D, E) :-
	allocate_constraint(chr_translate:'occurrence/4__0'(A, B, C, D, E), E, occurrence(A, B, C, D), [A, B, C, D]),
	'occurrence/4__1'(A, B, C, D, E).
'occurrence/4__1'(A, B, C, D, E) :-
	'$via1_multi_hash_allocation_occurrence/2-12'(k(A, B), F), !,
	'occurrence/4__1__0'(F, A, B, C, D, E).
'occurrence/4__1__0'([], A, B, C, D, E) :-
	'occurrence/4__2'(A, B, C, D, E).
'occurrence/4__1__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    N==C,
	    O==D,
	    '$via1_multi_hash_rule/2-1'(E, P),
	    'chr sbag_member'(Q, P),
	    Q=suspension(R, S, T, U, V, W, X, Y),
	    S=mutable(active),
	    X==E,
	    'chr lock'(Y),
	    'chr lock'(F),
	    Y=pragma(Z, ids(A1, B1), C1, D1, E1),
	    member(F, A1),
	    'chr unlock'(Y),
	    'chr unlock'(F)
	->  remove_constraint_internal(A, F1, G1),
	    (   G1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(H1, I1, G, J1),
	    (   H1==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    K1 is D+1,
	    allocation_occurrence(C, K1),
	    (   G=suspension(L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1),
		M1=mutable(active),
		O1=mutable(J1)
	    ->  'chr update_mutable'(inactive, M1),
		'occurrence/4__1__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__1__0'(B, C, D, E, F, G)
	).
'occurrence/4__1'(A, B, C, D, E) :-
	'occurrence/4__2'(A, B, C, D, E).
'occurrence/4__2'(A, B, C, D, E) :-
	'$via1_multi_hash_allocation_occurrence/2-12'(k(A, B), F), !,
	'occurrence/4__2__0'(F, A, B, C, D, E).
'occurrence/4__2__0'([], A, B, C, D, E) :-
	'occurrence/4__3'(A, B, C, D, E).
'occurrence/4__2__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    N==C,
	    O==D,
	    '$via1_multi_hash_rule/2-1'(E, P),
	    'chr sbag_member'(Q, P),
	    Q=suspension(R, S, T, U, V, W, X, Y),
	    S=mutable(active),
	    X==E,
	    'chr lock'(Y),
	    Y=pragma(rule([Z|A1], B1, C1, true), D1, E1, F1, G1),
	    'chr unlock'(Y)
	->  remove_constraint_internal(A, H1, I1),
	    (   I1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(J1, K1, G, L1),
	    (   J1==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    M1 is D+1,
	    allocation_occurrence(C, M1),
	    (   G=suspension(N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1),
		O1=mutable(active),
		Q1=mutable(L1)
	    ->  'chr update_mutable'(inactive, O1),
		'occurrence/4__2__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__2__0'(B, C, D, E, F, G)
	).
'occurrence/4__2'(A, B, C, D, E) :-
	'occurrence/4__3'(A, B, C, D, E).
'occurrence/4__3'(A, B, C, D, E) :-
	'$via1_multi_hash_allocation_occurrence/2-12'(k(A, B), F), !,
	'occurrence/4__3__0'(F, A, B, C, D, E).
'occurrence/4__3__0'([], A, B, C, D, E) :-
	'occurrence/4__4'(A, B, C, D, E).
'occurrence/4__3__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    N==C,
	    O==D,
	    '$via1_multi_hash_rule/2-1'(E, P),
	    'chr sbag_member'(Q, P),
	    Q=suspension(R, S, T, U, V, W, X, Y),
	    S=mutable(active),
	    X==E,
	    'chr lock'(Y),
	    'chr lock'(C),
	    'chr lock'(D),
	    Y=pragma(rule([Z|A1], B1, C1, D1), E1, F1, G1, H1),
	    \+((
		is_self_observer(C),
		ai_is_observed(C, D)
		)),
	    'chr unlock'(Y),
	    'chr unlock'(C),
	    'chr unlock'(D)
	->  remove_constraint_internal(A, I1, J1),
	    (   J1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(K1, L1, G, M1),
	    (   K1==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    N1 is D+1,
	    allocation_occurrence(C, N1),
	    (   G=suspension(O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1),
		P1=mutable(active),
		R1=mutable(M1)
	    ->  'chr update_mutable'(inactive, P1),
		'occurrence/4__3__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__3__0'(B, C, D, E, F, G)
	).
'occurrence/4__3'(A, B, C, D, E) :-
	'occurrence/4__4'(A, B, C, D, E).
'occurrence/4__4'(A, B, C, D, E) :-
	'$via1_multi_hash_allocation_occurrence/2-12'(k(A, B), F), !,
	'occurrence/4__4__0'(F, A, B, C, D, E).
'occurrence/4__4__0'([], A, B, C, D, E) :-
	'occurrence/4__5'(A, B, C, D, E).
'occurrence/4__4__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    N==C,
	    O==D,
	    '$via1_multi_hash_rule/2-1'(E, P),
	    '$via1_multi_hash_least_occurrence/2-1'(E, Q),
	    'chr sbag_member'(R, Q),
	    R=suspension(S, T, U, V, W, X, Y, Z),
	    T=mutable(active),
	    Y==E,
	    Z==[],
	    'chr sbag_member'(A1, P),
	    A1=suspension(B1, C1, D1, E1, F1, G1, H1, I1),
	    C1=mutable(active),
	    H1==E,
	    'chr lock'(I1),
	    'chr lock'(C),
	    'chr lock'(D),
	    I1=pragma(rule([], J1, K1, L1), M1, N1, O1, P1),
	    \+((
		is_self_observer(C),
		ai_is_observed(C, D)
		)),
	    'chr unlock'(I1),
	    'chr unlock'(C),
	    'chr unlock'(D)
	->  remove_constraint_internal(A, Q1, R1),
	    (   R1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(S1, T1, G, U1),
	    (   S1==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    V1 is D+1,
	    allocation_occurrence(C, V1),
	    (   G=suspension(W1, X1, Y1, Z1, A2, B2, C2, D2, E2, F2),
		X1=mutable(active),
		Z1=mutable(U1)
	    ->  'chr update_mutable'(inactive, X1),
		'occurrence/4__4__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__4__0'(B, C, D, E, F, G)
	).
'occurrence/4__4'(A, B, C, D, E) :-
	'occurrence/4__5'(A, B, C, D, E).
'occurrence/4__5'(A, B, C, D, E) :-
	'$via1_multi_hash_least_occurrence/2-1'(C, F), !,
	'occurrence/4__5__0'(F, A, B, C, D, E).
'occurrence/4__5__0'([], A, B, C, D, E) :-
	'occurrence/4__6'(A, B, C, D, E).
'occurrence/4__5__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    N==E,
	    nonvar(O),
	    O=[P|Q],
	    P==F,
	    '$via1_multi_hash_rule/2-1'(E, R),
	    '$via1_multi_hash_allocation_occurrence/2-1'(C, S),
	    'chr sbag_member'(T, S),
	    T=suspension(U, V, W, X, Y, Z, A1, B1),
	    V=mutable(active),
	    A1==C,
	    B1>=D,
	    'chr sbag_member'(C1, R),
	    C1=suspension(D1, E1, F1, G1, H1, I1, J1, K1),
	    E1=mutable(active),
	    J1==E,
	    'chr lock'(C),
	    \+may_trigger(C),
	    'chr unlock'(C)
	->  remove_constraint_internal(A, L1, M1),
	    (   M1==yes
	    ->  '$delete_from_store_least_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(N1, O1, G, P1),
	    (   N1==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    least_occurrence(E, Q),
	    (   G=suspension(Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1),
		R1=mutable(active),
		T1=mutable(P1)
	    ->  'chr update_mutable'(inactive, R1),
		'occurrence/4__5__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__5__0'(B, C, D, E, F, G)
	).
'occurrence/4__5'(A, B, C, D, E) :-
	'occurrence/4__6'(A, B, C, D, E).
'occurrence/4__6'(A, B, C, D, E) :-
	'$via1_multi_hash_set_all_passive/1-1'(C, F), !,
	'occurrence/4__6__0'(F, A, B, C, D, E).
'occurrence/4__6__0'([], A, B, C, D, E) :-
	'occurrence/4__7'(A, B, C, D, E).
'occurrence/4__6__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N),
	    I=mutable(active),
	    N==E,
	    O=t(71, A, G),
	    'chr novel_production'(A, O),
	    'chr novel_production'(G, O)
	->  'chr extend_history'(G, O),
	    activate_constraint(P, Q, G, R),
	    (   P==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    passive(E, F),
	    (   G=suspension(S, T, U, V, W, X, Y, Z, A1, B1),
		T=mutable(active),
		V=mutable(R)
	    ->  'chr update_mutable'(inactive, T),
		'occurrence/4__6__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__6__0'(B, C, D, E, F, G)
	).
'occurrence/4__6'(A, B, C, D, E) :-
	'occurrence/4__7'(A, B, C, D, E).
'occurrence/4__7'(A, B, C, D, E) :-
	nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', F), !,
	'occurrence/4__7__0'(F, A, B, C, D, E).
'occurrence/4__7__0'([], A, B, C, D, E) :-
	'occurrence/4__8'(A, B, C, D, E).
'occurrence/4__7__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N),
	    I=mutable(active),
	    chr_pp_flag(occurrence_subsumption, on),
	    '$via1_multi_hash_occurrence/4-3'(E, O),
	    '$via1_multi_hash_rule/2-1'(E, P),
	    '$via1_multi_hash_prev_guard_list/7-1'(E, Q),
	    'chr sbag_member'(R, Q),
	    R=suspension(S, T, U, V, W, X, Y, Z, A1, B1, C1, D1, E1),
	    T=mutable(active),
	    Y==E,
	    Z==0,
	    E1==[],
	    'chr sbag_member'(F1, P),
	    F1=suspension(G1, H1, I1, J1, K1, L1, M1, N1),
	    H1=mutable(active),
	    M1==E,
	    'chr sbag_member'(O1, O),
	    O1=suspension(P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1),
	    Q1=mutable(active),
	    V1==C,
	    X1==E,
	    D<W1,
	    'chr lock'(N1),
	    'chr lock'(E),
	    'chr lock'(C),
	    'chr lock'(N),
	    N1=pragma(rule(Z1, A2, B2, C2), D2, E2, F2, E),
	    Z1\==[],
	    \+memberchk_eq(C, N),
	    'chr unlock'(N1),
	    'chr unlock'(E),
	    'chr unlock'(C),
	    'chr unlock'(N)
	->  remove_constraint_internal(A, G2, H2),
	    (   H2==yes
	    ->  '$delete_from_store_multiple_occ_constraints_checked/1'(A)
	    ;   true
	    ),
	    activate_constraint(I2, J2, G, K2),
	    (   I2==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    first_occ_in_rule(E, C, D, F),
	    multiple_occ_constraints_checked([C|N]),
	    (   G=suspension(L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2),
		M2=mutable(active),
		O2=mutable(K2)
	    ->  'chr update_mutable'(inactive, M2),
		'occurrence/4__7__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__7__0'(B, C, D, E, F, G)
	).
'occurrence/4__7'(A, B, C, D, E) :-
	'occurrence/4__8'(A, B, C, D, E).
'occurrence/4__8'(A, B, C, D, E) :-
	nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', F), !,
	'occurrence/4__8__0'(F, A, B, C, D, E).
'occurrence/4__8__0'([], A, B, C, D, E) :-
	'occurrence/4__9'(A, B, C, D, E).
'occurrence/4__8__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N),
	    I=mutable(active),
	    chr_pp_flag(occurrence_subsumption, on),
	    '$via1_multi_hash_occurrence/4-3'(E, O),
	    '$via1_multi_hash_rule/2-1'(E, P),
	    '$via1_multi_hash_prev_guard_list/7-1'(E, Q),
	    'chr sbag_member'(R, Q),
	    R=suspension(S, T, U, V, W, X, Y, Z, A1, B1, C1, D1, E1),
	    T=mutable(active),
	    Y==E,
	    Z==0,
	    E1==[],
	    'chr sbag_member'(F1, P),
	    F1=suspension(G1, H1, I1, J1, K1, L1, M1, N1),
	    H1=mutable(active),
	    M1==E,
	    'chr sbag_member'(O1, O),
	    O1=suspension(P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1),
	    Q1=mutable(active),
	    V1==C,
	    X1==E,
	    W1<D,
	    'chr lock'(N1),
	    'chr lock'(E),
	    'chr lock'(C),
	    'chr lock'(N),
	    N1=pragma(rule(Z1, A2, B2, C2), D2, E2, F2, E),
	    Z1\==[],
	    \+memberchk_eq(C, N),
	    'chr unlock'(N1),
	    'chr unlock'(E),
	    'chr unlock'(C),
	    'chr unlock'(N)
	->  remove_constraint_internal(A, G2, H2),
	    (   H2==yes
	    ->  '$delete_from_store_multiple_occ_constraints_checked/1'(A)
	    ;   true
	    ),
	    activate_constraint(I2, J2, G, K2),
	    (   I2==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    first_occ_in_rule(E, C, W1, Y1),
	    multiple_occ_constraints_checked([C|N]),
	    (   G=suspension(L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2),
		M2=mutable(active),
		O2=mutable(K2)
	    ->  'chr update_mutable'(inactive, M2),
		'occurrence/4__8__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__8__0'(B, C, D, E, F, G)
	).
'occurrence/4__8'(A, B, C, D, E) :-
	'occurrence/4__9'(A, B, C, D, E).
'occurrence/4__9'(A, B, C, D, E) :-
	'$via1_multi_hash_stored_complete/3-1'(A, F), !,
	'occurrence/4__9__0'(F, A, B, C, D, E).
'occurrence/4__9__0'([], A, B, C, D, E) :-
	'occurrence/4__10'(A, B, C, D, E).
'occurrence/4__9__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O, P),
	    I=mutable(active),
	    N==C,
	    D<O,
	    '$via1_multi_hash_passive/2-12'(k(E, F), Q),
	    '$via1_multi_hash_stored/3-2'(D, R),
	    'chr sbag_member'(S, R),
	    S=suspension(T, U, V, W, X, Y, Z, A1, B1),
	    U=mutable(active),
	    Z==C,
	    A1==D,
	    B1==yes,
	    (   'chr sbag_member'(C1, Q),
		C1=suspension(D1, E1, F1, G1, H1, I1, J1, K1),
		E1=mutable(active),
		J1==E,
		K1==F
	    ->  true
	    )
	->  remove_constraint_internal(A, L1, M1),
	    (   M1==yes
	    ->  '$delete_from_store_stored_complete/3'(A)
	    ;   true
	    ),
	    remove_constraint_internal(S, N1, O1),
	    (   O1==yes
	    ->  '$delete_from_store_stored/3'(S)
	    ;   true
	    ),
	    activate_constraint(P1, Q1, G, R1),
	    (   P1==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    S1 is P-1,
	    stored(C, D, maybe),
	    stored_complete(C, O, S1),
	    (   G=suspension(T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2),
		U1=mutable(active),
		W1=mutable(R1)
	    ->  'chr update_mutable'(inactive, U1),
		'occurrence/4__9__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__9__0'(B, C, D, E, F, G)
	).
'occurrence/4__9'(A, B, C, D, E) :-
	'occurrence/4__10'(A, B, C, D, E).
'occurrence/4__10'(A, B, C, D, E) :-
	'$via1_multi_hash_occurrence/4-3'(C, F), !,
	'occurrence/4__10__0'(F, A, B, C, D, E).
'occurrence/4__10__0'([], A, B, C, D, E) :-
	'occurrence/4__11'(A, B, C, D, E).
'occurrence/4__10__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O, P, Q),
	    I=mutable(active),
	    P==E,
	    '$via1_multi_hash_stored_complete/3-1'(N, R)
	->  'occurrence/4__10__1'(R, N, A, B, C, D, E, F, G)
	;   'occurrence/4__10__0'(B, C, D, E, F, G)
	).
'occurrence/4__10__1'([], A, B, C, D, E, F, G, H) :-
	'occurrence/4__10__0'(C, D, E, F, G, H).
'occurrence/4__10__1'([A|B], C, D, E, F, G, H, I, J) :-
	(   A=suspension(K, L, M, N, O, P, Q, R, S),
	    L=mutable(active),
	    Q==C,
	    S==0,
	    '$via1_multi_hash_max_occurrence/2-1'(C, T)
	->  'occurrence/4__10__2'(T, R, A, B, C, D, E, F, G, H, I, J)
	;   'occurrence/4__10__1'(B, C, D, E, F, G, H, I, J)
	).
'occurrence/4__10__2'([], A, B, C, D, E, F, G, H, I, J, K) :-
	'occurrence/4__10__1'(C, D, E, F, G, H, I, J, K).
'occurrence/4__10__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
	(   A=suspension(N, O, P, Q, R, S, T, U),
	    O=mutable(active),
	    T==F,
	    V=t(90, M, G, D, A),
	    'chr novel_production'(M, V),
	    'chr novel_production'(G, V),
	    'chr novel_production'(D, V),
	    'chr novel_production'(A, V),
	    C=<U
	->  'chr extend_history'(M, V),
	    activate_constraint(W, X, M, Y),
	    (   W==yes
	    ->  '$insert_in_store_occurrence/4'(M)
	    ;   true
	    ),
	    passive(K, L),
	    (   M=suspension(Z, A1, B1, C1, D1, E1, F1, G1, H1, I1),
		A1=mutable(active),
		C1=mutable(Y)
	    ->  'chr update_mutable'(inactive, A1),
		'occurrence/4__10__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	    ;   true
	    )
	;   'occurrence/4__10__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	).
'occurrence/4__10'(A, B, C, D, E) :-
	'occurrence/4__11'(A, B, C, D, E).
'occurrence/4__11'(A, B, C, D, E) :-
	'$via1_multi_hash_stored_complete/3-1'(A, F), !,
	'occurrence/4__11__0'(F, A, B, C, D, E).
'occurrence/4__11__0'([], A, B, C, D, E) :-
	'occurrence/4__12'(A, B, C, D, E).
'occurrence/4__11__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O, P),
	    I=mutable(active),
	    N==C,
	    P==0,
	    '$via1_multi_hash_occurrence/4-3'(E, Q)
	->  'occurrence/4__11__1'(Q, O, A, B, C, D, E, F, G)
	;   'occurrence/4__11__0'(B, C, D, E, F, G)
	).
'occurrence/4__11__1'([], A, B, C, D, E, F, G, H) :-
	'occurrence/4__11__0'(C, D, E, F, G, H).
'occurrence/4__11__1'([A|B], C, D, E, F, G, H, I, J) :-
	(   A=suspension(K, L, M, N, O, P, Q, R, S, T),
	    L=mutable(active),
	    S==H,
	    '$via1_multi_hash_max_occurrence/2-1'(F, U)
	->  'occurrence/4__11__2'(U, T, A, B, C, D, E, F, G, H, I, J)
	;   'occurrence/4__11__1'(B, C, D, E, F, G, H, I, J)
	).
'occurrence/4__11__2'([], A, B, C, D, E, F, G, H, I, J, K) :-
	'occurrence/4__11__1'(C, D, E, F, G, H, I, J, K).
'occurrence/4__11__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
	(   A=suspension(N, O, P, Q, R, S, T, U),
	    O=mutable(active),
	    T==I,
	    V=t(90, G, M, D, A),
	    'chr novel_production'(G, V),
	    'chr novel_production'(M, V),
	    'chr novel_production'(D, V),
	    'chr novel_production'(A, V),
	    F=<U
	->  'chr extend_history'(M, V),
	    activate_constraint(W, X, M, Y),
	    (   W==yes
	    ->  '$insert_in_store_occurrence/4'(M)
	    ;   true
	    ),
	    passive(K, C),
	    (   M=suspension(Z, A1, B1, C1, D1, E1, F1, G1, H1, I1),
		A1=mutable(active),
		C1=mutable(Y)
	    ->  'chr update_mutable'(inactive, A1),
		'occurrence/4__11__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	    ;   true
	    )
	;   'occurrence/4__11__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	).
'occurrence/4__11'(A, B, C, D, E) :-
	'occurrence/4__12'(A, B, C, D, E).
'occurrence/4__12'(A, B, C, D, E) :-
	'$via1_multi_hash_stored_complete/3-1'(A, F), !,
	'occurrence/4__12__0'(F, A, B, C, D, E).
'occurrence/4__12__0'([], A, B, C, D, E) :-
	'occurrence/4__13'(A, B, C, D, E).
'occurrence/4__12__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O, P),
	    I=mutable(active),
	    N==C,
	    Q=t(99, A, G),
	    'chr novel_production'(A, Q),
	    'chr novel_production'(G, Q),
	    D>O
	->  'chr extend_history'(G, Q),
	    activate_constraint(R, S, G, T),
	    (   R==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    passive(E, F),
	    (   G=suspension(U, V, W, X, Y, Z, A1, B1, C1, D1),
		V=mutable(active),
		X=mutable(T)
	    ->  'chr update_mutable'(inactive, V),
		'occurrence/4__12__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__12__0'(B, C, D, E, F, G)
	).
'occurrence/4__12'(A, B, C, D, E) :-
	'occurrence/4__13'(A, B, C, D, E).
'occurrence/4__13'(A, B, C, D, E) :-
	'$via1_multi_hash_functional_dependency/4-12'(k(A, C), F), !,
	'occurrence/4__13__0'(F, A, B, C, D, E).
'occurrence/4__13__0'([], A, B, C, D, E) :-
	'occurrence/4__14'(A, B, C, D, E).
'occurrence/4__13__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O, P, Q),
	    I=mutable(active),
	    N==C,
	    O==E,
	    E>1,
	    '$via1_multi_hash_allocation_occurrence/2-1'(C, R),
	    'chr sbag_member'(S, R),
	    S=suspension(T, U, V, W, X, Y, Z, A1),
	    U=mutable(active),
	    Z==C,
	    A1>D
	->  remove_constraint_internal(A, B1, C1),
	    (   C1==yes
	    ->  '$delete_from_store_functional_dependency/4'(A)
	    ;   true
	    ),
	    activate_constraint(D1, E1, G, F1),
	    (   D1==yes
	    ->  '$insert_in_store_occurrence/4'(G)
	    ;   true
	    ),
	    functional_dependency(C, 1, P, Q),
	    (   G=suspension(G1, H1, I1, J1, K1, L1, M1, N1, O1, P1),
		H1=mutable(active),
		J1=mutable(F1)
	    ->  'chr update_mutable'(inactive, H1),
		'occurrence/4__13__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'occurrence/4__13__0'(B, C, D, E, F, G)
	).
'occurrence/4__13'(A, B, C, D, E) :-
	'occurrence/4__14'(A, B, C, D, E).
'occurrence/4__14'(A, B, C, D, E) :-
	nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F), !,
	'occurrence/4__14__0'(F, A, B, C, D, E).
'occurrence/4__14__0'([], A, B, C, D, E) :-
	'occurrence/4__15'(A, B, C, D, E).
'occurrence/4__14__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N),
	    I=mutable(active),
	    '$via1_multi_hash_rule/2-1'(E, O)
	->  'occurrence/4__14__1'(O, N, A, B, C, D, E, F, G)
	;   'occurrence/4__14__0'(B, C, D, E, F, G)
	).
'occurrence/4__14__1'([], A, B, C, D, E, F, G, H) :-
	'occurrence/4__14__0'(C, D, E, F, G, H).
'occurrence/4__14__1'([A|B], C, D, E, F, G, H, I, J) :-
	(   A=suspension(K, L, M, N, O, P, Q, R),
	    L=mutable(active),
	    Q==H,
	    nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', S)
	->  'occurrence/4__14__2'(S, R, A, B, C, D, E, F, G, H, I, J)
	;   'occurrence/4__14__1'(B, C, D, E, F, G, H, I, J)
	).
'occurrence/4__14__2'([], A, B, C, D, E, F, G, H, I, J, K) :-
	'occurrence/4__14__1'(C, D, E, F, G, H, I, J, K).
'occurrence/4__14__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
	(   A=suspension(N, O, P, Q, R, S, T),
	    O=mutable(active),
	    nonvar(T),
	    T=odom(U, V),
	    nonvar(U),
	    U=occ(W, X),
	    W==I,
	    X==J,
	    Y=t(140, G, D, M, A),
	    'chr novel_production'(G, Y),
	    'chr novel_production'(D, Y),
	    'chr novel_production'(M, Y),
	    'chr novel_production'(A, Y),
	    'chr lock'(C),
	    'chr lock'(L),
	    C=pragma(rule(Z, A1, B1, C1), ids(D1, E1), F1, G1, H1),
	    memberchk_eq(L, D1),
	    'chr unlock'(C),
	    'chr unlock'(L)
	->  'chr extend_history'(M, Y),
	    activate_constraint(I1, J1, M, K1),
	    (   I1==yes
	    ->  '$insert_in_store_occurrence/4'(M)
	    ;   true
	    ),
	    select2(L, L1, D1, Z, M1, N1),
	    ai_observation_abstract_constraints(N1, F, O1),
	    ai_observation_observe_list(odom([], V), O1, odom([], P1)),
	    ai_observation_abstract_constraints(A1, F, Q1),
	    ai_observation_observe_list(odom([], P1), Q1, odom([], R1)),
	    ai_observation_abstract_goal(C1, F, S1),
	    call_pattern(odom(S1, R1)),
	    T1 is J+1,
	    U1=odom(occ(I, T1), V),
	    call_pattern(U1),
	    depends_on_as(odom(occ(I, J), V), odom(S1, R1), U1),
	    (   M=suspension(V1, W1, X1, Y1, Z1, A2, B2, C2, D2, E2),
		W1=mutable(active),
		Y1=mutable(K1)
	    ->  'chr update_mutable'(inactive, W1),
		'occurrence/4__14__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	    ;   true
	    )
	;   'occurrence/4__14__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	).
'occurrence/4__14'(A, B, C, D, E) :-
	'occurrence/4__15'(A, B, C, D, E).
'occurrence/4__15'(A, B, C, D, E) :-
	nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', F), !,
	'occurrence/4__15__0'(F, A, B, C, D, E).
'occurrence/4__15__0'([], A, B, C, D, E) :-
	'occurrence/4__16'(A, B, C, D, E).
'occurrence/4__15__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N),
	    I=mutable(active),
	    '$via1_multi_hash_rule/2-1'(E, O)
	->  'occurrence/4__15__1'(O, N, A, B, C, D, E, F, G)
	;   'occurrence/4__15__0'(B, C, D, E, F, G)
	).
'occurrence/4__15__1'([], A, B, C, D, E, F, G, H) :-
	'occurrence/4__15__0'(C, D, E, F, G, H).
'occurrence/4__15__1'([A|B], C, D, E, F, G, H, I, J) :-
	(   A=suspension(K, L, M, N, O, P, Q, R),
	    L=mutable(active),
	    Q==H,
	    nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', S)
	->  'occurrence/4__15__2'(S, R, A, B, C, D, E, F, G, H, I, J)
	;   'occurrence/4__15__1'(B, C, D, E, F, G, H, I, J)
	).
'occurrence/4__15__2'([], A, B, C, D, E, F, G, H, I, J, K) :-
	'occurrence/4__15__1'(C, D, E, F, G, H, I, J, K).
'occurrence/4__15__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
	(   A=suspension(N, O, P, Q, R, S, T),
	    O=mutable(active),
	    nonvar(T),
	    T=odom(U, V),
	    nonvar(U),
	    U=occ(W, X),
	    W==I,
	    X==J,
	    Y=t(142, G, D, M, A),
	    'chr novel_production'(G, Y),
	    'chr novel_production'(D, Y),
	    'chr novel_production'(M, Y),
	    'chr novel_production'(A, Y),
	    'chr lock'(C),
	    'chr lock'(L),
	    C=pragma(rule(Z, A1, B1, C1), ids(D1, E1), F1, G1, H1),
	    memberchk_eq(L, E1),
	    'chr unlock'(C),
	    'chr unlock'(L)
	->  'chr extend_history'(M, Y),
	    activate_constraint(I1, J1, M, K1),
	    (   I1==yes
	    ->  '$insert_in_store_occurrence/4'(M)
	    ;   true
	    ),
	    select2(L, L1, E1, A1, M1, N1),
	    ai_observation_abstract_constraints(N1, F, O1),
	    ai_observation_observe_list(odom([], V), O1, odom([], P1)),
	    ai_observation_abstract_constraints(Z, F, Q1),
	    ai_observation_observe_list(odom([], P1), Q1, odom([], R1)),
	    ord_add_element(R1, I, S1),
	    ai_observation_abstract_goal(C1, F, T1),
	    call_pattern(odom(T1, S1)),
	    (   ord_memberchk(I, R1)
	    ->  U1=no
	    ;   U1=yes
	    ),
	    V1 is J+1,
	    W1=odom(occ(I, V1), V),
	    call_pattern(W1),
	    depends_on_ap(odom(occ(I, J), V), odom(T1, S1), W1, U1),
	    (   M=suspension(X1, Y1, Z1, A2, B2, C2, D2, E2, F2, G2),
		Y1=mutable(active),
		A2=mutable(K1)
	    ->  'chr update_mutable'(inactive, Y1),
		'occurrence/4__15__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	    ;   true
	    )
	;   'occurrence/4__15__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	).
'occurrence/4__15'(A, B, C, D, E) :-
	'occurrence/4__16'(A, B, C, D, E).
'occurrence/4__16'(A, B, C, D, E) :-
	activate_constraint(F, G, E, H),
	(   F==yes
	->  '$insert_in_store_occurrence/4'(E)
	;   true
	).
get_occurrence(A, B, C, D) :-
	'get_occurrence/4__0'(A, B, C, D, E).
'get_occurrence/4__0'(A, B, C, D, E) :-
	'$via1_multi_hash_occurrence/4-2'(B, F),
	'chr sbag_member'(G, F),
	G=suspension(H, I, J, K, L, M, N, O, P, Q),
	I=mutable(active),
	N==A,
	O==B, !,
	P=C,
	Q=D.
'get_occurrence/4__0'(A, B, C, D, E) :- !,
	format('get_occurrence: missing occurrence ~w:~w\n', [A, B]),
	fail.
max_occurrence(A, B) :-
	'max_occurrence/2__0'(A, B, C).
'max_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_max_occurrence/2-1'(A, D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A
	->  true
	),
	M>=B, !.
'max_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_max_occurrence/2-1'(A, D), !,
	allocate_constraint(chr_translate:'max_occurrence/2__0'(A, B, C), C, max_occurrence(A, B), [A, B]),
	'max_occurrence/2__0__0'(D, A, B, C).
'max_occurrence/2__0__0'([], A, B, C) :-
	'max_occurrence/2__1'(A, B, C).
'max_occurrence/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C
	->  (   D>=M
	    ->  remove_constraint_internal(A, N, O),
		(   O==yes
		->  '$delete_from_store_max_occurrence/2'(A)
		;   true
		),
		'max_occurrence/2__0__0'([], C, D, E)
	    ;   'max_occurrence/2__0__0'([], C, D, E)
	    )
	;   'max_occurrence/2__0__0'(B, C, D, E)
	).
'max_occurrence/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'max_occurrence/2__0'(A, B, C), C, max_occurrence(A, B), [A, B]),
	'max_occurrence/2__1'(A, B, C).
'max_occurrence/2__1'(A, B, C) :-
	'$via1_multi_hash_stored_complete/3-1'(A, D), !,
	'max_occurrence/2__1__0'(D, A, B, C).
'max_occurrence/2__1__0'([], A, B, C) :-
	'max_occurrence/2__2'(A, B, C).
'max_occurrence/2__1__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N),
	    G=mutable(active),
	    L==C,
	    N==0,
	    '$via1_multi_hash_occurrence/4-1'(C, O)
	->  'max_occurrence/2__1__1'(O, M, A, B, C, D, E)
	;   'max_occurrence/2__1__0'(B, C, D, E)
	).
'max_occurrence/2__1__1'([], A, B, C, D, E, F) :-
	'max_occurrence/2__1__0'(C, D, E, F).
'max_occurrence/2__1__1'([A|B], C, D, E, F, G, H) :-
	(   A=suspension(I, J, K, L, M, N, O, P, Q, R),
	    J=mutable(active),
	    O==F,
	    '$via1_multi_hash_occurrence/4-3'(Q, S)
	->  'max_occurrence/2__1__2'(S, Q, A, B, C, D, E, F, G, H)
	;   'max_occurrence/2__1__1'(B, C, D, E, F, G, H)
	).
'max_occurrence/2__1__2'([], A, B, C, D, E, F, G, H, I) :-
	'max_occurrence/2__1__1'(C, D, E, F, G, H, I).
'max_occurrence/2__1__2'([A|B], C, D, E, F, G, H, I, J, K) :-
	(   A=suspension(L, M, N, O, P, Q, R, S, T, U),
	    M=mutable(active),
	    A\==D,
	    T==C,
	    V=t(90, G, D, A, K),
	    'chr novel_production'(G, V),
	    'chr novel_production'(D, V),
	    'chr novel_production'(A, V),
	    'chr novel_production'(K, V),
	    F=<J
	->  'chr extend_history'(K, V),
	    activate_constraint(W, X, K, Y),
	    (   W==yes
	    ->  '$insert_in_store_max_occurrence/2'(K)
	    ;   true
	    ),
	    passive(C, U),
	    (   K=suspension(Z, A1, B1, C1, D1, E1, F1, G1),
		A1=mutable(active),
		C1=mutable(Y)
	    ->  'chr update_mutable'(inactive, A1),
		'max_occurrence/2__1__2'(B, C, D, E, F, G, H, I, J, K)
	    ;   true
	    )
	;   'max_occurrence/2__1__2'(B, C, D, E, F, G, H, I, J, K)
	).
'max_occurrence/2__1'(A, B, C) :-
	'max_occurrence/2__2'(A, B, C).
'max_occurrence/2__2'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', D), !,
	'max_occurrence/2__2__0'(D, A, B, C).
'max_occurrence/2__2__0'([], A, B, C) :-
	'max_occurrence/2__3'(A, B, C).
'max_occurrence/2__2__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L),
	    G=mutable(active),
	    nonvar(L),
	    L=odom(M, N),
	    nonvar(M),
	    M=occ(O, P),
	    O==C,
	    Q=t(138, A, E),
	    'chr novel_production'(A, Q),
	    'chr novel_production'(E, Q),
	    P>D
	->  'chr extend_history'(E, Q),
	    activate_constraint(R, S, E, T),
	    (   R==yes
	    ->  '$insert_in_store_max_occurrence/2'(E)
	    ;   true
	    ),
	    final_answer_pattern(odom(occ(C, P), N), odom([], N)),
	    (   E=suspension(U, V, W, X, Y, Z, A1, B1),
		V=mutable(active),
		X=mutable(T)
	    ->  'chr update_mutable'(inactive, V),
		'max_occurrence/2__2__0'(B, C, D, E)
	    ;   true
	    )
	;   'max_occurrence/2__2__0'(B, C, D, E)
	).
'max_occurrence/2__2'(A, B, C) :-
	'max_occurrence/2__3'(A, B, C).
'max_occurrence/2__3'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_max_occurrence/2'(C)
	;   true
	).
get_max_occurrence(A, B) :-
	'get_max_occurrence/2__0'(A, B, C).
'get_max_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_max_occurrence/2-1'(A, D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A
	->  true
	), !,
	B=M.
'get_max_occurrence/2__0'(A, B, C) :- !,
	format('WARNING: get_max_occurrence: missing max occurrence for ~w\n', [A]),
	B=0.
allocation_occurrence(A, B) :-
	'allocation_occurrence/2__0'(A, B, C).
'allocation_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_occurrence/4-2'(B, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M, N, O),
	G=mutable(active),
	L==A,
	M==B,
	'$via1_multi_hash_passive/2-12'(k(N, O), P),
	(   'chr sbag_member'(Q, P),
	    Q=suspension(R, S, T, U, V, W, X, Y),
	    S=mutable(active),
	    X==N,
	    Y==O
	->  true
	), !,
	Z is B+1,
	allocation_occurrence(A, Z).
'allocation_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_occurrence/4-2'(B, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M, N, O),
	G=mutable(active),
	L==A,
	M==B,
	'$via1_multi_hash_rule/2-1'(N, P),
	'chr sbag_member'(Q, P),
	Q=suspension(R, S, T, U, V, W, X, Y),
	S=mutable(active),
	X==N,
	'chr lock'(Y),
	'chr lock'(O),
	Y=pragma(Z, ids(A1, B1), C1, D1, E1),
	member(O, A1),
	'chr unlock'(Y),
	'chr unlock'(O), !,
	F1 is B+1,
	allocation_occurrence(A, F1).
'allocation_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_occurrence/4-2'(B, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M, N, O),
	G=mutable(active),
	L==A,
	M==B,
	'$via1_multi_hash_rule/2-1'(N, P),
	'chr sbag_member'(Q, P),
	Q=suspension(R, S, T, U, V, W, X, Y),
	S=mutable(active),
	X==N,
	'chr lock'(Y),
	Y=pragma(rule([Z|A1], B1, C1, true), D1, E1, F1, G1),
	'chr unlock'(Y), !,
	H1 is B+1,
	allocation_occurrence(A, H1).
'allocation_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_occurrence/4-2'(B, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M, N, O),
	G=mutable(active),
	L==A,
	M==B,
	'$via1_multi_hash_rule/2-1'(N, P),
	'chr sbag_member'(Q, P),
	Q=suspension(R, S, T, U, V, W, X, Y),
	S=mutable(active),
	X==N,
	'chr lock'(Y),
	'chr lock'(A),
	'chr lock'(B),
	Y=pragma(rule([Z|A1], B1, C1, D1), E1, F1, G1, H1),
	\+((
	    is_self_observer(A),
	    ai_is_observed(A, B)
	    )),
	'chr unlock'(Y),
	'chr unlock'(A),
	'chr unlock'(B), !,
	I1 is B+1,
	allocation_occurrence(A, I1).
'allocation_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_occurrence/4-2'(B, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M, N, O),
	G=mutable(active),
	L==A,
	M==B,
	'$via1_multi_hash_least_occurrence/2-1'(N, P),
	'$via1_multi_hash_rule/2-1'(N, Q),
	'chr sbag_member'(R, Q),
	R=suspension(S, T, U, V, W, X, Y, Z),
	T=mutable(active),
	Y==N,
	'chr sbag_member'(A1, P),
	A1=suspension(B1, C1, D1, E1, F1, G1, H1, I1),
	C1=mutable(active),
	H1==N,
	I1==[],
	'chr lock'(Z),
	'chr lock'(A),
	'chr lock'(B),
	Z=pragma(rule([], J1, K1, L1), M1, N1, O1, P1),
	\+((
	    is_self_observer(A),
	    ai_is_observed(A, B)
	    )),
	'chr unlock'(Z),
	'chr unlock'(A),
	'chr unlock'(B), !,
	Q1 is B+1,
	allocation_occurrence(A, Q1).
'allocation_occurrence/2__0'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:least_occurrence/2', D), !,
	allocate_constraint(chr_translate:'allocation_occurrence/2__0'(A, B, C), C, allocation_occurrence(A, B), [A, B]),
	'allocation_occurrence/2__0__0'(D, A, B, C).
'allocation_occurrence/2__0__0'([], A, B, C) :-
	'allocation_occurrence/2__1'(A, B, C).
'allocation_occurrence/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    nonvar(M),
	    M=[N|O],
	    '$via1_multi_hash_occurrence/4-34'(k(L, N), P),
	    '$via1_multi_hash_rule/2-1'(L, Q),
	    'chr sbag_member'(R, Q),
	    R=suspension(S, T, U, V, W, X, Y, Z),
	    T=mutable(active),
	    Y==L,
	    'chr sbag_member'(A1, P),
	    A1=suspension(B1, C1, D1, E1, F1, G1, H1, I1, J1, K1),
	    C1=mutable(active),
	    H1==C,
	    J1==L,
	    K1==N,
	    D>=I1,
	    'chr lock'(C),
	    \+may_trigger(C),
	    'chr unlock'(C)
	->  remove_constraint_internal(A, L1, M1),
	    (   M1==yes
	    ->  '$delete_from_store_least_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(N1, O1, E, P1),
	    (   N1==yes
	    ->  '$insert_in_store_allocation_occurrence/2'(E)
	    ;   true
	    ),
	    least_occurrence(L, O),
	    (   E=suspension(Q1, R1, S1, T1, U1, V1, W1, X1),
		R1=mutable(active),
		T1=mutable(P1)
	    ->  'chr update_mutable'(inactive, R1),
		'allocation_occurrence/2__0__0'(B, C, D, E)
	    ;   true
	    )
	;   'allocation_occurrence/2__0__0'(B, C, D, E)
	).
'allocation_occurrence/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'allocation_occurrence/2__0'(A, B, C), C, allocation_occurrence(A, B), [A, B]),
	'allocation_occurrence/2__1'(A, B, C).
'allocation_occurrence/2__1'(A, B, C) :-
	'$via1_multi_hash_functional_dependency/4-1'(A, D), !,
	'allocation_occurrence/2__1__0'(D, A, B, C).
'allocation_occurrence/2__1__0'([], A, B, C) :-
	'allocation_occurrence/2__2'(A, B, C).
'allocation_occurrence/2__1__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N, O),
	    G=mutable(active),
	    L==C,
	    M>1,
	    '$via1_multi_hash_occurrence/4-3'(M, P),
	    'chr sbag_member'(Q, P),
	    Q=suspension(R, S, T, U, V, W, X, Y, Z, A1),
	    S=mutable(active),
	    X==C,
	    Z==M,
	    D>Y
	->  remove_constraint_internal(A, B1, C1),
	    (   C1==yes
	    ->  '$delete_from_store_functional_dependency/4'(A)
	    ;   true
	    ),
	    activate_constraint(D1, E1, E, F1),
	    (   D1==yes
	    ->  '$insert_in_store_allocation_occurrence/2'(E)
	    ;   true
	    ),
	    functional_dependency(C, 1, N, O),
	    (   E=suspension(G1, H1, I1, J1, K1, L1, M1, N1),
		H1=mutable(active),
		J1=mutable(F1)
	    ->  'chr update_mutable'(inactive, H1),
		'allocation_occurrence/2__1__0'(B, C, D, E)
	    ;   true
	    )
	;   'allocation_occurrence/2__1__0'(B, C, D, E)
	).
'allocation_occurrence/2__1'(A, B, C) :-
	'allocation_occurrence/2__2'(A, B, C).
'allocation_occurrence/2__2'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_allocation_occurrence/2'(C)
	;   true
	).
get_allocation_occurrence(A, B) :-
	'get_allocation_occurrence/2__0'(A, B, C).
'get_allocation_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_allocation_occurrence/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A, !,
	B=M.
'get_allocation_occurrence/2__0'(A, B, C) :- !,
	chr_pp_flag(late_allocation, off),
	B=0.
rule(A, B) :-
	'rule/2__0'(A, B, C).
'rule/2__0'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
	allocate_constraint(chr_translate:'rule/2__0'(A, B, C), C, rule(A, B), [A, B]),
	'rule/2__0__0'(D, A, B, C).
'rule/2__0__0'([], A, B, C) :-
	'rule/2__1'(A, B, C).
'rule/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    '$via1_multi_hash_occurrence/4-3'(C, N),
	    'chr sbag_member'(O, N),
	    O=suspension(P, Q, R, S, T, U, V, W, X, Y),
	    Q=mutable(active),
	    V==L,
	    W==M,
	    X==C,
	    'chr lock'(D),
	    'chr lock'(Y),
	    D=pragma(Z, ids(A1, B1), C1, D1, E1),
	    member(Y, A1),
	    'chr unlock'(D),
	    'chr unlock'(Y)
	->  remove_constraint_internal(A, F1, G1),
	    (   G1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(H1, I1, E, J1),
	    (   H1==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    K1 is M+1,
	    allocation_occurrence(L, K1),
	    (   E=suspension(L1, M1, N1, O1, P1, Q1, R1, S1),
		M1=mutable(active),
		O1=mutable(J1)
	    ->  'chr update_mutable'(inactive, M1),
		'rule/2__0__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__0__0'(B, C, D, E)
	).
'rule/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'rule/2__0'(A, B, C), C, rule(A, B), [A, B]),
	'rule/2__1'(A, B, C).
'rule/2__1'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
	'rule/2__1__0'(D, A, B, C).
'rule/2__1__0'([], A, B, C) :-
	'rule/2__2'(A, B, C).
'rule/2__1__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    '$via1_multi_hash_occurrence/4-3'(C, N),
	    'chr sbag_member'(O, N),
	    O=suspension(P, Q, R, S, T, U, V, W, X, Y),
	    Q=mutable(active),
	    V==L,
	    W==M,
	    X==C,
	    'chr lock'(D),
	    D=pragma(rule([Z|A1], B1, C1, true), D1, E1, F1, G1),
	    'chr unlock'(D)
	->  remove_constraint_internal(A, H1, I1),
	    (   I1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(J1, K1, E, L1),
	    (   J1==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    M1 is M+1,
	    allocation_occurrence(L, M1),
	    (   E=suspension(N1, O1, P1, Q1, R1, S1, T1, U1),
		O1=mutable(active),
		Q1=mutable(L1)
	    ->  'chr update_mutable'(inactive, O1),
		'rule/2__1__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__1__0'(B, C, D, E)
	).
'rule/2__1'(A, B, C) :-
	'rule/2__2'(A, B, C).
'rule/2__2'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
	'rule/2__2__0'(D, A, B, C).
'rule/2__2__0'([], A, B, C) :-
	'rule/2__3'(A, B, C).
'rule/2__2__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    '$via1_multi_hash_occurrence/4-3'(C, N),
	    'chr sbag_member'(O, N),
	    O=suspension(P, Q, R, S, T, U, V, W, X, Y),
	    Q=mutable(active),
	    V==L,
	    W==M,
	    X==C,
	    'chr lock'(D),
	    'chr lock'(L),
	    'chr lock'(M),
	    D=pragma(rule([Z|A1], B1, C1, D1), E1, F1, G1, H1),
	    \+((
		is_self_observer(L),
		ai_is_observed(L, M)
		)),
	    'chr unlock'(D),
	    'chr unlock'(L),
	    'chr unlock'(M)
	->  remove_constraint_internal(A, I1, J1),
	    (   J1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(K1, L1, E, M1),
	    (   K1==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    N1 is M+1,
	    allocation_occurrence(L, N1),
	    (   E=suspension(O1, P1, Q1, R1, S1, T1, U1, V1),
		P1=mutable(active),
		R1=mutable(M1)
	    ->  'chr update_mutable'(inactive, P1),
		'rule/2__2__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__2__0'(B, C, D, E)
	).
'rule/2__2'(A, B, C) :-
	'rule/2__3'(A, B, C).
'rule/2__3'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
	'rule/2__3__0'(D, A, B, C).
'rule/2__3__0'([], A, B, C) :-
	'rule/2__4'(A, B, C).
'rule/2__3__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    '$via1_multi_hash_occurrence/4-3'(C, N),
	    '$via1_multi_hash_least_occurrence/2-1'(C, O),
	    'chr sbag_member'(P, O),
	    P=suspension(Q, R, S, T, U, V, W, X),
	    R=mutable(active),
	    W==C,
	    X==[],
	    'chr sbag_member'(Y, N),
	    Y=suspension(Z, A1, B1, C1, D1, E1, F1, G1, H1, I1),
	    A1=mutable(active),
	    F1==L,
	    G1==M,
	    H1==C,
	    'chr lock'(D),
	    'chr lock'(L),
	    'chr lock'(M),
	    D=pragma(rule([], J1, K1, L1), M1, N1, O1, P1),
	    \+((
		is_self_observer(L),
		ai_is_observed(L, M)
		)),
	    'chr unlock'(D),
	    'chr unlock'(L),
	    'chr unlock'(M)
	->  remove_constraint_internal(A, Q1, R1),
	    (   R1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(S1, T1, E, U1),
	    (   S1==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    V1 is M+1,
	    allocation_occurrence(L, V1),
	    (   E=suspension(W1, X1, Y1, Z1, A2, B2, C2, D2),
		X1=mutable(active),
		Z1=mutable(U1)
	    ->  'chr update_mutable'(inactive, X1),
		'rule/2__3__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__3__0'(B, C, D, E)
	).
'rule/2__3'(A, B, C) :-
	'rule/2__4'(A, B, C).
'rule/2__4'(A, B, C) :-
	'$via1_multi_hash_least_occurrence/2-1'(A, D), !,
	'rule/2__4__0'(D, A, B, C).
'rule/2__4__0'([], A, B, C) :-
	'rule/2__5'(A, B, C).
'rule/2__4__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    nonvar(M),
	    M=[N|O],
	    '$via1_multi_hash_occurrence/4-34'(k(C, N), P),
	    'chr sbag_member'(Q, P),
	    Q=suspension(R, S, T, U, V, W, X, Y, Z, A1),
	    S=mutable(active),
	    Z==C,
	    A1==N,
	    '$via1_multi_hash_allocation_occurrence/2-1'(X, B1),
	    'chr sbag_member'(C1, B1),
	    C1=suspension(D1, E1, F1, G1, H1, I1, J1, K1),
	    E1=mutable(active),
	    J1==X,
	    K1>=Y,
	    'chr lock'(X),
	    \+may_trigger(X),
	    'chr unlock'(X)
	->  remove_constraint_internal(A, L1, M1),
	    (   M1==yes
	    ->  '$delete_from_store_least_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(N1, O1, E, P1),
	    (   N1==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    least_occurrence(C, O),
	    (   E=suspension(Q1, R1, S1, T1, U1, V1, W1, X1),
		R1=mutable(active),
		T1=mutable(P1)
	    ->  'chr update_mutable'(inactive, R1),
		'rule/2__4__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__4__0'(B, C, D, E)
	).
'rule/2__4'(A, B, C) :-
	'rule/2__5'(A, B, C).
'rule/2__5'(A, B, C) :-
	'$via1_multi_hash_least_occurrence/2-1'(A, D), !,
	'rule/2__5__0'(D, A, B, C).
'rule/2__5__0'([], A, B, C) :-
	'rule/2__6'(A, B, C).
'rule/2__5__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    nonvar(M),
	    M=[N|O],
	    '$via1_multi_hash_passive/2-12'(k(C, N), P),
	    (   'chr sbag_member'(Q, P),
		Q=suspension(R, S, T, U, V, W, X, Y),
		S=mutable(active),
		X==C,
		Y==N
	    ->  true
	    )
	->  remove_constraint_internal(A, Z, A1),
	    (   A1==yes
	    ->  '$delete_from_store_least_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(B1, C1, E, D1),
	    (   B1==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    least_occurrence(C, O),
	    (   E=suspension(E1, F1, G1, H1, I1, J1, K1, L1),
		F1=mutable(active),
		H1=mutable(D1)
	    ->  'chr update_mutable'(inactive, F1),
		'rule/2__5__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__5__0'(B, C, D, E)
	).
'rule/2__5'(A, B, C) :-
	'rule/2__6'(A, B, C).
'rule/2__6'(A, B, C) :-
	'chr novel_production'(C, 43),
	'chr lock'(B),
	B=pragma(rule([], D, E, F), ids([], G), H, I, J),
	'chr unlock'(B), !,
	'chr extend_history'(C, 43),
	activate_constraint(K, L, C, M),
	(   K==yes
	->  '$insert_in_store_rule/2'(C)
	;   true
	),
	least_occurrence(A, G),
	(   C=suspension(N, O, P, Q, R, S, T, U),
	    O=mutable(active),
	    Q=mutable(M)
	->  'chr update_mutable'(inactive, O),
	    'rule/2__7'(A, B, C)
	;   true
	).
'rule/2__6'(A, B, C) :-
	'rule/2__7'(A, B, C).
'rule/2__7'(A, B, C) :-
	'$via1_multi_hash_prev_guard_list/7-2'(A, D), !,
	'rule/2__7__0'(D, A, B, C).
'rule/2__7__0'([], A, B, C) :-
	'rule/2__8'(A, B, C).
'rule/2__7__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N, O, P, Q, R),
	    G=mutable(active),
	    M==C,
	    'chr lock'(D),
	    'chr lock'(C),
	    'chr lock'(N),
	    D=pragma(rule(S, T, U, V), W, X, Y, C),
	    S\==[],
	    append(S, T, Z),
	    make_head_matchings_explicit(Z, A1, B1),
	    term_variables(A1+N, C1),
	    hprolog:strip_attributes(C1, D1),
	    setof(E1, chr_translate:head_subset(A1, N, E1), F1),
	    hprolog:restore_attributes(C1, D1),
	    F1\=[],
	    'chr unlock'(D),
	    'chr unlock'(C),
	    'chr unlock'(N)
	->  remove_constraint_internal(A, G1, H1),
	    (   H1==yes
	    ->  '$delete_from_store_prev_guard_list/7'(A)
	    ;   true
	    ),
	    activate_constraint(I1, J1, E, K1),
	    (   I1==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    compute_derived_info(B1, F1, A1, Z, U, Q, N, R, L1, M1),
	    append(P, L1, N1),
	    list2conj(N1, O1),
	    conj2list(O1, P1),
	    append(M1, R, Q1),
	    list2conj(Q1, R1),
	    conj2list(R1, S1),
	    T1 is C-1,
	    prev_guard_list(L, T1, N, O, P1, Q, S1),
	    (   E=suspension(U1, V1, W1, X1, Y1, Z1, A2, B2),
		V1=mutable(active),
		X1=mutable(K1)
	    ->  'chr update_mutable'(inactive, V1),
		'rule/2__7__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__7__0'(B, C, D, E)
	).
'rule/2__7'(A, B, C) :-
	'rule/2__8'(A, B, C).
'rule/2__8'(A, B, C) :-
	'$via1_multi_hash_prev_guard_list/7-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M, N, O, P, Q, R),
	G=mutable(active),
	L==A,
	M==0,
	R==[],
	'chr lock'(B),
	'chr lock'(O),
	'chr lock'(A),
	'chr lock'(Q),
	'chr lock'(P),
	B=pragma(rule(S, T, O, U), V, W, X, A),
	O\==true,
	append(Q, P, Y),
	simplify_guard(O, U, Y, Z, A1),
	O\==Z,
	'chr unlock'(B),
	'chr unlock'(O),
	'chr unlock'(A),
	'chr unlock'(Q),
	'chr unlock'(P), !,
	remove_constraint_internal(E, B1, C1),
	(   C1==yes
	->  '$delete_from_store_prev_guard_list/7'(E)
	;   true
	),
	(   var(C)
	->  true
	;   remove_constraint_internal(C, D1, E1),
	    (   E1==yes
	    ->  '$delete_from_store_rule/2'(C)
	    ;   true
	    )
	),
	rule(A, pragma(rule(S, T, Z, A1), V, W, X, A)),
	prev_guard_list(A, 0, N, Z, P, Q, []).
'rule/2__8'(A, B, C) :-
	'$via1_multi_hash_prev_guard_list/7-1'(A, D), !,
	'rule/2__8__0'(D, A, B, C).
'rule/2__8__0'([], A, B, C) :-
	'rule/2__9'(A, B, C).
'rule/2__8__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N, O, P, Q, R),
	    G=mutable(active),
	    L==C,
	    M==0,
	    R==[],
	    chr_pp_flag(check_impossible_rules, on),
	    'chr lock'(D),
	    'chr lock'(O),
	    'chr lock'(C),
	    'chr lock'(Q),
	    'chr lock'(P),
	    D=pragma(rule(S, T, O, U), V, W, X, C),
	    append(Q, P, Y),
	    guard_entailment:entails_guard(Y, fail),
	    'chr unlock'(D),
	    'chr unlock'(O),
	    'chr unlock'(C),
	    'chr unlock'(Q),
	    'chr unlock'(P)
	->  remove_constraint_internal(A, Z, A1),
	    (   A1==yes
	    ->  '$delete_from_store_prev_guard_list/7'(A)
	    ;   true
	    ),
	    activate_constraint(B1, C1, E, D1),
	    (   B1==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    format('CHR compiler WARNING: heads will never match in ~@.\n', [format_rule(D)]),
	    format('    `-->  In the refined operational semantics (rules applied in textual order)\n', []),
	    format('          this rule will never fire! (given the declared types/modes)\n', []),
	    format('          Removing this redundant rule by making all its heads passive...\n', []),
	    format('          ... next warning is caused by this ...\n', []),
	    set_all_passive(C),
	    (   E=suspension(E1, F1, G1, H1, I1, J1, K1, L1),
		F1=mutable(active),
		H1=mutable(D1)
	    ->  'chr update_mutable'(inactive, F1),
		'rule/2__8__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__8__0'(B, C, D, E)
	).
'rule/2__8'(A, B, C) :-
	'rule/2__9'(A, B, C).
'rule/2__9'(A, B, C) :-
	'$via1_multi_hash_prev_guard_list/7-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M, N, O, P, Q, R),
	G=mutable(active),
	L==A,
	M==0,
	R==[],
	'chr lock'(B),
	'chr lock'(O),
	'chr lock'(A),
	'chr lock'(Q),
	'chr lock'(P),
	'chr lock'(N),
	B=pragma(rule(S, T, O, U), V, W, X, A),
	simplify_heads(Q, P, O, U, Y, Z),
	Y\==[],
	extract_variables(S, A1),
	extract_variables(T, B1),
	extract_variables(N, C1),
	replace_some_heads(A1, B1, C1, Y, D1, E1, O, U, F1),
	insert_variables(D1, S, G1),
	insert_variables(E1, T, H1),
	append(Z, F1, I1),
	list2conj(I1, J1),
	K1=pragma(rule(G1, H1, O, (J1, U)), V, W, X, A),
	(   S\==G1
	;   T\==H1
	),
	'chr unlock'(B),
	'chr unlock'(O),
	'chr unlock'(A),
	'chr unlock'(Q),
	'chr unlock'(P),
	'chr unlock'(N), !,
	(   var(C)
	->  true
	;   remove_constraint_internal(C, L1, M1),
	    (   M1==yes
	    ->  '$delete_from_store_rule/2'(C)
	    ;   true
	    )
	),
	rule(A, K1).
'rule/2__9'(A, B, C) :-
	'$via1_multi_hash_prev_guard_list/7-1'(A, D), !,
	'rule/2__9__0'(D, A, B, C).
'rule/2__9__0'([], A, B, C) :-
	'rule/2__10'(A, B, C).
'rule/2__9__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N, O, P, Q, R),
	    G=mutable(active),
	    L==C,
	    M==0,
	    R==[],
	    S=t(73, A, E),
	    'chr novel_production'(A, S),
	    'chr novel_production'(E, S),
	    chr_pp_flag(check_impossible_rules, on),
	    'chr lock'(D),
	    'chr lock'(O),
	    'chr lock'(C),
	    D=pragma(rule(T, U, O, V), W, X, Y, C),
	    conj2list(O, Z),
	    guard_entailment:entails_guard(Z, fail),
	    'chr unlock'(D),
	    'chr unlock'(O),
	    'chr unlock'(C)
	->  'chr extend_history'(E, S),
	    activate_constraint(A1, B1, E, C1),
	    (   A1==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    format('CHR compiler WARNING: guard will always fail in ~@.\n', [format_rule(D)]),
	    format('          Removing this redundant rule by making all its heads passive...\n', []),
	    format('          ... next warning is caused by this ...\n', []),
	    set_all_passive(C),
	    (   E=suspension(D1, E1, F1, G1, H1, I1, J1, K1),
		E1=mutable(active),
		G1=mutable(C1)
	    ->  'chr update_mutable'(inactive, E1),
		'rule/2__9__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__9__0'(B, C, D, E)
	).
'rule/2__9'(A, B, C) :-
	'rule/2__10'(A, B, C).
'rule/2__10'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', D), !,
	'rule/2__10__0'(D, A, B, C).
'rule/2__10__0'([], A, B, C) :-
	'rule/2__11'(A, B, C).
'rule/2__10__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L),
	    G=mutable(active),
	    chr_pp_flag(occurrence_subsumption, on),
	    '$via1_multi_hash_occurrence/4-3'(C, M),
	    '$via1_multi_hash_prev_guard_list/7-1'(C, N),
	    '$via1_multi_hash_occurrence/4-3'(C, O),
	    'chr sbag_member'(P, O),
	    P=suspension(Q, R, S, T, U, V, W, X, Y, Z),
	    R=mutable(active),
	    Y==C,
	    'chr sbag_member'(A1, N),
	    A1=suspension(B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1),
	    C1=mutable(active),
	    H1==C,
	    I1==0,
	    N1==[],
	    'chr sbag_member'(O1, M),
	    O1=suspension(P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1),
	    Q1=mutable(active),
	    O1\==P,
	    V1==W,
	    X1==C,
	    X<W1,
	    'chr lock'(D),
	    'chr lock'(C),
	    'chr lock'(W),
	    'chr lock'(L),
	    D=pragma(rule(Z1, A2, B2, C2), D2, E2, F2, C),
	    Z1\==[],
	    \+memberchk_eq(W, L),
	    'chr unlock'(D),
	    'chr unlock'(C),
	    'chr unlock'(W),
	    'chr unlock'(L)
	->  remove_constraint_internal(A, G2, H2),
	    (   H2==yes
	    ->  '$delete_from_store_multiple_occ_constraints_checked/1'(A)
	    ;   true
	    ),
	    activate_constraint(I2, J2, E, K2),
	    (   I2==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    first_occ_in_rule(C, W, X, Z),
	    multiple_occ_constraints_checked([W|L]),
	    (   E=suspension(L2, M2, N2, O2, P2, Q2, R2, S2),
		M2=mutable(active),
		O2=mutable(K2)
	    ->  'chr update_mutable'(inactive, M2),
		'rule/2__10__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__10__0'(B, C, D, E)
	).
'rule/2__10'(A, B, C) :-
	'rule/2__11'(A, B, C).
'rule/2__11'(A, B, C) :-
	'$via1_multi_hash_passive/2-1'(A, D), !,
	'rule/2__11__0'(D, A, B, C).
'rule/2__11__0'([], A, B, C) :-
	'rule/2__12'(A, B, C).
'rule/2__11__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    N=t(91, E, A),
	    'chr novel_production'(E, N),
	    'chr novel_production'(A, N),
	    'chr lock'(D),
	    'chr lock'(M),
	    'chr lock'(C),
	    D=pragma(rule(O, P, Q, R), ids([M|S], T), U, V, C),
	    'chr unlock'(D),
	    'chr unlock'(M),
	    'chr unlock'(C)
	->  'chr extend_history'(E, N),
	    activate_constraint(W, X, E, Y),
	    (   W==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    append(S, T, Z),
	    check_all_passive(C, Z),
	    (   E=suspension(A1, B1, C1, D1, E1, F1, G1, H1),
		B1=mutable(active),
		D1=mutable(Y)
	    ->  'chr update_mutable'(inactive, B1),
		'rule/2__11__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__11__0'(B, C, D, E)
	).
'rule/2__11'(A, B, C) :-
	'rule/2__12'(A, B, C).
'rule/2__12'(A, B, C) :-
	'$via1_multi_hash_passive/2-1'(A, D), !,
	'rule/2__12__0'(D, A, B, C).
'rule/2__12__0'([], A, B, C) :-
	'rule/2__13'(A, B, C).
'rule/2__12__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    N=t(92, E, A),
	    'chr novel_production'(E, N),
	    'chr novel_production'(A, N),
	    'chr lock'(D),
	    'chr lock'(M),
	    'chr lock'(C),
	    D=pragma(rule(O, P, Q, R), ids([], [M|S]), T, U, C),
	    'chr unlock'(D),
	    'chr unlock'(M),
	    'chr unlock'(C)
	->  'chr extend_history'(E, N),
	    activate_constraint(V, W, E, X),
	    (   V==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    check_all_passive(C, S),
	    (   E=suspension(Y, Z, A1, B1, C1, D1, E1, F1),
		Z=mutable(active),
		B1=mutable(X)
	    ->  'chr update_mutable'(inactive, Z),
		'rule/2__12__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__12__0'(B, C, D, E)
	).
'rule/2__12'(A, B, C) :-
	'rule/2__13'(A, B, C).
'rule/2__13'(A, B, C) :-
	'$via1_multi_hash_check_all_passive/2-1'(A, D), !,
	'rule/2__13__0'(D, A, B, C).
'rule/2__13__0'([], A, B, C) :-
	'rule/2__14'(A, B, C).
'rule/2__13__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    M==[]
	->  remove_constraint_internal(A, N, O),
	    (   O==yes
	    ->  '$delete_from_store_check_all_passive/2'(A)
	    ;   true
	    ),
	    activate_constraint(P, Q, E, R),
	    (   P==yes
	    ->  '$insert_in_store_rule/2'(E)
	    ;   true
	    ),
	    format('CHR compiler WARNING: all heads passive in ~@.\n', [format_rule(D)]),
	    format('~w\n', [D]),
	    format('    `-->  Rule never fires. Check your program, this might be a bug!\n', []),
	    (   E=suspension(S, T, U, V, W, X, Y, Z),
		T=mutable(active),
		V=mutable(R)
	    ->  'chr update_mutable'(inactive, T),
		'rule/2__13__0'(B, C, D, E)
	    ;   true
	    )
	;   'rule/2__13__0'(B, C, D, E)
	).
'rule/2__13'(A, B, C) :-
	'rule/2__14'(A, B, C).
'rule/2__14'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', D), !,
	'rule/2__14__0'(D, A, B, C).
'rule/2__14__0'([], A, B, C) :-
	'rule/2__15'(A, B, C).
'rule/2__14__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L),
	    G=mutable(active),
	    '$via1_multi_hash_occurrence/4-3'(C, M)
	->  'rule/2__14__1'(M, L, A, B, C, D, E)
	;   'rule/2__14__0'(B, C, D, E)
	).
'rule/2__14__1'([], A, B, C, D, E, F) :-
	'rule/2__14__0'(C, D, E, F).
'rule/2__14__1'([A|B], C, D, E, F, G, H) :-
	(   A=suspension(I, J, K, L, M, N, O, P, Q, R),
	    J=mutable(active),
	    Q==F,
	    nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', S)
	->  'rule/2__14__2'(S, O, P, R, A, B, C, D, E, F, G, H)
	;   'rule/2__14__1'(B, C, D, E, F, G, H)
	).
'rule/2__14__2'([], A, B, C, D, E, F, G, H, I, J, K) :-
	'rule/2__14__1'(E, F, G, H, I, J, K).
'rule/2__14__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
	(   A=suspension(N, O, P, Q, R, S, T),
	    O=mutable(active),
	    nonvar(T),
	    T=odom(U, V),
	    nonvar(U),
	    U=occ(W, X),
	    W==C,
	    X==D,
	    Y=t(140, I, F, A, M),
	    'chr novel_production'(I, Y),
	    'chr novel_production'(F, Y),
	    'chr novel_production'(A, Y),
	    'chr novel_production'(M, Y),
	    'chr lock'(L),
	    'chr lock'(E),
	    L=pragma(rule(Z, A1, B1, C1), ids(D1, E1), F1, G1, H1),
	    memberchk_eq(E, D1),
	    'chr unlock'(L),
	    'chr unlock'(E)
	->  'chr extend_history'(M, Y),
	    activate_constraint(I1, J1, M, K1),
	    (   I1==yes
	    ->  '$insert_in_store_rule/2'(M)
	    ;   true
	    ),
	    select2(E, L1, D1, Z, M1, N1),
	    ai_observation_abstract_constraints(N1, H, O1),
	    ai_observation_observe_list(odom([], V), O1, odom([], P1)),
	    ai_observation_abstract_constraints(A1, H, Q1),
	    ai_observation_observe_list(odom([], P1), Q1, odom([], R1)),
	    ai_observation_abstract_goal(C1, H, S1),
	    call_pattern(odom(S1, R1)),
	    T1 is D+1,
	    U1=odom(occ(C, T1), V),
	    call_pattern(U1),
	    depends_on_as(odom(occ(C, D), V), odom(S1, R1), U1),
	    (   M=suspension(V1, W1, X1, Y1, Z1, A2, B2, C2),
		W1=mutable(active),
		Y1=mutable(K1)
	    ->  'chr update_mutable'(inactive, W1),
		'rule/2__14__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	    ;   true
	    )
	;   'rule/2__14__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	).
'rule/2__14'(A, B, C) :-
	'rule/2__15'(A, B, C).
'rule/2__15'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', D), !,
	'rule/2__15__0'(D, A, B, C).
'rule/2__15__0'([], A, B, C) :-
	'rule/2__16'(A, B, C).
'rule/2__15__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L),
	    G=mutable(active),
	    '$via1_multi_hash_occurrence/4-3'(C, M)
	->  'rule/2__15__1'(M, L, A, B, C, D, E)
	;   'rule/2__15__0'(B, C, D, E)
	).
'rule/2__15__1'([], A, B, C, D, E, F) :-
	'rule/2__15__0'(C, D, E, F).
'rule/2__15__1'([A|B], C, D, E, F, G, H) :-
	(   A=suspension(I, J, K, L, M, N, O, P, Q, R),
	    J=mutable(active),
	    Q==F,
	    nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', S)
	->  'rule/2__15__2'(S, O, P, R, A, B, C, D, E, F, G, H)
	;   'rule/2__15__1'(B, C, D, E, F, G, H)
	).
'rule/2__15__2'([], A, B, C, D, E, F, G, H, I, J, K) :-
	'rule/2__15__1'(E, F, G, H, I, J, K).
'rule/2__15__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
	(   A=suspension(N, O, P, Q, R, S, T),
	    O=mutable(active),
	    nonvar(T),
	    T=odom(U, V),
	    nonvar(U),
	    U=occ(W, X),
	    W==C,
	    X==D,
	    Y=t(142, I, F, A, M),
	    'chr novel_production'(I, Y),
	    'chr novel_production'(F, Y),
	    'chr novel_production'(A, Y),
	    'chr novel_production'(M, Y),
	    'chr lock'(L),
	    'chr lock'(E),
	    L=pragma(rule(Z, A1, B1, C1), ids(D1, E1), F1, G1, H1),
	    memberchk_eq(E, E1),
	    'chr unlock'(L),
	    'chr unlock'(E)
	->  'chr extend_history'(M, Y),
	    activate_constraint(I1, J1, M, K1),
	    (   I1==yes
	    ->  '$insert_in_store_rule/2'(M)
	    ;   true
	    ),
	    select2(E, L1, E1, A1, M1, N1),
	    ai_observation_abstract_constraints(N1, H, O1),
	    ai_observation_observe_list(odom([], V), O1, odom([], P1)),
	    ai_observation_abstract_constraints(Z, H, Q1),
	    ai_observation_observe_list(odom([], P1), Q1, odom([], R1)),
	    ord_add_element(R1, C, S1),
	    ai_observation_abstract_goal(C1, H, T1),
	    call_pattern(odom(T1, S1)),
	    (   ord_memberchk(C, R1)
	    ->  U1=no
	    ;   U1=yes
	    ),
	    V1 is D+1,
	    W1=odom(occ(C, V1), V),
	    call_pattern(W1),
	    depends_on_ap(odom(occ(C, D), V), odom(T1, S1), W1, U1),
	    (   M=suspension(X1, Y1, Z1, A2, B2, C2, D2, E2),
		Y1=mutable(active),
		A2=mutable(K1)
	    ->  'chr update_mutable'(inactive, Y1),
		'rule/2__15__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	    ;   true
	    )
	;   'rule/2__15__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	).
'rule/2__15'(A, B, C) :-
	'rule/2__16'(A, B, C).
'rule/2__16'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_rule/2'(C)
	;   true
	).
get_rule(A, B) :-
	'get_rule/2__0'(A, B, C).
'get_rule/2__0'(A, B, C) :-
	'$via1_multi_hash_rule/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A, !,
	B=M.
'get_rule/2__0'(A, B, C) :- !,
	fail.
least_occurrence(A, B) :-
	'least_occurrence/2__0'(A, B, C).
'least_occurrence/2__0'(A, B, C) :-
	B==[],
	nb_getval('$chr_store_global_ground_chr_translate:allocation_occurrence/2', D), !,
	allocate_constraint(chr_translate:'least_occurrence/2__0'(A, B, C), C, least_occurrence(A, B), [A, B]),
	'least_occurrence/2__0__0'(D, A, B, C).
'least_occurrence/2__0__0'([], A, B, C) :-
	'least_occurrence/2__1'(A, B, C).
'least_occurrence/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    '$via1_multi_hash_occurrence/4-3'(C, N),
	    '$via1_multi_hash_rule/2-1'(C, O),
	    'chr sbag_member'(P, O),
	    P=suspension(Q, R, S, T, U, V, W, X),
	    R=mutable(active),
	    W==C,
	    'chr sbag_member'(Y, N),
	    Y=suspension(Z, A1, B1, C1, D1, E1, F1, G1, H1, I1),
	    A1=mutable(active),
	    F1==L,
	    G1==M,
	    H1==C,
	    'chr lock'(X),
	    'chr lock'(L),
	    'chr lock'(M),
	    X=pragma(rule([], J1, K1, L1), M1, N1, O1, P1),
	    \+((
		is_self_observer(L),
		ai_is_observed(L, M)
		)),
	    'chr unlock'(X),
	    'chr unlock'(L),
	    'chr unlock'(M)
	->  remove_constraint_internal(A, Q1, R1),
	    (   R1==yes
	    ->  '$delete_from_store_allocation_occurrence/2'(A)
	    ;   true
	    ),
	    activate_constraint(S1, T1, E, U1),
	    (   S1==yes
	    ->  '$insert_in_store_least_occurrence/2'(E)
	    ;   true
	    ),
	    V1 is M+1,
	    allocation_occurrence(L, V1),
	    (   E=suspension(W1, X1, Y1, Z1, A2, B2, C2, D2),
		X1=mutable(active),
		Z1=mutable(U1)
	    ->  'chr update_mutable'(inactive, X1),
		'least_occurrence/2__0__0'(B, C, D, E)
	    ;   true
	    )
	;   'least_occurrence/2__0__0'(B, C, D, E)
	).
'least_occurrence/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'least_occurrence/2__0'(A, B, C), C, least_occurrence(A, B), [A, B]),
	'least_occurrence/2__1'(A, B, C).
'least_occurrence/2__1'(A, B, C) :-
	nonvar(B),
	B=[D|E],
	'$via1_multi_hash_occurrence/4-34'(k(A, D), F),
	'$via1_multi_hash_rule/2-1'(A, G),
	'chr sbag_member'(H, G),
	H=suspension(I, J, K, L, M, N, O, P),
	J=mutable(active),
	O==A,
	'chr sbag_member'(Q, F),
	Q=suspension(R, S, T, U, V, W, X, Y, Z, A1),
	S=mutable(active),
	Z==A,
	A1==D,
	'$via1_multi_hash_allocation_occurrence/2-1'(X, B1),
	'chr sbag_member'(C1, B1),
	C1=suspension(D1, E1, F1, G1, H1, I1, J1, K1),
	E1=mutable(active),
	J1==X,
	K1>=Y,
	'chr lock'(X),
	\+may_trigger(X),
	'chr unlock'(X), !,
	(   var(C)
	->  true
	;   remove_constraint_internal(C, L1, M1),
	    (   M1==yes
	    ->  '$delete_from_store_least_occurrence/2'(C)
	    ;   true
	    )
	),
	least_occurrence(A, E).
'least_occurrence/2__1'(A, B, C) :-
	nonvar(B),
	B=[D|E],
	'$via1_multi_hash_passive/2-12'(k(A, D), F),
	'$via1_multi_hash_rule/2-1'(A, G),
	'chr sbag_member'(H, G),
	H=suspension(I, J, K, L, M, N, O, P),
	J=mutable(active),
	O==A,
	(   'chr sbag_member'(Q, F),
	    Q=suspension(R, S, T, U, V, W, X, Y),
	    S=mutable(active),
	    X==A,
	    Y==D
	->  true
	), !,
	(   var(C)
	->  true
	;   remove_constraint_internal(C, Z, A1),
	    (   A1==yes
	    ->  '$delete_from_store_least_occurrence/2'(C)
	    ;   true
	    )
	),
	least_occurrence(A, E).
'least_occurrence/2__1'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_least_occurrence/2'(C)
	;   true
	).
is_least_occurrence(A) :-
	'is_least_occurrence/1__0'(A, B).
'is_least_occurrence/1__0'(A, B) :-
	'$via1_multi_hash_least_occurrence/2-1'(A, C),
	'chr sbag_member'(D, C),
	D=suspension(E, F, G, H, I, J, K, L),
	F=mutable(active),
	K==A,
	L==[], !.
'is_least_occurrence/1__0'(A, B) :- !,
	fail.
constraint_index(A, B) :-
	'constraint_index/2__0'(A, B, C).
'constraint_index/2__0'(A, B, C) :-
	insert_constraint_internal(D, E, C, chr_translate:'constraint_index/2__0'(A, B, C), constraint_index(A, B), [A, B]),
	'$insert_in_store_constraint_index/2'(C).
get_constraint_index(A, B) :-
	'get_constraint_index/2__0'(A, B, C).
'get_constraint_index/2__0'(A, B, C) :-
	'$via1_multi_hash_constraint_index/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A, !,
	B=M.
'get_constraint_index/2__0'(A, B, C) :- !,
	fail.
max_constraint_index(A) :-
	'max_constraint_index/1__0'(A, B).
'max_constraint_index/1__0'(A, B) :-
	insert_constraint_internal(C, D, B, chr_translate:'max_constraint_index/1__0'(A, B), max_constraint_index(A), [A]),
	'$insert_in_store_max_constraint_index/1'(B).
get_max_constraint_index(A) :-
	'get_max_constraint_index/1__0'(A, B).
'get_max_constraint_index/1__0'(A, B) :-
	nb_getval('$chr_store_global_ground_chr_translate:max_constraint_index/1', C),
	'chr sbag_member'(D, C),
	D=suspension(E, F, G, H, I, J, K),
	F=mutable(active), !,
	A=K.
'get_max_constraint_index/1__0'(A, B) :- !,
	A=0.
observes(A, B) :-
	'observes/2__0'(A, B, C).
'observes/2__0'(A, B, C) :-
	'$via1_multi_hash_observes/2-12'(k(A, B), D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A,
	    M==B
	->  true
	), !.
'observes/2__0'(A, B, C) :-
	'$via1_multi_hash_spawns_observer/2-2'(A, D), !,
	allocate_constraint(chr_translate:'observes/2__0'(A, B, C), C, observes(A, B), [A, B]),
	'observes/2__0__0'(D, A, B, C).
'observes/2__0__0'([], A, B, C) :-
	'observes/2__1'(A, B, C).
'observes/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    M==C,
	    N=t(57, A, E),
	    'chr novel_production'(A, N),
	    'chr novel_production'(E, N)
	->  'chr extend_history'(E, N),
	    activate_constraint(O, P, E, Q),
	    (   O==yes
	    ->  '$insert_in_store_observes/2'(E)
	    ;   true
	    ),
	    observes_indirectly(L, D),
	    (   E=suspension(R, S, T, U, V, W, X, Y),
		S=mutable(active),
		U=mutable(Q)
	    ->  'chr update_mutable'(inactive, S),
		'observes/2__0__0'(B, C, D, E)
	    ;   true
	    )
	;   'observes/2__0__0'(B, C, D, E)
	).
'observes/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'observes/2__0'(A, B, C), C, observes(A, B), [A, B]),
	'observes/2__1'(A, B, C).
'observes/2__1'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_observes/2'(C)
	;   true
	).
spawns_observer(A, B) :-
	'spawns_observer/2__0'(A, B, C).
'spawns_observer/2__0'(A, B, C) :-
	'$via1_multi_hash_spawns_observer/2-12'(k(A, B), D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A,
	    M==B
	->  true
	), !.
'spawns_observer/2__0'(A, B, C) :-
	'$via1_multi_hash_observes/2-1'(B, D), !,
	allocate_constraint(chr_translate:'spawns_observer/2__0'(A, B, C), C, spawns_observer(A, B), [A, B]),
	'spawns_observer/2__0__0'(D, A, B, C).
'spawns_observer/2__0__0'([], A, B, C) :-
	'spawns_observer/2__1'(A, B, C).
'spawns_observer/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==D,
	    N=t(57, E, A),
	    'chr novel_production'(E, N),
	    'chr novel_production'(A, N)
	->  'chr extend_history'(E, N),
	    activate_constraint(O, P, E, Q),
	    (   O==yes
	    ->  '$insert_in_store_spawns_observer/2'(E)
	    ;   true
	    ),
	    observes_indirectly(C, M),
	    (   E=suspension(R, S, T, U, V, W, X, Y),
		S=mutable(active),
		U=mutable(Q)
	    ->  'chr update_mutable'(inactive, S),
		'spawns_observer/2__0__0'(B, C, D, E)
	    ;   true
	    )
	;   'spawns_observer/2__0__0'(B, C, D, E)
	).
'spawns_observer/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'spawns_observer/2__0'(A, B, C), C, spawns_observer(A, B), [A, B]),
	'spawns_observer/2__1'(A, B, C).
'spawns_observer/2__1'(A, B, C) :-
	'$via1_multi_hash_observes_indirectly/2-1'(B, D), !,
	'spawns_observer/2__1__0'(D, A, B, C).
'spawns_observer/2__1__0'([], A, B, C) :-
	'spawns_observer/2__2'(A, B, C).
'spawns_observer/2__1__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==D,
	    N=t(58, E, A),
	    'chr novel_production'(E, N),
	    'chr novel_production'(A, N)
	->  'chr extend_history'(E, N),
	    activate_constraint(O, P, E, Q),
	    (   O==yes
	    ->  '$insert_in_store_spawns_observer/2'(E)
	    ;   true
	    ),
	    observes_indirectly(C, M),
	    (   E=suspension(R, S, T, U, V, W, X, Y),
		S=mutable(active),
		U=mutable(Q)
	    ->  'chr update_mutable'(inactive, S),
		'spawns_observer/2__1__0'(B, C, D, E)
	    ;   true
	    )
	;   'spawns_observer/2__1__0'(B, C, D, E)
	).
'spawns_observer/2__1'(A, B, C) :-
	'spawns_observer/2__2'(A, B, C).
'spawns_observer/2__2'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_spawns_observer/2'(C)
	;   true
	).
observes_indirectly(A, B) :-
	'observes_indirectly/2__0'(A, B, C).
'observes_indirectly/2__0'(A, B, C) :-
	'$via1_multi_hash_observes_indirectly/2-12'(k(A, B), D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A,
	    M==B
	->  true
	), !.
'observes_indirectly/2__0'(A, B, C) :-
	'$via1_multi_hash_spawns_observer/2-2'(A, D), !,
	allocate_constraint(chr_translate:'observes_indirectly/2__0'(A, B, C), C, observes_indirectly(A, B), [A, B]),
	'observes_indirectly/2__0__0'(D, A, B, C).
'observes_indirectly/2__0__0'([], A, B, C) :-
	'observes_indirectly/2__1'(A, B, C).
'observes_indirectly/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    M==C,
	    N=t(58, A, E),
	    'chr novel_production'(A, N),
	    'chr novel_production'(E, N)
	->  'chr extend_history'(E, N),
	    activate_constraint(O, P, E, Q),
	    (   O==yes
	    ->  '$insert_in_store_observes_indirectly/2'(E)
	    ;   true
	    ),
	    observes_indirectly(L, D),
	    (   E=suspension(R, S, T, U, V, W, X, Y),
		S=mutable(active),
		U=mutable(Q)
	    ->  'chr update_mutable'(inactive, S),
		'observes_indirectly/2__0__0'(B, C, D, E)
	    ;   true
	    )
	;   'observes_indirectly/2__0__0'(B, C, D, E)
	).
'observes_indirectly/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'observes_indirectly/2__0'(A, B, C), C, observes_indirectly(A, B), [A, B]),
	'observes_indirectly/2__1'(A, B, C).
'observes_indirectly/2__1'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_observes_indirectly/2'(C)
	;   true
	).
is_self_observer(A) :-
	'is_self_observer/1__0'(A, B).
'is_self_observer/1__0'(A, B) :-
	'$via1_multi_hash_observes_indirectly/2-12'(k(A, A), C),
	'chr sbag_member'(D, C),
	D=suspension(E, F, G, H, I, J, K, L),
	F=mutable(active),
	K==A,
	L==A, !.
'is_self_observer/1__0'(A, B) :- !,
	chr_pp_flag(observation_analysis, off).
generate_indexed_variables_clause(A, B) :-
	'generate_indexed_variables_clause/2__0'(A, B, C).
'generate_indexed_variables_clause/2__0'(A, B, C) :-
	nonvar(A),
	A=D/E,
	nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', F),
	(   'chr sbag_member'(G, F),
	    G=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    nonvar(N),
	    N=P/Q,
	    P==D,
	    Q==E
	->  true
	), !,
	functor(R, D, E),
	R=..[S|T],
	create_indexed_variables_body(T, O, U, 1, D/E, V, W),
	(   V==empty
	->  X= (U=[])
	;   W==0
	->  X=term_variables(Y, U)
	;   V=X
	),
	B= ('$indexed_variables'(Y, U):-Y=R, X).
'generate_indexed_variables_clause/2__0'(A, B, C) :- !,
	format('ERROR: generate_indexed_variables_clause: missing mode info for ~w\n', [A]),
	fail.
prev_guard_list(A, B, C, D, E, F, G) :-
	'prev_guard_list/7__0'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
	'$via1_multi_hash_rule/2-1'(B, I),
	'chr sbag_member'(J, I),
	J=suspension(K, L, M, N, O, P, Q, R),
	L=mutable(active),
	Q==B,
	'chr lock'(R),
	'chr lock'(B),
	'chr lock'(C),
	R=pragma(rule(S, T, U, V), W, X, Y, B),
	S\==[],
	append(S, T, Z),
	make_head_matchings_explicit(Z, A1, B1),
	term_variables(A1+C, C1),
	hprolog:strip_attributes(C1, D1),
	setof(E1, chr_translate:head_subset(A1, C, E1), F1),
	hprolog:restore_attributes(C1, D1),
	F1\=[],
	'chr unlock'(R),
	'chr unlock'(B),
	'chr unlock'(C), !,
	compute_derived_info(B1, F1, A1, Z, U, F, C, G, G1, H1),
	append(E, G1, I1),
	list2conj(I1, J1),
	conj2list(J1, K1),
	append(H1, G, L1),
	list2conj(L1, M1),
	conj2list(M1, N1),
	O1 is B-1,
	prev_guard_list(A, O1, C, D, K1, F, N1).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
	B>0, !,
	I is B-1,
	prev_guard_list(A, I, C, D, E, F, G).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
	B==0,
	G\==[], !,
	add_type_information_(C, G, I),
	conj2list(I, J),
	term_variables(C, K),
	append([chr_pp_headvariables(K)|J], E, L),
	list2conj(L, M),
	conj2list(M, N),
	prev_guard_list(A, 0, C, D, N, F, []).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
	B==0,
	G==[],
	'$via1_multi_hash_rule/2-1'(A, I),
	'chr sbag_member'(J, I),
	J=suspension(K, L, M, N, O, P, Q, R),
	L=mutable(active),
	Q==A,
	'chr lock'(R),
	'chr lock'(D),
	'chr lock'(A),
	'chr lock'(F),
	'chr lock'(E),
	R=pragma(rule(S, T, D, U), V, W, X, A),
	D\==true,
	append(F, E, Y),
	simplify_guard(D, U, Y, Z, A1),
	D\==Z,
	'chr unlock'(R),
	'chr unlock'(D),
	'chr unlock'(A),
	'chr unlock'(F),
	'chr unlock'(E), !,
	remove_constraint_internal(J, B1, C1),
	(   C1==yes
	->  '$delete_from_store_rule/2'(J)
	;   true
	),
	rule(A, pragma(rule(S, T, Z, A1), V, W, X, A)),
	prev_guard_list(A, 0, C, Z, E, F, []).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
	B==0,
	G==[],
	chr_pp_flag(check_impossible_rules, on),
	'$via1_multi_hash_rule/2-1'(A, I),
	'chr sbag_member'(J, I),
	J=suspension(K, L, M, N, O, P, Q, R),
	L=mutable(active),
	Q==A,
	'chr lock'(R),
	'chr lock'(D),
	'chr lock'(A),
	'chr lock'(F),
	'chr lock'(E),
	R=pragma(rule(S, T, D, U), V, W, X, A),
	append(F, E, Y),
	guard_entailment:entails_guard(Y, fail),
	'chr unlock'(R),
	'chr unlock'(D),
	'chr unlock'(A),
	'chr unlock'(F),
	'chr unlock'(E), !,
	format('CHR compiler WARNING: heads will never match in ~@.\n', [format_rule(R)]),
	format('    `-->  In the refined operational semantics (rules applied in textual order)\n', []),
	format('          this rule will never fire! (given the declared types/modes)\n', []),
	format('          Removing this redundant rule by making all its heads passive...\n', []),
	format('          ... next warning is caused by this ...\n', []),
	set_all_passive(A).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
	B==0,
	G==[],
	'$via1_multi_hash_rule/2-1'(A, I), !,
	allocate_constraint(chr_translate:'prev_guard_list/7__0'(A, B, C, D, E, F, G, H), H, prev_guard_list(A, B, C, D, E, F, G), [A, B, C, D, E, F, G]),
	'prev_guard_list/7__0__0'(I, A, B, C, D, E, F, G, H).
'prev_guard_list/7__0__0'([], A, B, C, D, E, F, G, H) :-
	'prev_guard_list/7__1'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__0__0'([A|B], C, D, E, F, G, H, I, J) :-
	(   A=suspension(K, L, M, N, O, P, Q, R),
	    L=mutable(active),
	    Q==C,
	    'chr lock'(R),
	    'chr lock'(F),
	    'chr lock'(C),
	    'chr lock'(H),
	    'chr lock'(G),
	    'chr lock'(E),
	    R=pragma(rule(S, T, F, U), V, W, X, C),
	    simplify_heads(H, G, F, U, Y, Z),
	    Y\==[],
	    extract_variables(S, A1),
	    extract_variables(T, B1),
	    extract_variables(E, C1),
	    replace_some_heads(A1, B1, C1, Y, D1, E1, F, U, F1),
	    insert_variables(D1, S, G1),
	    insert_variables(E1, T, H1),
	    append(Z, F1, I1),
	    list2conj(I1, J1),
	    K1=pragma(rule(G1, H1, F, (J1, U)), V, W, X, C),
	    (   S\==G1
	    ;   T\==H1
	    ),
	    'chr unlock'(R),
	    'chr unlock'(F),
	    'chr unlock'(C),
	    'chr unlock'(H),
	    'chr unlock'(G),
	    'chr unlock'(E)
	->  remove_constraint_internal(A, L1, M1),
	    (   M1==yes
	    ->  '$delete_from_store_rule/2'(A)
	    ;   true
	    ),
	    activate_constraint(N1, O1, J, P1),
	    (   N1==yes
	    ->  '$insert_in_store_prev_guard_list/7'(J)
	    ;   true
	    ),
	    rule(C, K1),
	    (   J=suspension(Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2),
		R1=mutable(active),
		T1=mutable(P1)
	    ->  'chr update_mutable'(inactive, R1),
		'prev_guard_list/7__0__0'(B, C, D, E, F, G, H, I, J)
	    ;   true
	    )
	;   'prev_guard_list/7__0__0'(B, C, D, E, F, G, H, I, J)
	).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
	allocate_constraint(chr_translate:'prev_guard_list/7__0'(A, B, C, D, E, F, G, H), H, prev_guard_list(A, B, C, D, E, F, G), [A, B, C, D, E, F, G]),
	'prev_guard_list/7__1'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__1'(A, B, C, D, E, F, G, H) :-
	B==0,
	G==[],
	'$via1_multi_hash_rule/2-1'(A, I), !,
	'prev_guard_list/7__1__0'(I, A, B, C, D, E, F, G, H).
'prev_guard_list/7__1__0'([], A, B, C, D, E, F, G, H) :-
	'prev_guard_list/7__2'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__1__0'([A|B], C, D, E, F, G, H, I, J) :-
	(   A=suspension(K, L, M, N, O, P, Q, R),
	    L=mutable(active),
	    Q==C,
	    S=t(73, J, A),
	    'chr novel_production'(J, S),
	    'chr novel_production'(A, S),
	    chr_pp_flag(check_impossible_rules, on),
	    'chr lock'(R),
	    'chr lock'(F),
	    'chr lock'(C),
	    R=pragma(rule(T, U, F, V), W, X, Y, C),
	    conj2list(F, Z),
	    guard_entailment:entails_guard(Z, fail),
	    'chr unlock'(R),
	    'chr unlock'(F),
	    'chr unlock'(C)
	->  'chr extend_history'(J, S),
	    activate_constraint(A1, B1, J, C1),
	    (   A1==yes
	    ->  '$insert_in_store_prev_guard_list/7'(J)
	    ;   true
	    ),
	    format('CHR compiler WARNING: guard will always fail in ~@.\n', [format_rule(R)]),
	    format('          Removing this redundant rule by making all its heads passive...\n', []),
	    format('          ... next warning is caused by this ...\n', []),
	    set_all_passive(C),
	    (   J=suspension(D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1),
		E1=mutable(active),
		G1=mutable(C1)
	    ->  'chr update_mutable'(inactive, E1),
		'prev_guard_list/7__1__0'(B, C, D, E, F, G, H, I, J)
	    ;   true
	    )
	;   'prev_guard_list/7__1__0'(B, C, D, E, F, G, H, I, J)
	).
'prev_guard_list/7__1'(A, B, C, D, E, F, G, H) :-
	'prev_guard_list/7__2'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__2'(A, B, C, D, E, F, G, H) :-
	B==0,
	G==[],
	nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', I), !,
	'prev_guard_list/7__2__0'(I, A, B, C, D, E, F, G, H).
'prev_guard_list/7__2__0'([], A, B, C, D, E, F, G, H) :-
	'prev_guard_list/7__3'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__2__0'([A|B], C, D, E, F, G, H, I, J) :-
	(   A=suspension(K, L, M, N, O, P, Q),
	    L=mutable(active),
	    chr_pp_flag(occurrence_subsumption, on),
	    '$via1_multi_hash_occurrence/4-3'(C, R),
	    '$via1_multi_hash_rule/2-1'(C, S),
	    '$via1_multi_hash_occurrence/4-3'(C, T),
	    'chr sbag_member'(U, T),
	    U=suspension(V, W, X, Y, Z, A1, B1, C1, D1, E1),
	    W=mutable(active),
	    D1==C,
	    'chr sbag_member'(F1, S),
	    F1=suspension(G1, H1, I1, J1, K1, L1, M1, N1),
	    H1=mutable(active),
	    M1==C,
	    'chr sbag_member'(O1, R),
	    O1=suspension(P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1),
	    Q1=mutable(active),
	    O1\==U,
	    V1==B1,
	    X1==C,
	    W1<C1,
	    'chr lock'(N1),
	    'chr lock'(C),
	    'chr lock'(B1),
	    'chr lock'(Q),
	    N1=pragma(rule(Z1, A2, B2, C2), D2, E2, F2, C),
	    Z1\==[],
	    \+memberchk_eq(B1, Q),
	    'chr unlock'(N1),
	    'chr unlock'(C),
	    'chr unlock'(B1),
	    'chr unlock'(Q)
	->  remove_constraint_internal(A, G2, H2),
	    (   H2==yes
	    ->  '$delete_from_store_multiple_occ_constraints_checked/1'(A)
	    ;   true
	    ),
	    activate_constraint(I2, J2, J, K2),
	    (   I2==yes
	    ->  '$insert_in_store_prev_guard_list/7'(J)
	    ;   true
	    ),
	    first_occ_in_rule(C, B1, W1, Y1),
	    multiple_occ_constraints_checked([B1|Q]),
	    (   J=suspension(L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2),
		M2=mutable(active),
		O2=mutable(K2)
	    ->  'chr update_mutable'(inactive, M2),
		'prev_guard_list/7__2__0'(B, C, D, E, F, G, H, I, J)
	    ;   true
	    )
	;   'prev_guard_list/7__2__0'(B, C, D, E, F, G, H, I, J)
	).
'prev_guard_list/7__2'(A, B, C, D, E, F, G, H) :-
	'prev_guard_list/7__3'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__3'(A, B, C, D, E, F, G, H) :-
	B==0,
	G==[],
	nb_getval('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', I),
	'chr sbag_member'(J, I),
	J=suspension(K, L, M, N, O, P, Q),
	L=mutable(active), !,
	remove_constraint_internal(J, R, S),
	(   S==yes
	->  '$delete_from_store_multiple_occ_constraints_checked/1'(J)
	;   true
	),
	(   var(H)
	->  true
	;   remove_constraint_internal(H, T, U),
	    (   U==yes
	    ->  '$delete_from_store_prev_guard_list/7'(H)
	    ;   true
	    )
	).
'prev_guard_list/7__3'(A, B, C, D, E, F, G, H) :-
	activate_constraint(I, J, H, K),
	(   I==yes
	->  '$insert_in_store_prev_guard_list/7'(H)
	;   true
	).
simplify_guards(A) :-
	'simplify_guards/1__0'(A, B).
'simplify_guards/1__0'(A, B) :-
	'$via1_multi_hash_rule/2-1'(A, C),
	'chr sbag_member'(D, C),
	D=suspension(E, F, G, H, I, J, K, L),
	F=mutable(active),
	K==A, !,
	L=pragma(rule(M, N, O, P), Q, R, S, A),
	append(M, N, T),
	make_head_matchings_explicit_not_negated(T, U, V),
	add_guard_to_head(T, O, W),
	X is A-1,
	prev_guard_list(A, X, U, O, [], V, [W]),
	multiple_occ_constraints_checked([]),
	Y is A+1,
	simplify_guards(Y).
'simplify_guards/1__0'(A, B) :- !.
set_all_passive(A) :-
	'set_all_passive/1__0'(A, B).
'set_all_passive/1__0'(A, B) :-
	'$via1_multi_hash_occurrence/4-3'(A, C), !,
	allocate_constraint(chr_translate:'set_all_passive/1__0'(A, B), B, set_all_passive(A), [A]),
	'set_all_passive/1__0__0'(C, A, B).
'set_all_passive/1__0__0'([], A, B) :-
	'set_all_passive/1__1'(A, B).
'set_all_passive/1__0__0'([A|B], C, D) :-
	(   A=suspension(E, F, G, H, I, J, K, L, M, N),
	    F=mutable(active),
	    M==C,
	    O=t(71, D, A),
	    'chr novel_production'(D, O),
	    'chr novel_production'(A, O)
	->  'chr extend_history'(D, O),
	    activate_constraint(P, Q, D, R),
	    (   P==yes
	    ->  '$insert_in_store_set_all_passive/1'(D)
	    ;   true
	    ),
	    passive(C, N),
	    (   D=suspension(S, T, U, V, W, X, Y),
		T=mutable(active),
		V=mutable(R)
	    ->  'chr update_mutable'(inactive, T),
		'set_all_passive/1__0__0'(B, C, D)
	    ;   true
	    )
	;   'set_all_passive/1__0__0'(B, C, D)
	).
'set_all_passive/1__0'(A, B) :-
	allocate_constraint(chr_translate:'set_all_passive/1__0'(A, B), B, set_all_passive(A), [A]),
	'set_all_passive/1__1'(A, B).
'set_all_passive/1__1'(A, B) :- !,
	(   var(B)
	->  true
	;   remove_constraint_internal(B, C, D),
	    (   D==yes
	    ->  '$delete_from_store_set_all_passive/1'(B)
	    ;   true
	    )
	).
'set_all_passive/1__1'(A, B) :-
	activate_constraint(C, D, B, E),
	(   C==yes
	->  '$insert_in_store_set_all_passive/1'(B)
	;   true
	).
first_occ_in_rule(A, B, C, D) :-
	'first_occ_in_rule/4__0'(A, B, C, D, E).
'first_occ_in_rule/4__0'(A, B, C, D, E) :-
	'$via1_multi_hash_occurrence/4-3'(A, F),
	'chr sbag_member'(G, F),
	G=suspension(H, I, J, K, L, M, N, O, P, Q),
	I=mutable(active),
	N==B,
	P==A,
	O<C, !,
	first_occ_in_rule(A, B, O, Q).
'first_occ_in_rule/4__0'(A, B, C, D, E) :- !,
	B=F/G,
	functor(H, F, G),
	next_occ_in_rule(A, B, C, D, [], H).
next_occ_in_rule(A, B, C, D, E, F) :-
	'next_occ_in_rule/6__0'(A, B, C, D, E, F, G).
'next_occ_in_rule/6__0'(A, B, C, D, E, F, G) :-
	'$via1_multi_hash_occurrence/4-3'(A, H),
	'chr sbag_member'(I, H),
	I=suspension(J, K, L, M, N, O, P, Q, R, S),
	K=mutable(active),
	P==B,
	R==A,
	'$via1_multi_hash_passive/2-12'(k(A, S), T),
	(   'chr sbag_member'(U, T),
	    U=suspension(V, W, X, Y, Z, A1, B1, C1),
	    W=mutable(active),
	    B1==A,
	    C1==S
	->  true
	),
	'chr lock'(Q),
	'chr lock'(C),
	Q is C+1,
	'chr unlock'(Q),
	'chr unlock'(C), !,
	next_occ_in_rule(A, B, Q, D, D1, F).
'next_occ_in_rule/6__0'(A, B, C, D, E, F, G) :-
	'$via1_multi_hash_occurrence/4-3'(A, H),
	'$via1_multi_hash_prev_guard_list/7-1'(A, I),
	'$via1_multi_hash_rule/2-1'(A, J),
	'chr sbag_member'(K, J),
	K=suspension(L, M, N, O, P, Q, R, S),
	M=mutable(active),
	R==A,
	'chr sbag_member'(T, I),
	T=suspension(U, V, W, X, Y, Z, A1, B1, C1, D1, E1, F1, G1),
	V=mutable(active),
	A1==A,
	B1==0,
	G1==[],
	'chr sbag_member'(H1, H),
	H1=suspension(I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1),
	J1=mutable(active),
	O1==B,
	Q1==A,
	'chr lock'(P1),
	'chr lock'(C),
	'chr lock'(S),
	'chr lock'(D1),
	'chr lock'(A),
	P1 is C+1,
	S=pragma(rule(S1, T1, D1, U1), ids(V1, W1), X1, Y1, A),
	'chr unlock'(P1),
	'chr unlock'(C),
	'chr unlock'(S),
	'chr unlock'(D1),
	'chr unlock'(A), !,
	append(S1, T1, Z1),
	add_failing_occ(S, Z1, C1, D, A2, F, F1, B, B2),
	(   A2==[chr_pp_void_info]
	->  next_occ_in_rule(A, B, P1, R1, E, F)
	;   append(A2, E, C2),
	    add_failing_occ(S, Z1, C1, R1, D2, F, F1, B, E2),
	    copy_term(E1, F2),
	    variable_replacement(E1, F2, G2),
	    copy_with_variable_replacement(E1, H2, B2),
	    copy_with_variable_replacement(E1, I2, E2),
	    copy_with_variable_replacement(I2, J2, G2),
	    append(C2, H2, K2),
	    append(K2, J2, L2),
	    copy_with_variable_replacement(F1, M2, B2),
	    copy_with_variable_replacement(F1, N2, E2),
	    append(N2, L2, O2),
	    append([chr_pp_active_constraint(F)|M2], O2, P2),
	    list2conj(D2, Q2),
	    copy_term((C2, L2, P2, Q2, F), (R2, S2, T2, U2, V2)),
	    term_variables(R2-V2, W2),
	    flatten_stuff(T2, X2),
	    flatten_stuff(U2, Y2),
	    (   Q2\=chr_pp_void_info,
		unify_stuff(W2, X2, Y2), !,
		(   guard_entailment:entails_guard(T2, U2)
		->  passive(A, R1)
		;   true
		)
	    ;   true
	    ), !,
	    next_occ_in_rule(A, B, P1, R1, C2, F)
	).
'next_occ_in_rule/6__0'(A, B, C, D, E, F, G) :- !.
multiple_occ_constraints_checked(A) :-
	'multiple_occ_constraints_checked/1__0'(A, B).
'multiple_occ_constraints_checked/1__0'(A, B) :-
	chr_pp_flag(occurrence_subsumption, on),
	nb_getval('$chr_store_global_ground_chr_translate:rule/2', C),
	'chr sbag_member'(D, C),
	D=suspension(E, F, G, H, I, J, K, L),
	F=mutable(active),
	'$via1_multi_hash_occurrence/4-3'(K, M),
	'$via1_multi_hash_occurrence/4-3'(K, N),
	'$via1_multi_hash_prev_guard_list/7-1'(K, O),
	'chr sbag_member'(P, O),
	P=suspension(Q, R, S, T, U, V, W, X, Y, Z, A1, B1, C1),
	R=mutable(active),
	W==K,
	X==0,
	C1==[],
	'chr sbag_member'(D1, N),
	D1=suspension(E1, F1, G1, H1, I1, J1, K1, L1, M1, N1),
	F1=mutable(active),
	M1==K,
	'chr sbag_member'(O1, M),
	O1=suspension(P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1),
	Q1=mutable(active),
	O1\==D1,
	V1==K1,
	X1==K,
	L1<W1,
	'chr lock'(L),
	'chr lock'(K),
	'chr lock'(K1),
	'chr lock'(A),
	L=pragma(rule(Z1, A2, B2, C2), D2, E2, F2, K),
	Z1\==[],
	\+memberchk_eq(K1, A),
	'chr unlock'(L),
	'chr unlock'(K),
	'chr unlock'(K1),
	'chr unlock'(A), !,
	first_occ_in_rule(K, K1, L1, N1),
	multiple_occ_constraints_checked([K1|A]).
'multiple_occ_constraints_checked/1__0'(A, B) :-
	nb_getval('$chr_store_global_ground_chr_translate:prev_guard_list/7', C),
	'chr sbag_member'(D, C),
	D=suspension(E, F, G, H, I, J, K, L, M, N, O, P, Q),
	F=mutable(active),
	L==0,
	Q==[], !,
	remove_constraint_internal(D, R, S),
	(   S==yes
	->  '$delete_from_store_prev_guard_list/7'(D)
	;   true
	).
'multiple_occ_constraints_checked/1__0'(A, B) :-
	insert_constraint_internal(C, D, B, chr_translate:'multiple_occ_constraints_checked/1__0'(A, B), multiple_occ_constraints_checked(A), [A]),
	'$insert_in_store_multiple_occ_constraints_checked/1'(B).
type_definition(A, B) :-
	'type_definition/2__0'(A, B, C).
'type_definition/2__0'(A, B, C) :-
	(   var(C)
	->  insert_constraint_internal(D, E, C, chr_translate:'type_definition/2__0'(A, B, C), type_definition(A, B), [A, B])
	;   activate_constraint(D, E, C, F)
	),
	(   D==yes
	->  '$insert_in_store_type_definition/2'(C),
	    'attach_type_definition/2'(E, C)
	;   true
	).
constraint_type(A, B) :-
	'constraint_type/2__0'(A, B, C).
'constraint_type/2__0'(A, B, C) :-
	insert_constraint_internal(D, E, C, chr_translate:'constraint_type/2__0'(A, B, C), constraint_type(A, B), [A, B]),
	'$insert_in_store_constraint_type/2'(C).
get_type_definition(A, B) :-
	'get_type_definition/2__0'(A, B, C).
'get_type_definition/2__0'(A, B, C) :-
	nonvar(A),
	'chr global_term_ref_1'(D),
	get_attr(D, chr_translate, E),
	E=F,
	'chr sbag_member'(G, F),
	G=suspension(H, I, J, K, L, M, N, O),
	I=mutable(active),
	nonvar(N),
	'chr lock'(N),
	'chr lock'(A),
	functor(N, P, Q),
	functor(A, P, Q),
	'chr unlock'(N),
	'chr unlock'(A), !,
	copy_term((N, O), (R, S)),
	R=A,
	B=S.
'get_type_definition/2__0'(A, B, C) :- !,
	fail.
get_constraint_type(A, B) :-
	'get_constraint_type/2__0'(A, B, C).
'get_constraint_type/2__0'(A, B, C) :-
	'$via1_multi_hash_constraint_type/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A, !,
	B=M.
'get_constraint_type/2__0'(A, B, C) :- !,
	fail.
add_type_information(A, B, C) :-
	'add_type_information/3__0'(A, B, C, D).
'add_type_information/3__0'(A, B, C, D) :-
	A==[],
	B==[], !,
	C=true.
'add_type_information/3__0'(A, B, C, D) :-
	nonvar(A),
	A=[E|F],
	nonvar(B),
	B=[G|H],
	nb_getval('$chr_store_global_ground_chr_translate:constraint_mode/2', I),
	'chr sbag_member'(J, I),
	J=suspension(K, L, M, N, O, P, Q, R),
	L=mutable(active),
	nonvar(Q),
	Q=S/T,
	'chr lock'(E),
	'chr lock'(S),
	'chr lock'(T),
	functor(E, S, T),
	'chr unlock'(E),
	'chr unlock'(S),
	'chr unlock'(T), !,
	E=..[U|V],
	G=..[W|X],
	add_mode_info(R, V, Y),
	C= (Y, Z),
	(   get_constraint_type(S/T, A1)
	->  types2condition(A1, V, X, R, B1),
	    list2conj(B1, C1),
	    Z= (C1, D1),
	    add_type_information(F, H, D1)
	;   add_type_information(F, H, Z)
	).
'add_type_information/3__0'(A, B, C, D) :-
	nonvar(A),
	A=[E|F], !,
	functor(E, G, H),
	format('CHR compiler ERROR: mode information missing for ~w.\n', [G/H]),
	format('    `-->  Most likely this is a bug in the compiler itself.\n', []),
	format('          Please contact the maintainers.\n', []),
	fail.
'add_type_information/3__0'(A, B, C, D) :-
	insert_constraint_internal(E, F, D, chr_translate:'add_type_information/3__0'(A, B, C, D), add_type_information(A, B, C), [A, B, C]),
	'$insert_in_store_add_type_information/3'(D).
stored(A, B, C) :-
	'stored/3__0'(A, B, C, D).
'stored/3__0'(A, B, C, D) :-
	C==yes,
	'$via1_multi_hash_stored_complete/3-1'(A, E),
	'$via1_multi_hash_occurrence/4-2'(B, F),
	'chr sbag_member'(G, F),
	G=suspension(H, I, J, K, L, M, N, O, P, Q),
	I=mutable(active),
	N==A,
	O==B,
	'$via1_multi_hash_passive/2-12'(k(P, Q), R),
	(   'chr sbag_member'(S, R),
	    S=suspension(T, U, V, W, X, Y, Z, A1),
	    U=mutable(active),
	    Z==P,
	    A1==Q
	->  true
	),
	'chr sbag_member'(B1, E),
	B1=suspension(C1, D1, E1, F1, G1, H1, I1, J1, K1),
	D1=mutable(active),
	I1==A,
	B<J1, !,
	remove_constraint_internal(B1, L1, M1),
	(   M1==yes
	->  '$delete_from_store_stored_complete/3'(B1)
	;   true
	),
	N1 is K1-1,
	stored(A, B, maybe),
	stored_complete(A, J1, N1).
'stored/3__0'(A, B, C, D) :-
	C==yes,
	'$via1_multi_hash_ai_not_observed/2-12'(k(A, B), E),
	'$via1_multi_hash_stored_complete/3-1'(A, F),
	'chr sbag_member'(G, F),
	G=suspension(H, I, J, K, L, M, N, O, P),
	I=mutable(active),
	N==A,
	B<O,
	'chr sbag_member'(Q, E),
	Q=suspension(R, S, T, U, V, W, X, Y),
	S=mutable(active),
	X==A,
	Y==B, !,
	remove_constraint_internal(G, Z, A1),
	(   A1==yes
	->  '$delete_from_store_stored_complete/3'(G)
	;   true
	),
	B1 is P-1,
	stored(A, B, maybe),
	stored_complete(A, O, B1).
'stored/3__0'(A, B, C, D) :-
	insert_constraint_internal(E, F, D, chr_translate:'stored/3__0'(A, B, C, D), stored(A, B, C), [A, B, C]),
	'$insert_in_store_stored/3'(D).
stored_completing(A, B, C) :-
	'stored_completing/3__0'(A, B, C, D).
'stored_completing/3__0'(A, B, C, D) :-
	'$via1_multi_hash_stored/3-2'(B, E),
	'chr sbag_member'(F, E),
	F=suspension(G, H, I, J, K, L, M, N, O),
	H=mutable(active),
	M==A,
	N==B,
	O==yes, !,
	P is B+1,
	Q is C+1,
	stored_completing(A, P, Q).
'stored_completing/3__0'(A, B, C, D) :-
	'$via1_multi_hash_stored/3-2'(B, E),
	'chr sbag_member'(F, E),
	F=suspension(G, H, I, J, K, L, M, N, O),
	H=mutable(active),
	M==A,
	N==B,
	O==maybe, !,
	P is B+1,
	stored_completing(A, P, C).
'stored_completing/3__0'(A, B, C, D) :-
	'$via1_multi_hash_stored/3-2'(B, E),
	'chr sbag_member'(F, E),
	F=suspension(G, H, I, J, K, L, M, N, O),
	H=mutable(active),
	M==A,
	N==B,
	O==no, !,
	stored_complete(A, B, C).
'stored_completing/3__0'(A, B, C, D) :- !,
	stored_complete(A, B, C).
stored_complete(A, B, C) :-
	'stored_complete/3__0'(A, B, C, D).
'stored_complete/3__0'(A, B, C, D) :-
	'$via1_multi_hash_occurrence/4-1'(A, E),
	'chr sbag_member'(F, E),
	F=suspension(G, H, I, J, K, L, M, N, O, P),
	H=mutable(active),
	M==A,
	N<B,
	'$via1_multi_hash_stored/3-2'(N, Q),
	'$via1_multi_hash_passive/2-12'(k(O, P), R),
	(   'chr sbag_member'(S, R),
	    S=suspension(T, U, V, W, X, Y, Z, A1),
	    U=mutable(active),
	    Z==O,
	    A1==P
	->  true
	),
	'chr sbag_member'(B1, Q),
	B1=suspension(C1, D1, E1, F1, G1, H1, I1, J1, K1),
	D1=mutable(active),
	I1==A,
	J1==N,
	K1==yes, !,
	remove_constraint_internal(B1, L1, M1),
	(   M1==yes
	->  '$delete_from_store_stored/3'(B1)
	;   true
	),
	N1 is C-1,
	stored(A, N, maybe),
	stored_complete(A, B, N1).
'stored_complete/3__0'(A, B, C, D) :-
	'$via1_multi_hash_stored/3-1'(A, E),
	'chr sbag_member'(F, E),
	F=suspension(G, H, I, J, K, L, M, N, O),
	H=mutable(active),
	M==A,
	O==yes,
	N<B,
	'$via1_multi_hash_ai_not_observed/2-12'(k(A, N), P),
	'chr sbag_member'(Q, P),
	Q=suspension(R, S, T, U, V, W, X, Y),
	S=mutable(active),
	X==A,
	Y==N, !,
	remove_constraint_internal(F, Z, A1),
	(   A1==yes
	->  '$delete_from_store_stored/3'(F)
	;   true
	),
	B1 is C-1,
	stored(A, N, maybe),
	stored_complete(A, B, B1).
'stored_complete/3__0'(A, B, C, D) :-
	C==0,
	'$via1_multi_hash_max_occurrence/2-1'(A, E), !,
	allocate_constraint(chr_translate:'stored_complete/3__0'(A, B, C, D), D, stored_complete(A, B, C), [A, B, C]),
	'stored_complete/3__0__0'(E, A, B, C, D).
'stored_complete/3__0__0'([], A, B, C, D) :-
	'stored_complete/3__1'(A, B, C, D).
'stored_complete/3__0__0'([A|B], C, D, E, F) :-
	(   A=suspension(G, H, I, J, K, L, M, N),
	    H=mutable(active),
	    M==C,
	    '$via1_multi_hash_occurrence/4-1'(C, O)
	->  'stored_complete/3__0__1'(O, N, A, B, C, D, E, F)
	;   'stored_complete/3__0__0'(B, C, D, E, F)
	).
'stored_complete/3__0__1'([], A, B, C, D, E, F, G) :-
	'stored_complete/3__0__0'(C, D, E, F, G).
'stored_complete/3__0__1'([A|B], C, D, E, F, G, H, I) :-
	(   A=suspension(J, K, L, M, N, O, P, Q, R, S),
	    K=mutable(active),
	    P==F,
	    '$via1_multi_hash_occurrence/4-3'(R, T)
	->  'stored_complete/3__0__2'(T, R, A, B, C, D, E, F, G, H, I)
	;   'stored_complete/3__0__1'(B, C, D, E, F, G, H, I)
	).
'stored_complete/3__0__2'([], A, B, C, D, E, F, G, H, I, J) :-
	'stored_complete/3__0__1'(C, D, E, F, G, H, I, J).
'stored_complete/3__0__2'([A|B], C, D, E, F, G, H, I, J, K, L) :-
	(   A=suspension(M, N, O, P, Q, R, S, T, U, V),
	    N=mutable(active),
	    A\==D,
	    U==C,
	    W=t(90, G, D, L, A),
	    'chr novel_production'(G, W),
	    'chr novel_production'(D, W),
	    'chr novel_production'(L, W),
	    'chr novel_production'(A, W),
	    J=<F
	->  'chr extend_history'(L, W),
	    activate_constraint(X, Y, L, Z),
	    (   X==yes
	    ->  '$insert_in_store_stored_complete/3'(L)
	    ;   true
	    ),
	    passive(C, V),
	    (   L=suspension(A1, B1, C1, D1, E1, F1, G1, H1, I1),
		B1=mutable(active),
		D1=mutable(Z)
	    ->  'chr update_mutable'(inactive, B1),
		'stored_complete/3__0__2'(B, C, D, E, F, G, H, I, J, K, L)
	    ;   true
	    )
	;   'stored_complete/3__0__2'(B, C, D, E, F, G, H, I, J, K, L)
	).
'stored_complete/3__0'(A, B, C, D) :-
	allocate_constraint(chr_translate:'stored_complete/3__0'(A, B, C, D), D, stored_complete(A, B, C), [A, B, C]),
	'stored_complete/3__1'(A, B, C, D).
'stored_complete/3__1'(A, B, C, D) :-
	'$via1_multi_hash_occurrence/4-1'(A, E), !,
	'stored_complete/3__1__0'(E, A, B, C, D).
'stored_complete/3__1__0'([], A, B, C, D) :-
	'stored_complete/3__2'(A, B, C, D).
'stored_complete/3__1__0'([A|B], C, D, E, F) :-
	(   A=suspension(G, H, I, J, K, L, M, N, O, P),
	    H=mutable(active),
	    M==C,
	    Q=t(99, F, A),
	    'chr novel_production'(F, Q),
	    'chr novel_production'(A, Q),
	    N>D
	->  'chr extend_history'(F, Q),
	    activate_constraint(R, S, F, T),
	    (   R==yes
	    ->  '$insert_in_store_stored_complete/3'(F)
	    ;   true
	    ),
	    passive(O, P),
	    (   F=suspension(U, V, W, X, Y, Z, A1, B1, C1),
		V=mutable(active),
		X=mutable(T)
	    ->  'chr update_mutable'(inactive, V),
		'stored_complete/3__1__0'(B, C, D, E, F)
	    ;   true
	    )
	;   'stored_complete/3__1__0'(B, C, D, E, F)
	).
'stored_complete/3__1'(A, B, C, D) :-
	'stored_complete/3__2'(A, B, C, D).
'stored_complete/3__2'(A, B, C, D) :-
	activate_constraint(E, F, D, G),
	(   E==yes
	->  '$insert_in_store_stored_complete/3'(D)
	;   true
	).
is_stored(A) :-
	'is_stored/1__0'(A, B).
'is_stored/1__0'(A, B) :-
	'$via1_multi_hash_stored_complete/3-1'(A, C),
	'$via1_multi_hash_max_occurrence/2-1'(A, D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A
	->  true
	),
	'chr sbag_member'(N, C),
	N=suspension(O, P, Q, R, S, T, U, V, W),
	P=mutable(active),
	U==A,
	W==0,
	V=<M, !,
	fail.
'is_stored/1__0'(A, B) :- !.
is_finally_stored(A) :-
	'is_finally_stored/1__0'(A, B).
'is_finally_stored/1__0'(A, B) :-
	'$via1_multi_hash_stored_complete/3-1'(A, C),
	'$via1_multi_hash_max_occurrence/2-1'(A, D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A
	->  true
	),
	'chr sbag_member'(N, C),
	N=suspension(O, P, Q, R, S, T, U, V, W),
	P=mutable(active),
	U==A,
	V=<M, !,
	fail.
'is_finally_stored/1__0'(A, B) :- !.
check_all_passive(A, B) :-
	'check_all_passive/2__0'(A, B, C).
'check_all_passive/2__0'(A, B, C) :-
	nonvar(B),
	B=[D|E],
	'$via1_multi_hash_passive/2-12'(k(A, D), F),
	(   'chr sbag_member'(G, F),
	    G=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    N==A,
	    O==D
	->  true
	), !,
	check_all_passive(A, E).
'check_all_passive/2__0'(A, B, C) :-
	B==[],
	'$via1_multi_hash_rule/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A, !,
	format('CHR compiler WARNING: all heads passive in ~@.\n', [format_rule(M)]),
	format('~w\n', [M]),
	format('    `-->  Rule never fires. Check your program, this might be a bug!\n', []).
'check_all_passive/2__0'(A, B, C) :-
	insert_constraint_internal(D, E, C, chr_translate:'check_all_passive/2__0'(A, B, C), check_all_passive(A, B), [A, B]),
	'$insert_in_store_check_all_passive/2'(C).
constraints_code1(A, B, C) :-
	'constraints_code1/3__0'(A, B, C, D).
'constraints_code1/3__0'(A, B, C, D) :-
	A==[], !,
	B=C.
'constraints_code1/3__0'(A, B, C, D) :-
	nonvar(A),
	A=[E|F], !,
	constraint_code(E, B, G),
	constraints_code1(F, G, C).
'constraints_code1/3__0'(A, B, C, D) :-
	insert_constraint_internal(E, F, D, chr_translate:'constraints_code1/3__0'(A, B, C, D), constraints_code1(A, B, C), [A, B, C]),
	'$insert_in_store_constraints_code1/3'(D).
constraint_code(A, B, C) :-
	'constraint_code/3__0'(A, B, C, D).
'constraint_code/3__0'(A, B, C, D) :- !,
	(   (   chr_pp_flag(debugable, on)
	    ;   is_stored(A),
		(   has_active_occurrence(A)
		;   chr_pp_flag(late_allocation, off)
		),
		(   may_trigger(A)
		;   get_allocation_occurrence(A, E),
		    get_max_occurrence(A, F),
		    F>=E
		)
	    )
	->  constraint_prelude(A, G),
	    B=[G|H]
	;   B=H
	),
	I=[0],
	occurrences_code(A, 1, I, J, H, K),
	gen_cond_attach_clause(A, J, K, C).
has_active_occurrence(A) :-
	'has_active_occurrence/1__0'(A, B).
'has_active_occurrence/1__0'(A, B) :- !,
	has_active_occurrence(A, 1).
has_active_occurrence(A, B) :-
	'has_active_occurrence/2__0'(A, B, C).
'has_active_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_max_occurrence/2-1'(A, D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A
	->  true
	),
	B>M, !,
	fail.
'has_active_occurrence/2__0'(A, B, C) :-
	'$via1_multi_hash_occurrence/4-2'(B, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M, N, O),
	G=mutable(active),
	L==A,
	M==B,
	'$via1_multi_hash_passive/2-12'(k(N, O), P),
	(   'chr sbag_member'(Q, P),
	    Q=suspension(R, S, T, U, V, W, X, Y),
	    S=mutable(active),
	    X==N,
	    Y==O
	->  true
	), !,
	Z is B+1,
	has_active_occurrence(A, Z).
'has_active_occurrence/2__0'(A, B, C) :- !.
use_auxiliary_predicate(A) :-
	'use_auxiliary_predicate/1__0'(A, B).
'use_auxiliary_predicate/1__0'(A, B) :-
	'$via1_multi_hash_use_auxiliary_predicate/1-1'(A, C),
	(   'chr sbag_member'(D, C),
	    D=suspension(E, F, G, H, I, J, K),
	    F=mutable(active),
	    K==A
	->  true
	), !.
'use_auxiliary_predicate/1__0'(A, B) :-
	insert_constraint_internal(C, D, B, chr_translate:'use_auxiliary_predicate/1__0'(A, B), use_auxiliary_predicate(A), [A]),
	'$insert_in_store_use_auxiliary_predicate/1'(B).
is_used_auxiliary_predicate(A) :-
	'is_used_auxiliary_predicate/1__0'(A, B).
'is_used_auxiliary_predicate/1__0'(A, B) :-
	'$via1_multi_hash_use_auxiliary_predicate/1-1'(A, C),
	(   'chr sbag_member'(D, C),
	    D=suspension(E, F, G, H, I, J, K),
	    F=mutable(active),
	    K==A
	->  true
	), !.
'is_used_auxiliary_predicate/1__0'(A, B) :- !,
	fail.
occurrences_code(A, B, C, D, E, F) :-
	'occurrences_code/6__0'(A, B, C, D, E, F, G).
'occurrences_code/6__0'(A, B, C, D, E, F, G) :-
	'$via1_multi_hash_max_occurrence/2-1'(A, H),
	(   'chr sbag_member'(I, H),
	    I=suspension(J, K, L, M, N, O, P, Q),
	    K=mutable(active),
	    P==A
	->  true
	),
	B>Q, !,
	D=C,
	E=F.
'occurrences_code/6__0'(A, B, C, D, E, F, G) :- !,
	occurrence_code(A, B, C, H, E, I),
	J is B+1,
	occurrences_code(A, J, H, D, I, F).
occurrence_code(A, B, C, D, E, F) :-
	'occurrence_code/6__0'(A, B, C, D, E, F, G).
'occurrence_code/6__0'(A, B, C, D, E, F, G) :-
	'$via1_multi_hash_occurrence/4-2'(B, H),
	'chr sbag_member'(I, H),
	I=suspension(J, K, L, M, N, O, P, Q, R, S),
	K=mutable(active),
	P==A,
	Q==B,
	'$via1_multi_hash_passive/2-12'(k(R, S), T),
	(   'chr sbag_member'(U, T),
	    U=suspension(V, W, X, Y, Z, A1, B1, C1),
	    W=mutable(active),
	    B1==R,
	    C1==S
	->  true
	), !,
	D=C,
	E=F.
'occurrence_code/6__0'(A, B, C, D, E, F, G) :-
	'$via1_multi_hash_occurrence/4-2'(B, H),
	'chr sbag_member'(I, H),
	I=suspension(J, K, L, M, N, O, P, Q, R, S),
	K=mutable(active),
	P==A,
	Q==B,
	'$via1_multi_hash_rule/2-1'(R, T),
	'chr sbag_member'(U, T),
	U=suspension(V, W, X, Y, Z, A1, B1, C1),
	W=mutable(active),
	B1==R, !,
	C1=pragma(rule(D1, E1, F1, G1), ids(H1, I1), J1, K1, L1),
	(   select2(S, M1, H1, D1, N1, O1)
	->  D=C,
	    head1_code(M1, O1, N1, C1, A, B, C, E, F)
	;   select2(S, P1, I1, E1, Q1, R1)
	->  head2_code(P1, R1, Q1, C1, A, B, C, E, S1),
	    inc_id(C, D),
	    (   unconditional_occurrence(A, B)
	    ->  S1=F
	    ;   gen_alloc_inc_clause(A, B, C, S1, F)
	    )
	).
'occurrence_code/6__0'(A, B, C, D, E, F, G) :- !,
	'chr show_store'(chr_pp),
	format('occurrence_code/6: missing information to compile ~w:~w\n', [A, B]),
	fail.
functional_dependency(A, B, C, D) :-
	'functional_dependency/4__0'(A, B, C, D, E).
'functional_dependency/4__0'(A, B, C, D, E) :-
	B>1,
	'$via1_multi_hash_occurrence/4-3'(B, F),
	'$via1_multi_hash_allocation_occurrence/2-1'(A, G),
	'chr sbag_member'(H, G),
	H=suspension(I, J, K, L, M, N, O, P),
	J=mutable(active),
	O==A,
	'chr sbag_member'(Q, F),
	Q=suspension(R, S, T, U, V, W, X, Y, Z, A1),
	S=mutable(active),
	X==A,
	Z==B,
	P>Y, !,
	functional_dependency(A, 1, C, D).
'functional_dependency/4__0'(A, B, C, D, E) :-
	insert_constraint_internal(F, G, E, chr_translate:'functional_dependency/4__0'(A, B, C, D, E), functional_dependency(A, B, C, D), [A, B, C, D]),
	'$insert_in_store_functional_dependency/4'(E).
get_functional_dependency(A, B, C, D) :-
	'get_functional_dependency/4__0'(A, B, C, D, E).
'get_functional_dependency/4__0'(A, B, C, D, E) :-
	'$via1_multi_hash_functional_dependency/4-1'(A, F),
	'chr sbag_member'(G, F),
	G=suspension(H, I, J, K, L, M, N, O, P, Q),
	I=mutable(active),
	N==A,
	B>=O, !,
	C=P,
	D=Q.
'get_functional_dependency/4__0'(A, B, C, D, E) :- !,
	fail.
initial_call_pattern(A) :-
	'initial_call_pattern/1__0'(A, B).
'initial_call_pattern/1__0'(A, B) :-
	'$via1_multi_hash_initial_call_pattern/1-1'(A, C),
	(   'chr sbag_member'(D, C),
	    D=suspension(E, F, G, H, I, J, K),
	    F=mutable(active),
	    K==A
	->  true
	), !.
'initial_call_pattern/1__0'(A, B) :-
	allocate_constraint(chr_translate:'initial_call_pattern/1__0'(A, B), B, initial_call_pattern(A), [A]),
	'chr novel_production'(B, 129), !,
	'chr extend_history'(B, 129),
	activate_constraint(C, D, B, E),
	(   C==yes
	->  '$insert_in_store_initial_call_pattern/1'(B)
	;   true
	),
	call_pattern(A),
	(   B=suspension(F, G, H, I, J, K, L),
	    G=mutable(active),
	    I=mutable(E)
	->  'chr update_mutable'(inactive, G),
	    'initial_call_pattern/1__1'(A, B)
	;   true
	).
'initial_call_pattern/1__0'(A, B) :-
	allocate_constraint(chr_translate:'initial_call_pattern/1__0'(A, B), B, initial_call_pattern(A), [A]),
	'initial_call_pattern/1__1'(A, B).
'initial_call_pattern/1__1'(A, B) :-
	'$via1_multi_hash_final_answer_pattern/2-1'(A, C), !,
	'initial_call_pattern/1__1__0'(C, A, B).
'initial_call_pattern/1__1__0'([], A, B) :-
	'initial_call_pattern/1__2'(A, B).
'initial_call_pattern/1__1__0'([A|B], C, D) :-
	(   A=suspension(E, F, G, H, I, J, K, L),
	    F=mutable(active),
	    K==C,
	    nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', M)
	->  'initial_call_pattern/1__1__1'(M, L, A, B, C, D)
	;   'initial_call_pattern/1__1__0'(B, C, D)
	).
'initial_call_pattern/1__1__1'([], A, B, C, D, E) :-
	'initial_call_pattern/1__1__0'(C, D, E).
'initial_call_pattern/1__1__1'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N),
	    I=mutable(active),
	    O=t(130, G, D, A),
	    'chr novel_production'(G, O),
	    'chr novel_production'(D, O),
	    'chr novel_production'(A, O)
	->  'chr extend_history'(G, O),
	    activate_constraint(P, Q, G, R),
	    (   P==yes
	    ->  '$insert_in_store_initial_call_pattern/1'(G)
	    ;   true
	    ),
	    ai_observation_schedule_new_calls(N, C),
	    (   G=suspension(S, T, U, V, W, X, Y),
		T=mutable(active),
		V=mutable(R)
	    ->  'chr update_mutable'(inactive, T),
		'initial_call_pattern/1__1__1'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'initial_call_pattern/1__1__1'(B, C, D, E, F, G)
	).
'initial_call_pattern/1__1'(A, B) :-
	'initial_call_pattern/1__2'(A, B).
'initial_call_pattern/1__2'(A, B) :-
	activate_constraint(C, D, B, E),
	(   C==yes
	->  '$insert_in_store_initial_call_pattern/1'(B)
	;   true
	).
call_pattern(A) :-
	'call_pattern/1__0'(A, B).
'call_pattern/1__0'(A, B) :-
	'$via1_multi_hash_call_pattern/1-1'(A, C),
	(   'chr sbag_member'(D, C),
	    D=suspension(E, F, G, H, I, J, K),
	    F=mutable(active),
	    K==A
	->  true
	), !.
'call_pattern/1__0'(A, B) :-
	nonvar(A),
	A=odom(C, D),
	C==[],
	allocate_constraint(chr_translate:'call_pattern/1__0'(A, B), B, call_pattern(A), [A]),
	'chr novel_production'(B, 133), !,
	'chr extend_history'(B, 133),
	activate_constraint(E, F, B, G),
	(   E==yes
	->  '$insert_in_store_call_pattern/1'(B)
	;   true
	),
	final_answer_pattern(odom([], D), odom([], D)),
	(   B=suspension(H, I, J, K, L, M, N),
	    I=mutable(active),
	    K=mutable(G)
	->  'chr update_mutable'(inactive, I),
	    'call_pattern/1__1'(A, B)
	;   true
	).
'call_pattern/1__0'(A, B) :-
	allocate_constraint(chr_translate:'call_pattern/1__0'(A, B), B, call_pattern(A), [A]),
	'call_pattern/1__1'(A, B).
'call_pattern/1__1'(A, B) :-
	nonvar(A),
	A=odom(C, D),
	nonvar(C),
	C=[E|F],
	'chr novel_production'(B, 134), !,
	'chr extend_history'(B, 134),
	activate_constraint(G, H, B, I),
	(   G==yes
	->  '$insert_in_store_call_pattern/1'(B)
	;   true
	),
	J=odom(E, D),
	depends_on_goal(odom([E|F], D), J),
	call_pattern(J),
	(   B=suspension(K, L, M, N, O, P, Q),
	    L=mutable(active),
	    N=mutable(I)
	->  'chr update_mutable'(inactive, L),
	    'call_pattern/1__2'(A, B)
	;   true
	).
'call_pattern/1__1'(A, B) :-
	'call_pattern/1__2'(A, B).
'call_pattern/1__2'(A, B) :-
	nonvar(A),
	A=odom(C, D),
	C==builtin,
	'chr novel_production'(B, 137), !,
	'chr extend_history'(B, 137),
	activate_constraint(E, F, B, G),
	(   E==yes
	->  '$insert_in_store_call_pattern/1'(B)
	;   true
	),
	ord_empty(H),
	final_answer_pattern(odom(builtin, D), odom([], H)),
	(   B=suspension(I, J, K, L, M, N, O),
	    J=mutable(active),
	    L=mutable(G)
	->  'chr update_mutable'(inactive, J),
	    'call_pattern/1__3'(A, B)
	;   true
	).
'call_pattern/1__2'(A, B) :-
	'call_pattern/1__3'(A, B).
'call_pattern/1__3'(A, B) :-
	nonvar(A),
	A=odom(C, D),
	nonvar(C),
	C=occ(E, F),
	'$via1_multi_hash_max_occurrence/2-1'(E, G), !,
	'call_pattern/1__3__0'(G, A, B, E, F, D).
'call_pattern/1__3__0'([], A, B, C, D, E) :-
	'call_pattern/1__4'(A, B).
'call_pattern/1__3__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    N==E,
	    P=t(138, D, A),
	    'chr novel_production'(D, P),
	    'chr novel_production'(A, P),
	    F>O
	->  'chr extend_history'(D, P),
	    activate_constraint(Q, R, D, S),
	    (   Q==yes
	    ->  '$insert_in_store_call_pattern/1'(D)
	    ;   true
	    ),
	    final_answer_pattern(odom(occ(E, F), G), odom([], G)),
	    (   D=suspension(T, U, V, W, X, Y, Z),
		U=mutable(active),
		W=mutable(S)
	    ->  'chr update_mutable'(inactive, U),
		'call_pattern/1__3__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'call_pattern/1__3__0'(B, C, D, E, F, G)
	).
'call_pattern/1__3'(A, B) :-
	'call_pattern/1__4'(A, B).
'call_pattern/1__4'(A, B) :-
	nonvar(A),
	A=odom(C, D),
	nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', E), !,
	'call_pattern/1__4__0'(E, A, B, C, D).
'call_pattern/1__4__0'([], A, B, C, D) :-
	'call_pattern/1__5'(A, B).
'call_pattern/1__4__0'([A|B], C, D, E, F) :-
	(   A=suspension(G, H, I, J, K, L, M),
	    H=mutable(active),
	    N=t(139, D, A),
	    'chr novel_production'(D, N),
	    'chr novel_production'(A, N),
	    'chr lock'(E),
	    'chr lock'(M),
	    memberchk_eq(E, M),
	    'chr unlock'(E),
	    'chr unlock'(M)
	->  'chr extend_history'(D, N),
	    activate_constraint(O, P, D, Q),
	    (   O==yes
	    ->  '$insert_in_store_call_pattern/1'(D)
	    ;   true
	    ),
	    R=odom(occ(E, 1), F),
	    call_pattern(R),
	    depends_on(odom(E, F), R),
	    (   D=suspension(S, T, U, V, W, X, Y),
		T=mutable(active),
		V=mutable(Q)
	    ->  'chr update_mutable'(inactive, T),
		'call_pattern/1__4__0'(B, C, D, E, F)
	    ;   true
	    )
	;   'call_pattern/1__4__0'(B, C, D, E, F)
	).
'call_pattern/1__4'(A, B) :-
	'call_pattern/1__5'(A, B).
'call_pattern/1__5'(A, B) :-
	nonvar(A),
	A=odom(C, D),
	nonvar(C),
	C=occ(E, F),
	'$via1_multi_hash_occurrence/4-2'(F, G), !,
	'call_pattern/1__5__0'(G, A, B, E, F, D).
'call_pattern/1__5__0'([], A, B, C, D, E) :-
	'call_pattern/1__6'(A, B).
'call_pattern/1__5__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O, P, Q),
	    I=mutable(active),
	    N==E,
	    O==F,
	    '$via1_multi_hash_rule/2-1'(P, R)
	->  'call_pattern/1__5__1'(R, P, Q, A, B, C, D, E, F, G)
	;   'call_pattern/1__5__0'(B, C, D, E, F, G)
	).
'call_pattern/1__5__1'([], A, B, C, D, E, F, G, H, I) :-
	'call_pattern/1__5__0'(D, E, F, G, H, I).
'call_pattern/1__5__1'([A|B], C, D, E, F, G, H, I, J, K) :-
	(   A=suspension(L, M, N, O, P, Q, R, S),
	    M=mutable(active),
	    R==C,
	    nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', T)
	->  'call_pattern/1__5__2'(T, S, A, B, C, D, E, F, G, H, I, J, K)
	;   'call_pattern/1__5__1'(B, C, D, E, F, G, H, I, J, K)
	).
'call_pattern/1__5__2'([], A, B, C, D, E, F, G, H, I, J, K, L) :-
	'call_pattern/1__5__1'(C, D, E, F, G, H, I, J, K, L).
'call_pattern/1__5__2'([A|B], C, D, E, F, G, H, I, J, K, L, M, N) :-
	(   A=suspension(O, P, Q, R, S, T, U),
	    P=mutable(active),
	    V=t(140, K, H, D, A),
	    'chr novel_production'(K, V),
	    'chr novel_production'(H, V),
	    'chr novel_production'(D, V),
	    'chr novel_production'(A, V),
	    'chr lock'(C),
	    'chr lock'(G),
	    C=pragma(rule(W, X, Y, Z), ids(A1, B1), C1, D1, E1),
	    memberchk_eq(G, A1),
	    'chr unlock'(C),
	    'chr unlock'(G)
	->  'chr extend_history'(K, V),
	    activate_constraint(F1, G1, K, H1),
	    (   F1==yes
	    ->  '$insert_in_store_call_pattern/1'(K)
	    ;   true
	    ),
	    select2(G, I1, A1, W, J1, K1),
	    ai_observation_abstract_constraints(K1, U, L1),
	    ai_observation_observe_list(odom([], N), L1, odom([], M1)),
	    ai_observation_abstract_constraints(X, U, N1),
	    ai_observation_observe_list(odom([], M1), N1, odom([], O1)),
	    ai_observation_abstract_goal(Z, U, P1),
	    call_pattern(odom(P1, O1)),
	    Q1 is M+1,
	    R1=odom(occ(L, Q1), N),
	    call_pattern(R1),
	    depends_on_as(odom(occ(L, M), N), odom(P1, O1), R1),
	    (   K=suspension(S1, T1, U1, V1, W1, X1, Y1),
		T1=mutable(active),
		V1=mutable(H1)
	    ->  'chr update_mutable'(inactive, T1),
		'call_pattern/1__5__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
	    ;   true
	    )
	;   'call_pattern/1__5__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
	).
'call_pattern/1__5'(A, B) :-
	'call_pattern/1__6'(A, B).
'call_pattern/1__6'(A, B) :-
	nonvar(A),
	A=odom(C, D),
	nonvar(C),
	C=occ(E, F),
	'$via1_multi_hash_occurrence/4-2'(F, G), !,
	'call_pattern/1__6__0'(G, A, B, E, F, D).
'call_pattern/1__6__0'([], A, B, C, D, E) :-
	'call_pattern/1__7'(A, B).
'call_pattern/1__6__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O, P, Q),
	    I=mutable(active),
	    N==E,
	    O==F,
	    '$via1_multi_hash_rule/2-1'(P, R)
	->  'call_pattern/1__6__1'(R, P, Q, A, B, C, D, E, F, G)
	;   'call_pattern/1__6__0'(B, C, D, E, F, G)
	).
'call_pattern/1__6__1'([], A, B, C, D, E, F, G, H, I) :-
	'call_pattern/1__6__0'(D, E, F, G, H, I).
'call_pattern/1__6__1'([A|B], C, D, E, F, G, H, I, J, K) :-
	(   A=suspension(L, M, N, O, P, Q, R, S),
	    M=mutable(active),
	    R==C,
	    nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', T)
	->  'call_pattern/1__6__2'(T, S, A, B, C, D, E, F, G, H, I, J, K)
	;   'call_pattern/1__6__1'(B, C, D, E, F, G, H, I, J, K)
	).
'call_pattern/1__6__2'([], A, B, C, D, E, F, G, H, I, J, K, L) :-
	'call_pattern/1__6__1'(C, D, E, F, G, H, I, J, K, L).
'call_pattern/1__6__2'([A|B], C, D, E, F, G, H, I, J, K, L, M, N) :-
	(   A=suspension(O, P, Q, R, S, T, U),
	    P=mutable(active),
	    V=t(142, K, H, D, A),
	    'chr novel_production'(K, V),
	    'chr novel_production'(H, V),
	    'chr novel_production'(D, V),
	    'chr novel_production'(A, V),
	    'chr lock'(C),
	    'chr lock'(G),
	    C=pragma(rule(W, X, Y, Z), ids(A1, B1), C1, D1, E1),
	    memberchk_eq(G, B1),
	    'chr unlock'(C),
	    'chr unlock'(G)
	->  'chr extend_history'(K, V),
	    activate_constraint(F1, G1, K, H1),
	    (   F1==yes
	    ->  '$insert_in_store_call_pattern/1'(K)
	    ;   true
	    ),
	    select2(G, I1, B1, X, J1, K1),
	    ai_observation_abstract_constraints(K1, U, L1),
	    ai_observation_observe_list(odom([], N), L1, odom([], M1)),
	    ai_observation_abstract_constraints(W, U, N1),
	    ai_observation_observe_list(odom([], M1), N1, odom([], O1)),
	    ord_add_element(O1, L, P1),
	    ai_observation_abstract_goal(Z, U, Q1),
	    call_pattern(odom(Q1, P1)),
	    (   ord_memberchk(L, O1)
	    ->  R1=no
	    ;   R1=yes
	    ),
	    S1 is M+1,
	    T1=odom(occ(L, S1), N),
	    call_pattern(T1),
	    depends_on_ap(odom(occ(L, M), N), odom(Q1, P1), T1, R1),
	    (   K=suspension(U1, V1, W1, X1, Y1, Z1, A2),
		V1=mutable(active),
		X1=mutable(H1)
	    ->  'chr update_mutable'(inactive, V1),
		'call_pattern/1__6__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
	    ;   true
	    )
	;   'call_pattern/1__6__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
	).
'call_pattern/1__6'(A, B) :-
	'call_pattern/1__7'(A, B).
'call_pattern/1__7'(A, B) :-
	activate_constraint(C, D, B, E),
	(   C==yes
	->  '$insert_in_store_call_pattern/1'(B)
	;   true
	).
final_answer_pattern(A, B) :-
	'final_answer_pattern/2__0'(A, B, C).
'final_answer_pattern/2__0'(A, B, C) :-
	'$via1_multi_hash_final_answer_pattern/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A,
	'chr lock'(B),
	'chr lock'(M),
	ai_observation_leq(B, M),
	'chr unlock'(B),
	'chr unlock'(M), !.
'final_answer_pattern/2__0'(A, B, C) :-
	'$via1_multi_hash_final_answer_pattern/2-1'(A, D), !,
	allocate_constraint(chr_translate:'final_answer_pattern/2__0'(A, B, C), C, final_answer_pattern(A, B), [A, B]),
	'final_answer_pattern/2__0__0'(D, A, B, C).
'final_answer_pattern/2__0__0'([], A, B, C) :-
	'final_answer_pattern/2__1'(A, B, C).
'final_answer_pattern/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    'chr lock'(M),
	    'chr lock'(D),
	    ai_observation_leq(M, D),
	    'chr unlock'(M),
	    'chr unlock'(D)
	->  remove_constraint_internal(A, N, O),
	    (   O==yes
	    ->  '$delete_from_store_final_answer_pattern/2'(A)
	    ;   true
	    ),
	    'final_answer_pattern/2__0__0'(B, C, D, E)
	;   'final_answer_pattern/2__0__0'(B, C, D, E)
	).
'final_answer_pattern/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'final_answer_pattern/2__0'(A, B, C), C, final_answer_pattern(A, B), [A, B]),
	'final_answer_pattern/2__1'(A, B, C).
'final_answer_pattern/2__1'(A, B, C) :-
	'$via1_multi_hash_initial_call_pattern/1-1'(A, D), !,
	'final_answer_pattern/2__1__0'(D, A, B, C).
'final_answer_pattern/2__1__0'([], A, B, C) :-
	'final_answer_pattern/2__2'(A, B, C).
'final_answer_pattern/2__1__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L),
	    G=mutable(active),
	    L==C,
	    nb_getval('$chr_store_global_ground_chr_translate:abstract_constraints/1', M)
	->  'final_answer_pattern/2__1__1'(M, A, B, C, D, E)
	;   'final_answer_pattern/2__1__0'(B, C, D, E)
	).
'final_answer_pattern/2__1__1'([], A, B, C, D, E) :-
	'final_answer_pattern/2__1__0'(B, C, D, E).
'final_answer_pattern/2__1__1'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N),
	    I=mutable(active),
	    O=t(130, C, G, A),
	    'chr novel_production'(C, O),
	    'chr novel_production'(G, O),
	    'chr novel_production'(A, O)
	->  'chr extend_history'(G, O),
	    activate_constraint(P, Q, G, R),
	    (   P==yes
	    ->  '$insert_in_store_final_answer_pattern/2'(G)
	    ;   true
	    ),
	    ai_observation_schedule_new_calls(N, F),
	    (   G=suspension(S, T, U, V, W, X, Y, Z),
		T=mutable(active),
		V=mutable(R)
	    ->  'chr update_mutable'(inactive, T),
		'final_answer_pattern/2__1__1'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'final_answer_pattern/2__1__1'(B, C, D, E, F, G)
	).
'final_answer_pattern/2__1'(A, B, C) :-
	'final_answer_pattern/2__2'(A, B, C).
'final_answer_pattern/2__2'(A, B, C) :-
	'$via1_multi_hash_depends_on/2-2'(A, D), !,
	'final_answer_pattern/2__2__0'(D, A, B, C).
'final_answer_pattern/2__2__0'([], A, B, C) :-
	'final_answer_pattern/2__3'(A, B, C).
'final_answer_pattern/2__2__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    M==C,
	    N=t(132, A, E),
	    'chr novel_production'(A, N),
	    'chr novel_production'(E, N)
	->  'chr extend_history'(E, N),
	    activate_constraint(O, P, E, Q),
	    (   O==yes
	    ->  '$insert_in_store_final_answer_pattern/2'(E)
	    ;   true
	    ),
	    final_answer_pattern(L, D),
	    (   E=suspension(R, S, T, U, V, W, X, Y),
		S=mutable(active),
		U=mutable(Q)
	    ->  'chr update_mutable'(inactive, S),
		'final_answer_pattern/2__2__0'(B, C, D, E)
	    ;   true
	    )
	;   'final_answer_pattern/2__2__0'(B, C, D, E)
	).
'final_answer_pattern/2__2'(A, B, C) :-
	'final_answer_pattern/2__3'(A, B, C).
'final_answer_pattern/2__3'(A, B, C) :-
	nb_getval('$chr_store_global_ground_chr_translate:depends_on/2', D), !,
	'final_answer_pattern/2__3__0'(D, A, B, C).
'final_answer_pattern/2__3__0'([], A, B, C) :-
	'final_answer_pattern/2__4'(A, B, C).
'final_answer_pattern/2__3__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    '$via1_multi_hash_depends_on_goal/2-12'(k(L, C), N),
	    'chr sbag_member'(O, N),
	    O=suspension(P, Q, R, S, T, U, V, W),
	    Q=mutable(active),
	    V==L,
	    W==C
	->  remove_constraint_internal(A, X, Y),
	    (   Y==yes
	    ->  '$delete_from_store_depends_on/2'(A)
	    ;   true
	    ),
	    'final_answer_pattern/2__3__0'(B, C, D, E)
	;   'final_answer_pattern/2__3__0'(B, C, D, E)
	).
'final_answer_pattern/2__3'(A, B, C) :-
	'final_answer_pattern/2__4'(A, B, C).
'final_answer_pattern/2__4'(A, B, C) :-
	'$via1_multi_hash_depends_on_goal/2-2'(A, D), !,
	'final_answer_pattern/2__4__0'(D, A, B, C).
'final_answer_pattern/2__4__0'([], A, B, C) :-
	'final_answer_pattern/2__5'(A, B, C).
'final_answer_pattern/2__4__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    M==C,
	    N=t(136, A, E),
	    'chr novel_production'(A, N),
	    'chr novel_production'(E, N)
	->  'chr extend_history'(E, N),
	    activate_constraint(O, P, E, Q),
	    (   O==yes
	    ->  '$insert_in_store_final_answer_pattern/2'(E)
	    ;   true
	    ),
	    L=odom([R|S], T),
	    D=odom([], U),
	    V=odom(S, U),
	    call_pattern(V),
	    depends_on(L, V),
	    (   E=suspension(W, X, Y, Z, A1, B1, C1, D1),
		X=mutable(active),
		Z=mutable(Q)
	    ->  'chr update_mutable'(inactive, X),
		'final_answer_pattern/2__4__0'(B, C, D, E)
	    ;   true
	    )
	;   'final_answer_pattern/2__4__0'(B, C, D, E)
	).
'final_answer_pattern/2__4'(A, B, C) :-
	'final_answer_pattern/2__5'(A, B, C).
'final_answer_pattern/2__5'(A, B, C) :-
	'$via1_multi_hash_depends_on_as/3-2'(A, D), !,
	'final_answer_pattern/2__5__0'(D, A, B, C).
'final_answer_pattern/2__5__0'([], A, B, C) :-
	'final_answer_pattern/2__6'(A, B, C).
'final_answer_pattern/2__5__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N),
	    G=mutable(active),
	    M==C,
	    '$via1_multi_hash_final_answer_pattern/2-1'(N, O)
	->  'final_answer_pattern/2__5__1'(O, L, N, A, B, C, D, E)
	;   'final_answer_pattern/2__5__0'(B, C, D, E)
	).
'final_answer_pattern/2__5__1'([], A, B, C, D, E, F, G) :-
	'final_answer_pattern/2__5__0'(D, E, F, G).
'final_answer_pattern/2__5__1'([A|B], C, D, E, F, G, H, I) :-
	(   A=suspension(J, K, L, M, N, O, P, Q),
	    K=mutable(active),
	    P==D,
	    R=t(141, E, I, A),
	    'chr novel_production'(E, R),
	    'chr novel_production'(I, R),
	    'chr novel_production'(A, R)
	->  'chr extend_history'(I, R),
	    activate_constraint(S, T, I, U),
	    (   S==yes
	    ->  '$insert_in_store_final_answer_pattern/2'(I)
	    ;   true
	    ),
	    ai_observation_lub(H, Q, V),
	    final_answer_pattern(C, V),
	    (   I=suspension(W, X, Y, Z, A1, B1, C1, D1),
		X=mutable(active),
		Z=mutable(U)
	    ->  'chr update_mutable'(inactive, X),
		'final_answer_pattern/2__5__1'(B, C, D, E, F, G, H, I)
	    ;   true
	    )
	;   'final_answer_pattern/2__5__1'(B, C, D, E, F, G, H, I)
	).
'final_answer_pattern/2__5'(A, B, C) :-
	'final_answer_pattern/2__6'(A, B, C).
'final_answer_pattern/2__6'(A, B, C) :-
	'$via1_multi_hash_depends_on_as/3-3'(A, D), !,
	'final_answer_pattern/2__6__0'(D, A, B, C).
'final_answer_pattern/2__6__0'([], A, B, C) :-
	'final_answer_pattern/2__7'(A, B, C).
'final_answer_pattern/2__6__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N),
	    G=mutable(active),
	    N==C,
	    '$via1_multi_hash_final_answer_pattern/2-1'(M, O)
	->  'final_answer_pattern/2__6__1'(O, L, M, A, B, C, D, E)
	;   'final_answer_pattern/2__6__0'(B, C, D, E)
	).
'final_answer_pattern/2__6__1'([], A, B, C, D, E, F, G) :-
	'final_answer_pattern/2__6__0'(D, E, F, G).
'final_answer_pattern/2__6__1'([A|B], C, D, E, F, G, H, I) :-
	(   A=suspension(J, K, L, M, N, O, P, Q),
	    K=mutable(active),
	    P==D,
	    R=t(141, E, A, I),
	    'chr novel_production'(E, R),
	    'chr novel_production'(A, R),
	    'chr novel_production'(I, R)
	->  'chr extend_history'(I, R),
	    activate_constraint(S, T, I, U),
	    (   S==yes
	    ->  '$insert_in_store_final_answer_pattern/2'(I)
	    ;   true
	    ),
	    ai_observation_lub(Q, H, V),
	    final_answer_pattern(C, V),
	    (   I=suspension(W, X, Y, Z, A1, B1, C1, D1),
		X=mutable(active),
		Z=mutable(U)
	    ->  'chr update_mutable'(inactive, X),
		'final_answer_pattern/2__6__1'(B, C, D, E, F, G, H, I)
	    ;   true
	    )
	;   'final_answer_pattern/2__6__1'(B, C, D, E, F, G, H, I)
	).
'final_answer_pattern/2__6'(A, B, C) :-
	'final_answer_pattern/2__7'(A, B, C).
'final_answer_pattern/2__7'(A, B, C) :-
	'$via1_multi_hash_depends_on_ap/4-3'(A, D), !,
	'final_answer_pattern/2__7__0'(D, A, B, C).
'final_answer_pattern/2__7__0'([], A, B, C) :-
	'final_answer_pattern/2__8'(A, B, C).
'final_answer_pattern/2__7__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N, O),
	    G=mutable(active),
	    N==C,
	    P=t(143, A, E),
	    'chr novel_production'(A, P),
	    'chr novel_production'(E, P)
	->  'chr extend_history'(E, P),
	    activate_constraint(Q, R, E, S),
	    (   Q==yes
	    ->  '$insert_in_store_final_answer_pattern/2'(E)
	    ;   true
	    ),
	    final_answer_pattern(L, D),
	    (   E=suspension(T, U, V, W, X, Y, Z, A1),
		U=mutable(active),
		W=mutable(S)
	    ->  'chr update_mutable'(inactive, U),
		'final_answer_pattern/2__7__0'(B, C, D, E)
	    ;   true
	    )
	;   'final_answer_pattern/2__7__0'(B, C, D, E)
	).
'final_answer_pattern/2__7'(A, B, C) :-
	'final_answer_pattern/2__8'(A, B, C).
'final_answer_pattern/2__8'(A, B, C) :-
	'$via1_multi_hash_depends_on_ap/4-2'(A, D), !,
	'final_answer_pattern/2__8__0'(D, A, B, C).
'final_answer_pattern/2__8__0'([], A, B, C) :-
	'final_answer_pattern/2__9'(A, B, C).
'final_answer_pattern/2__8__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N, O),
	    G=mutable(active),
	    M==C,
	    '$via1_multi_hash_final_answer_pattern/2-1'(N, P)
	->  'final_answer_pattern/2__8__1'(P, L, N, O, A, B, C, D, E)
	;   'final_answer_pattern/2__8__0'(B, C, D, E)
	).
'final_answer_pattern/2__8__1'([], A, B, C, D, E, F, G, H) :-
	'final_answer_pattern/2__8__0'(E, F, G, H).
'final_answer_pattern/2__8__1'([A|B], C, D, E, F, G, H, I, J) :-
	(   A=suspension(K, L, M, N, O, P, Q, R),
	    L=mutable(active),
	    Q==D,
	    S=t(144, F, J, A),
	    'chr novel_production'(F, S),
	    'chr novel_production'(J, S),
	    'chr novel_production'(A, S)
	->  'chr extend_history'(J, S),
	    activate_constraint(T, U, J, V),
	    (   T==yes
	    ->  '$insert_in_store_final_answer_pattern/2'(J)
	    ;   true
	    ),
	    C=odom(occ(W, X), Y),
	    (   ai_observation_is_observed(I, W)
	    ->  ai_observed(W, X)
	    ;   ai_not_observed(W, X)
	    ),
	    (   E==yes
	    ->  I=odom([], Z),
		ord_delete(Z, W, A1),
		B1=odom([], A1)
	    ;   B1=I
	    ),
	    ai_observation_lub(B1, R, C1),
	    final_answer_pattern(C, C1),
	    (   J=suspension(D1, E1, F1, G1, H1, I1, J1, K1),
		E1=mutable(active),
		G1=mutable(V)
	    ->  'chr update_mutable'(inactive, E1),
		'final_answer_pattern/2__8__1'(B, C, D, E, F, G, H, I, J)
	    ;   true
	    )
	;   'final_answer_pattern/2__8__1'(B, C, D, E, F, G, H, I, J)
	).
'final_answer_pattern/2__8'(A, B, C) :-
	'final_answer_pattern/2__9'(A, B, C).
'final_answer_pattern/2__9'(A, B, C) :-
	'$via1_multi_hash_depends_on_ap/4-3'(A, D), !,
	'final_answer_pattern/2__9__0'(D, A, B, C).
'final_answer_pattern/2__9__0'([], A, B, C) :-
	'final_answer_pattern/2__10'(A, B, C).
'final_answer_pattern/2__9__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N, O),
	    G=mutable(active),
	    N==C,
	    '$via1_multi_hash_final_answer_pattern/2-1'(M, P)
	->  'final_answer_pattern/2__9__1'(P, L, M, O, A, B, C, D, E)
	;   'final_answer_pattern/2__9__0'(B, C, D, E)
	).
'final_answer_pattern/2__9__1'([], A, B, C, D, E, F, G, H) :-
	'final_answer_pattern/2__9__0'(E, F, G, H).
'final_answer_pattern/2__9__1'([A|B], C, D, E, F, G, H, I, J) :-
	(   A=suspension(K, L, M, N, O, P, Q, R),
	    L=mutable(active),
	    Q==D,
	    S=t(144, F, A, J),
	    'chr novel_production'(F, S),
	    'chr novel_production'(A, S),
	    'chr novel_production'(J, S)
	->  'chr extend_history'(J, S),
	    activate_constraint(T, U, J, V),
	    (   T==yes
	    ->  '$insert_in_store_final_answer_pattern/2'(J)
	    ;   true
	    ),
	    C=odom(occ(W, X), Y),
	    (   ai_observation_is_observed(R, W)
	    ->  ai_observed(W, X)
	    ;   ai_not_observed(W, X)
	    ),
	    (   E==yes
	    ->  R=odom([], Z),
		ord_delete(Z, W, A1),
		B1=odom([], A1)
	    ;   B1=R
	    ),
	    ai_observation_lub(B1, I, C1),
	    final_answer_pattern(C, C1),
	    (   J=suspension(D1, E1, F1, G1, H1, I1, J1, K1),
		E1=mutable(active),
		G1=mutable(V)
	    ->  'chr update_mutable'(inactive, E1),
		'final_answer_pattern/2__9__1'(B, C, D, E, F, G, H, I, J)
	    ;   true
	    )
	;   'final_answer_pattern/2__9__1'(B, C, D, E, F, G, H, I, J)
	).
'final_answer_pattern/2__9'(A, B, C) :-
	'final_answer_pattern/2__10'(A, B, C).
'final_answer_pattern/2__10'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_final_answer_pattern/2'(C)
	;   true
	).
abstract_constraints(A) :-
	'abstract_constraints/1__0'(A, B).
'abstract_constraints/1__0'(A, B) :-
	nb_getval('$chr_store_global_ground_chr_translate:final_answer_pattern/2', C), !,
	allocate_constraint(chr_translate:'abstract_constraints/1__0'(A, B), B, abstract_constraints(A), [A]),
	'abstract_constraints/1__0__0'(C, A, B).
'abstract_constraints/1__0__0'([], A, B) :-
	'abstract_constraints/1__1'(A, B).
'abstract_constraints/1__0__0'([A|B], C, D) :-
	(   A=suspension(E, F, G, H, I, J, K, L),
	    F=mutable(active),
	    '$via1_multi_hash_initial_call_pattern/1-1'(K, M)
	->  'abstract_constraints/1__0__1'(M, K, L, A, B, C, D)
	;   'abstract_constraints/1__0__0'(B, C, D)
	).
'abstract_constraints/1__0__1'([], A, B, C, D, E, F) :-
	'abstract_constraints/1__0__0'(D, E, F).
'abstract_constraints/1__0__1'([A|B], C, D, E, F, G, H) :-
	(   A=suspension(I, J, K, L, M, N, O),
	    J=mutable(active),
	    O==C,
	    P=t(130, E, A, H),
	    'chr novel_production'(E, P),
	    'chr novel_production'(A, P),
	    'chr novel_production'(H, P)
	->  'chr extend_history'(H, P),
	    activate_constraint(Q, R, H, S),
	    (   Q==yes
	    ->  '$insert_in_store_abstract_constraints/1'(H)
	    ;   true
	    ),
	    ai_observation_schedule_new_calls(G, D),
	    (   H=suspension(T, U, V, W, X, Y, Z),
		U=mutable(active),
		W=mutable(S)
	    ->  'chr update_mutable'(inactive, U),
		'abstract_constraints/1__0__1'(B, C, D, E, F, G, H)
	    ;   true
	    )
	;   'abstract_constraints/1__0__1'(B, C, D, E, F, G, H)
	).
'abstract_constraints/1__0'(A, B) :-
	allocate_constraint(chr_translate:'abstract_constraints/1__0'(A, B), B, abstract_constraints(A), [A]),
	'abstract_constraints/1__1'(A, B).
'abstract_constraints/1__1'(A, B) :-
	nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
	'abstract_constraints/1__1__0'(C, A, B).
'abstract_constraints/1__1__0'([], A, B) :-
	'abstract_constraints/1__2'(A, B).
'abstract_constraints/1__1__0'([A|B], C, D) :-
	(   A=suspension(E, F, G, H, I, J, K),
	    F=mutable(active),
	    nonvar(K),
	    K=odom(L, M),
	    N=t(139, A, D),
	    'chr novel_production'(A, N),
	    'chr novel_production'(D, N),
	    'chr lock'(L),
	    'chr lock'(C),
	    memberchk_eq(L, C),
	    'chr unlock'(L),
	    'chr unlock'(C)
	->  'chr extend_history'(D, N),
	    activate_constraint(O, P, D, Q),
	    (   O==yes
	    ->  '$insert_in_store_abstract_constraints/1'(D)
	    ;   true
	    ),
	    R=odom(occ(L, 1), M),
	    call_pattern(R),
	    depends_on(odom(L, M), R),
	    (   D=suspension(S, T, U, V, W, X, Y),
		T=mutable(active),
		V=mutable(Q)
	    ->  'chr update_mutable'(inactive, T),
		'abstract_constraints/1__1__0'(B, C, D)
	    ;   true
	    )
	;   'abstract_constraints/1__1__0'(B, C, D)
	).
'abstract_constraints/1__1'(A, B) :-
	'abstract_constraints/1__2'(A, B).
'abstract_constraints/1__2'(A, B) :-
	nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
	'abstract_constraints/1__2__0'(C, A, B).
'abstract_constraints/1__2__0'([], A, B) :-
	'abstract_constraints/1__3'(A, B).
'abstract_constraints/1__2__0'([A|B], C, D) :-
	(   A=suspension(E, F, G, H, I, J, K),
	    F=mutable(active),
	    nonvar(K),
	    K=odom(L, M),
	    nonvar(L),
	    L=occ(N, O),
	    '$via1_multi_hash_occurrence/4-2'(O, P)
	->  'abstract_constraints/1__2__1'(P, N, O, M, A, B, C, D)
	;   'abstract_constraints/1__2__0'(B, C, D)
	).
'abstract_constraints/1__2__1'([], A, B, C, D, E, F, G) :-
	'abstract_constraints/1__2__0'(E, F, G).
'abstract_constraints/1__2__1'([A|B], C, D, E, F, G, H, I) :-
	(   A=suspension(J, K, L, M, N, O, P, Q, R, S),
	    K=mutable(active),
	    P==C,
	    Q==D,
	    '$via1_multi_hash_rule/2-1'(R, T)
	->  'abstract_constraints/1__2__2'(T, R, S, A, B, C, D, E, F, G, H, I)
	;   'abstract_constraints/1__2__1'(B, C, D, E, F, G, H, I)
	).
'abstract_constraints/1__2__2'([], A, B, C, D, E, F, G, H, I, J, K) :-
	'abstract_constraints/1__2__1'(D, E, F, G, H, I, J, K).
'abstract_constraints/1__2__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
	(   A=suspension(N, O, P, Q, R, S, T, U),
	    O=mutable(active),
	    T==C,
	    V=t(140, J, M, E, A),
	    'chr novel_production'(J, V),
	    'chr novel_production'(M, V),
	    'chr novel_production'(E, V),
	    'chr novel_production'(A, V),
	    'chr lock'(U),
	    'chr lock'(D),
	    U=pragma(rule(W, X, Y, Z), ids(A1, B1), C1, D1, E1),
	    memberchk_eq(D, A1),
	    'chr unlock'(U),
	    'chr unlock'(D)
	->  'chr extend_history'(M, V),
	    activate_constraint(F1, G1, M, H1),
	    (   F1==yes
	    ->  '$insert_in_store_abstract_constraints/1'(M)
	    ;   true
	    ),
	    select2(D, I1, A1, W, J1, K1),
	    ai_observation_abstract_constraints(K1, L, L1),
	    ai_observation_observe_list(odom([], I), L1, odom([], M1)),
	    ai_observation_abstract_constraints(X, L, N1),
	    ai_observation_observe_list(odom([], M1), N1, odom([], O1)),
	    ai_observation_abstract_goal(Z, L, P1),
	    call_pattern(odom(P1, O1)),
	    Q1 is H+1,
	    R1=odom(occ(G, Q1), I),
	    call_pattern(R1),
	    depends_on_as(odom(occ(G, H), I), odom(P1, O1), R1),
	    (   M=suspension(S1, T1, U1, V1, W1, X1, Y1),
		T1=mutable(active),
		V1=mutable(H1)
	    ->  'chr update_mutable'(inactive, T1),
		'abstract_constraints/1__2__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	    ;   true
	    )
	;   'abstract_constraints/1__2__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	).
'abstract_constraints/1__2'(A, B) :-
	'abstract_constraints/1__3'(A, B).
'abstract_constraints/1__3'(A, B) :-
	nb_getval('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
	'abstract_constraints/1__3__0'(C, A, B).
'abstract_constraints/1__3__0'([], A, B) :-
	'abstract_constraints/1__4'(A, B).
'abstract_constraints/1__3__0'([A|B], C, D) :-
	(   A=suspension(E, F, G, H, I, J, K),
	    F=mutable(active),
	    nonvar(K),
	    K=odom(L, M),
	    nonvar(L),
	    L=occ(N, O),
	    '$via1_multi_hash_occurrence/4-2'(O, P)
	->  'abstract_constraints/1__3__1'(P, N, O, M, A, B, C, D)
	;   'abstract_constraints/1__3__0'(B, C, D)
	).
'abstract_constraints/1__3__1'([], A, B, C, D, E, F, G) :-
	'abstract_constraints/1__3__0'(E, F, G).
'abstract_constraints/1__3__1'([A|B], C, D, E, F, G, H, I) :-
	(   A=suspension(J, K, L, M, N, O, P, Q, R, S),
	    K=mutable(active),
	    P==C,
	    Q==D,
	    '$via1_multi_hash_rule/2-1'(R, T)
	->  'abstract_constraints/1__3__2'(T, R, S, A, B, C, D, E, F, G, H, I)
	;   'abstract_constraints/1__3__1'(B, C, D, E, F, G, H, I)
	).
'abstract_constraints/1__3__2'([], A, B, C, D, E, F, G, H, I, J, K) :-
	'abstract_constraints/1__3__1'(D, E, F, G, H, I, J, K).
'abstract_constraints/1__3__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
	(   A=suspension(N, O, P, Q, R, S, T, U),
	    O=mutable(active),
	    T==C,
	    V=t(142, J, M, E, A),
	    'chr novel_production'(J, V),
	    'chr novel_production'(M, V),
	    'chr novel_production'(E, V),
	    'chr novel_production'(A, V),
	    'chr lock'(U),
	    'chr lock'(D),
	    U=pragma(rule(W, X, Y, Z), ids(A1, B1), C1, D1, E1),
	    memberchk_eq(D, B1),
	    'chr unlock'(U),
	    'chr unlock'(D)
	->  'chr extend_history'(M, V),
	    activate_constraint(F1, G1, M, H1),
	    (   F1==yes
	    ->  '$insert_in_store_abstract_constraints/1'(M)
	    ;   true
	    ),
	    select2(D, I1, B1, X, J1, K1),
	    ai_observation_abstract_constraints(K1, L, L1),
	    ai_observation_observe_list(odom([], I), L1, odom([], M1)),
	    ai_observation_abstract_constraints(W, L, N1),
	    ai_observation_observe_list(odom([], M1), N1, odom([], O1)),
	    ord_add_element(O1, G, P1),
	    ai_observation_abstract_goal(Z, L, Q1),
	    call_pattern(odom(Q1, P1)),
	    (   ord_memberchk(G, O1)
	    ->  R1=no
	    ;   R1=yes
	    ),
	    S1 is H+1,
	    T1=odom(occ(G, S1), I),
	    call_pattern(T1),
	    depends_on_ap(odom(occ(G, H), I), odom(Q1, P1), T1, R1),
	    (   M=suspension(U1, V1, W1, X1, Y1, Z1, A2),
		V1=mutable(active),
		X1=mutable(H1)
	    ->  'chr update_mutable'(inactive, V1),
		'abstract_constraints/1__3__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	    ;   true
	    )
	;   'abstract_constraints/1__3__2'(B, C, D, E, F, G, H, I, J, K, L, M)
	).
'abstract_constraints/1__3'(A, B) :-
	'abstract_constraints/1__4'(A, B).
'abstract_constraints/1__4'(A, B) :-
	activate_constraint(C, D, B, E),
	(   C==yes
	->  '$insert_in_store_abstract_constraints/1'(B)
	;   true
	).
depends_on(A, B) :-
	'depends_on/2__0'(A, B, C).
'depends_on/2__0'(A, B, C) :-
	'$via1_multi_hash_final_answer_pattern/2-1'(B, D), !,
	allocate_constraint(chr_translate:'depends_on/2__0'(A, B, C), C, depends_on(A, B), [A, B]),
	'depends_on/2__0__0'(D, A, B, C).
'depends_on/2__0__0'([], A, B, C) :-
	'depends_on/2__1'(A, B, C).
'depends_on/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==D,
	    N=t(132, E, A),
	    'chr novel_production'(E, N),
	    'chr novel_production'(A, N)
	->  'chr extend_history'(E, N),
	    activate_constraint(O, P, E, Q),
	    (   O==yes
	    ->  '$insert_in_store_depends_on/2'(E)
	    ;   true
	    ),
	    final_answer_pattern(C, M),
	    (   E=suspension(R, S, T, U, V, W, X, Y),
		S=mutable(active),
		U=mutable(Q)
	    ->  'chr update_mutable'(inactive, S),
		'depends_on/2__0__0'(B, C, D, E)
	    ;   true
	    )
	;   'depends_on/2__0__0'(B, C, D, E)
	).
'depends_on/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'depends_on/2__0'(A, B, C), C, depends_on(A, B), [A, B]),
	'depends_on/2__1'(A, B, C).
'depends_on/2__1'(A, B, C) :-
	'$via1_multi_hash_depends_on_goal/2-1'(A, D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A,
	'$via1_multi_hash_final_answer_pattern/2-1'(M, N),
	'chr sbag_member'(O, N),
	O=suspension(P, Q, R, S, T, U, V, W),
	Q=mutable(active),
	V==M, !,
	(   var(C)
	->  true
	;   remove_constraint_internal(C, X, Y),
	    (   Y==yes
	    ->  '$delete_from_store_depends_on/2'(C)
	    ;   true
	    )
	).
'depends_on/2__1'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_depends_on/2'(C)
	;   true
	).
depends_on_ap(A, B, C, D) :-
	'depends_on_ap/4__0'(A, B, C, D, E).
'depends_on_ap/4__0'(A, B, C, D, E) :-
	'$via1_multi_hash_final_answer_pattern/2-1'(C, F), !,
	allocate_constraint(chr_translate:'depends_on_ap/4__0'(A, B, C, D, E), E, depends_on_ap(A, B, C, D), [A, B, C, D]),
	'depends_on_ap/4__0__0'(F, A, B, C, D, E).
'depends_on_ap/4__0__0'([], A, B, C, D, E) :-
	'depends_on_ap/4__1'(A, B, C, D, E).
'depends_on_ap/4__0__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    N==E,
	    P=t(143, G, A),
	    'chr novel_production'(G, P),
	    'chr novel_production'(A, P)
	->  'chr extend_history'(G, P),
	    activate_constraint(Q, R, G, S),
	    (   Q==yes
	    ->  '$insert_in_store_depends_on_ap/4'(G)
	    ;   true
	    ),
	    final_answer_pattern(C, O),
	    (   G=suspension(T, U, V, W, X, Y, Z, A1, B1, C1),
		U=mutable(active),
		W=mutable(S)
	    ->  'chr update_mutable'(inactive, U),
		'depends_on_ap/4__0__0'(B, C, D, E, F, G)
	    ;   true
	    )
	;   'depends_on_ap/4__0__0'(B, C, D, E, F, G)
	).
'depends_on_ap/4__0'(A, B, C, D, E) :-
	allocate_constraint(chr_translate:'depends_on_ap/4__0'(A, B, C, D, E), E, depends_on_ap(A, B, C, D), [A, B, C, D]),
	'depends_on_ap/4__1'(A, B, C, D, E).
'depends_on_ap/4__1'(A, B, C, D, E) :-
	'$via1_multi_hash_final_answer_pattern/2-1'(B, F), !,
	'depends_on_ap/4__1__0'(F, A, B, C, D, E).
'depends_on_ap/4__1__0'([], A, B, C, D, E) :-
	'depends_on_ap/4__2'(A, B, C, D, E).
'depends_on_ap/4__1__0'([A|B], C, D, E, F, G) :-
	(   A=suspension(H, I, J, K, L, M, N, O),
	    I=mutable(active),
	    N==D,
	    '$via1_multi_hash_final_answer_pattern/2-1'(E, P)
	->  'depends_on_ap/4__1__1'(P, O, A, B, C, D, E, F, G)
	;   'depends_on_ap/4__1__0'(B, C, D, E, F, G)
	).
'depends_on_ap/4__1__1'([], A, B, C, D, E, F, G, H) :-
	'depends_on_ap/4__1__0'(C, D, E, F, G, H).
'depends_on_ap/4__1__1'([A|B], C, D, E, F, G, H, I, J) :-
	(   A=suspension(K, L, M, N, O, P, Q, R),
	    L=mutable(active),
	    A\==D,
	    Q==H,
	    S=t(144, J, D, A),
	    'chr novel_production'(J, S),
	    'chr novel_production'(D, S),
	    'chr novel_production'(A, S)
	->  'chr extend_history'(J, S),
	    activate_constraint(T, U, J, V),
	    (   T==yes
	    ->  '$insert_in_store_depends_on_ap/4'(J)
	    ;   true
	    ),
	    F=odom(occ(W, X), Y),
	    (   ai_observation_is_observed(C, W)
	    ->  ai_observed(W, X)
	    ;   ai_not_observed(W, X)
	    ),
	    (   I==yes
	    ->  C=odom([], Z),
		ord_delete(Z, W, A1),
		B1=odom([], A1)
	    ;   B1=C
	    ),
	    ai_observation_lub(B1, R, C1),
	    final_answer_pattern(F, C1),
	    (   J=suspension(D1, E1, F1, G1, H1, I1, J1, K1, L1, M1),
		E1=mutable(active),
		G1=mutable(V)
	    ->  'chr update_mutable'(inactive, E1),
		'depends_on_ap/4__1__1'(B, C, D, E, F, G, H, I, J)
	    ;   true
	    )
	;   'depends_on_ap/4__1__1'(B, C, D, E, F, G, H, I, J)
	).
'depends_on_ap/4__1'(A, B, C, D, E) :-
	'depends_on_ap/4__2'(A, B, C, D, E).
'depends_on_ap/4__2'(A, B, C, D, E) :-
	activate_constraint(F, G, E, H),
	(   F==yes
	->  '$insert_in_store_depends_on_ap/4'(E)
	;   true
	).
depends_on_goal(A, B) :-
	'depends_on_goal/2__0'(A, B, C).
'depends_on_goal/2__0'(A, B, C) :-
	'$via1_multi_hash_depends_on/2-1'(A, D), !,
	allocate_constraint(chr_translate:'depends_on_goal/2__0'(A, B, C), C, depends_on_goal(A, B), [A, B]),
	'depends_on_goal/2__0__0'(D, A, B, C).
'depends_on_goal/2__0__0'([], A, B, C) :-
	'depends_on_goal/2__1'(A, B, C).
'depends_on_goal/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    '$via1_multi_hash_final_answer_pattern/2-1'(D, N),
	    'chr sbag_member'(O, N),
	    O=suspension(P, Q, R, S, T, U, V, W),
	    Q=mutable(active),
	    V==D
	->  remove_constraint_internal(A, X, Y),
	    (   Y==yes
	    ->  '$delete_from_store_depends_on/2'(A)
	    ;   true
	    ),
	    'depends_on_goal/2__0__0'(B, C, D, E)
	;   'depends_on_goal/2__0__0'(B, C, D, E)
	).
'depends_on_goal/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'depends_on_goal/2__0'(A, B, C), C, depends_on_goal(A, B), [A, B]),
	'depends_on_goal/2__1'(A, B, C).
'depends_on_goal/2__1'(A, B, C) :-
	'$via1_multi_hash_final_answer_pattern/2-1'(B, D), !,
	'depends_on_goal/2__1__0'(D, A, B, C).
'depends_on_goal/2__1__0'([], A, B, C) :-
	'depends_on_goal/2__2'(A, B, C).
'depends_on_goal/2__1__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==D,
	    N=t(136, E, A),
	    'chr novel_production'(E, N),
	    'chr novel_production'(A, N)
	->  'chr extend_history'(E, N),
	    activate_constraint(O, P, E, Q),
	    (   O==yes
	    ->  '$insert_in_store_depends_on_goal/2'(E)
	    ;   true
	    ),
	    C=odom([R|S], T),
	    M=odom([], U),
	    V=odom(S, U),
	    call_pattern(V),
	    depends_on(C, V),
	    (   E=suspension(W, X, Y, Z, A1, B1, C1, D1),
		X=mutable(active),
		Z=mutable(Q)
	    ->  'chr update_mutable'(inactive, X),
		'depends_on_goal/2__1__0'(B, C, D, E)
	    ;   true
	    )
	;   'depends_on_goal/2__1__0'(B, C, D, E)
	).
'depends_on_goal/2__1'(A, B, C) :-
	'depends_on_goal/2__2'(A, B, C).
'depends_on_goal/2__2'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_depends_on_goal/2'(C)
	;   true
	).
ai_observed(A, B) :-
	'ai_observed/2__0'(A, B, C).
'ai_observed/2__0'(A, B, C) :-
	'$via1_multi_hash_ai_not_observed/2-12'(k(A, B), D), !,
	allocate_constraint(chr_translate:'ai_observed/2__0'(A, B, C), C, ai_observed(A, B), [A, B]),
	'ai_observed/2__0__0'(D, A, B, C).
'ai_observed/2__0__0'([], A, B, C) :-
	'ai_observed/2__1'(A, B, C).
'ai_observed/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==C,
	    M==D
	->  remove_constraint_internal(A, N, O),
	    (   O==yes
	    ->  '$delete_from_store_ai_not_observed/2'(A)
	    ;   true
	    ),
	    'ai_observed/2__0__0'(B, C, D, E)
	;   'ai_observed/2__0__0'(B, C, D, E)
	).
'ai_observed/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'ai_observed/2__0'(A, B, C), C, ai_observed(A, B), [A, B]),
	'ai_observed/2__1'(A, B, C).
'ai_observed/2__1'(A, B, C) :-
	'$via1_multi_hash_ai_observed/2-12'(k(A, B), D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A,
	    M==B
	->  true
	), !,
	(   var(C)
	->  true
	;   remove_constraint_internal(C, N, O),
	    (   O==yes
	    ->  '$delete_from_store_ai_observed/2'(C)
	    ;   true
	    )
	).
'ai_observed/2__1'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_ai_observed/2'(C)
	;   true
	).
ai_not_observed(A, B) :-
	'ai_not_observed/2__0'(A, B, C).
'ai_not_observed/2__0'(A, B, C) :-
	'$via1_multi_hash_stored_complete/3-1'(A, D), !,
	allocate_constraint(chr_translate:'ai_not_observed/2__0'(A, B, C), C, ai_not_observed(A, B), [A, B]),
	'ai_not_observed/2__0__0'(D, A, B, C).
'ai_not_observed/2__0__0'([], A, B, C) :-
	'ai_not_observed/2__1'(A, B, C).
'ai_not_observed/2__0__0'([A|B], C, D, E) :-
	(   A=suspension(F, G, H, I, J, K, L, M, N),
	    G=mutable(active),
	    L==C,
	    D<M,
	    '$via1_multi_hash_stored/3-2'(D, O),
	    'chr sbag_member'(P, O),
	    P=suspension(Q, R, S, T, U, V, W, X, Y),
	    R=mutable(active),
	    W==C,
	    X==D,
	    Y==yes
	->  remove_constraint_internal(A, Z, A1),
	    (   A1==yes
	    ->  '$delete_from_store_stored_complete/3'(A)
	    ;   true
	    ),
	    remove_constraint_internal(P, B1, C1),
	    (   C1==yes
	    ->  '$delete_from_store_stored/3'(P)
	    ;   true
	    ),
	    activate_constraint(D1, E1, E, F1),
	    (   D1==yes
	    ->  '$insert_in_store_ai_not_observed/2'(E)
	    ;   true
	    ),
	    G1 is N-1,
	    stored(C, D, maybe),
	    stored_complete(C, M, G1),
	    (   E=suspension(H1, I1, J1, K1, L1, M1, N1, O1),
		I1=mutable(active),
		K1=mutable(F1)
	    ->  'chr update_mutable'(inactive, I1),
		'ai_not_observed/2__0__0'(B, C, D, E)
	    ;   true
	    )
	;   'ai_not_observed/2__0__0'(B, C, D, E)
	).
'ai_not_observed/2__0'(A, B, C) :-
	allocate_constraint(chr_translate:'ai_not_observed/2__0'(A, B, C), C, ai_not_observed(A, B), [A, B]),
	'ai_not_observed/2__1'(A, B, C).
'ai_not_observed/2__1'(A, B, C) :-
	'$via1_multi_hash_ai_observed/2-12'(k(A, B), D),
	'chr sbag_member'(E, D),
	E=suspension(F, G, H, I, J, K, L, M),
	G=mutable(active),
	L==A,
	M==B, !,
	(   var(C)
	->  true
	;   remove_constraint_internal(C, N, O),
	    (   O==yes
	    ->  '$delete_from_store_ai_not_observed/2'(C)
	    ;   true
	    )
	).
'ai_not_observed/2__1'(A, B, C) :-
	'$via1_multi_hash_ai_not_observed/2-12'(k(A, B), D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A,
	    M==B
	->  true
	), !,
	(   var(C)
	->  true
	;   remove_constraint_internal(C, N, O),
	    (   O==yes
	    ->  '$delete_from_store_ai_not_observed/2'(C)
	    ;   true
	    )
	).
'ai_not_observed/2__1'(A, B, C) :-
	activate_constraint(D, E, C, F),
	(   D==yes
	->  '$insert_in_store_ai_not_observed/2'(C)
	;   true
	).
ai_is_observed(A, B) :-
	'ai_is_observed/2__0'(A, B, C).
'ai_is_observed/2__0'(A, B, C) :-
	'$via1_multi_hash_ai_not_observed/2-12'(k(A, B), D),
	(   'chr sbag_member'(E, D),
	    E=suspension(F, G, H, I, J, K, L, M),
	    G=mutable(active),
	    L==A,
	    M==B
	->  true
	), !,
	fail.
'ai_is_observed/2__0'(A, B, C) :- !.
depends_on_as(A, B, C) :-
	'depends_on_as/3__0'(A, B, C, D).
'depends_on_as/3__0'(A, B, C, D) :-
	'$via1_multi_hash_final_answer_pattern/2-1'(B, E), !,
	allocate_constraint(chr_translate:'depends_on_as/3__0'(A, B, C, D), D, depends_on_as(A, B, C), [A, B, C]),
	'depends_on_as/3__0__0'(E, A, B, C, D).
'depends_on_as/3__0__0'([], A, B, C, D) :-
	'depends_on_as/3__1'(A, B, C, D).
'depends_on_as/3__0__0'([A|B], C, D, E, F) :-
	(   A=suspension(G, H, I, J, K, L, M, N),
	    H=mutable(active),
	    M==D,
	    '$via1_multi_hash_final_answer_pattern/2-1'(E, O)
	->  'depends_on_as/3__0__1'(O, N, A, B, C, D, E, F)
	;   'depends_on_as/3__0__0'(B, C, D, E, F)
	).
'depends_on_as/3__0__1'([], A, B, C, D, E, F, G) :-
	'depends_on_as/3__0__0'(C, D, E, F, G).
'depends_on_as/3__0__1'([A|B], C, D, E, F, G, H, I) :-
	(   A=suspension(J, K, L, M, N, O, P, Q),
	    K=mutable(active),
	    A\==D,
	    P==H,
	    R=t(141, I, D, A),
	    'chr novel_production'(I, R),
	    'chr novel_production'(D, R),
	    'chr novel_production'(A, R)
	->  'chr extend_history'(I, R),
	    activate_constraint(S, T, I, U),
	    (   S==yes
	    ->  '$insert_in_store_depends_on_as/3'(I)
	    ;   true
	    ),
	    ai_observation_lub(C, Q, V),
	    final_answer_pattern(F, V),
	    (   I=suspension(W, X, Y, Z, A1, B1, C1, D1, E1),
		X=mutable(active),
		Z=mutable(U)
	    ->  'chr update_mutable'(inactive, X),
		'depends_on_as/3__0__1'(B, C, D, E, F, G, H, I)
	    ;   true
	    )
	;   'depends_on_as/3__0__1'(B, C, D, E, F, G, H, I)
	).
'depends_on_as/3__0'(A, B, C, D) :-
	allocate_constraint(chr_translate:'depends_on_as/3__0'(A, B, C, D), D, depends_on_as(A, B, C), [A, B, C]),
	'depends_on_as/3__1'(A, B, C, D).
'depends_on_as/3__1'(A, B, C, D) :-
	activate_constraint(E, F, D, G),
	(   E==yes
	->  '$insert_in_store_depends_on_as/3'(D)
	;   true
	).
